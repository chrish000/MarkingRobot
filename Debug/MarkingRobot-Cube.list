
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b18c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800b458  0800b458  0000c458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b4a8  0800b4a8  0000c4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800b4b0  0800b4b0  0000c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b4b8  0800b4b8  0000c4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800b4bc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000414  24000014  0800b4d0  0000d014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000428  0800b4d0  0000d428  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001da17  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031ed  00000000  00000000  0002aa59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001408  00000000  00000000  0002dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f9e  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034014  00000000  00000000  0002ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a66a  00000000  00000000  00064002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152251  00000000  00000000  0007e66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d08bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005570  00000000  00000000  001d0900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001d5e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b440 	.word	0x0800b440

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800b440 	.word	0x0800b440

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZL11reverseDatamh>:
 * @brief  Reverses the byte order of a given 32-bit data word.
 * @param  data: The 32-bit data word whose byte order is to be reversed.
 * @param  data_size: The number of bytes in the data word.
 * @retval unsigned int: The 32-bit data word with reversed byte order.
 */
static inline unsigned int reverseData(uint32_t data, uint8_t data_size) {
 80005fc:	b480      	push	{r7}
 80005fe:	b087      	sub	sp, #28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	const unsigned char BITS_PER_BYTE = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	74bb      	strb	r3, [r7, #18]
	const unsigned char BYTE_MAX_VALUE = 0xFF;
 800060c:	23ff      	movs	r3, #255	@ 0xff
 800060e:	747b      	strb	r3, [r7, #17]
	uint32_t reversed_data = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < data_size; ++i) {
 8000614:	2300      	movs	r3, #0
 8000616:	74fb      	strb	r3, [r7, #19]
 8000618:	e017      	b.n	800064a <_ZL11reverseDatamh+0x4e>
		right_shift = (data_size - i - 1) * BITS_PER_BYTE;
 800061a:	78fa      	ldrb	r2, [r7, #3]
 800061c:	7cfb      	ldrb	r3, [r7, #19]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	743b      	strb	r3, [r7, #16]
		left_shift = i * BITS_PER_BYTE;
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	73fb      	strb	r3, [r7, #15]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800062e:	7c3b      	ldrb	r3, [r7, #16]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	fa22 f303 	lsr.w	r3, r2, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	4313      	orrs	r3, r2
 8000642:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < data_size; ++i) {
 8000644:	7cfb      	ldrb	r3, [r7, #19]
 8000646:	3301      	adds	r3, #1
 8000648:	74fb      	strb	r3, [r7, #19]
 800064a:	7cfa      	ldrb	r2, [r7, #19]
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e3      	bcc.n	800061a <_ZL11reverseDatamh+0x1e>
	}
	return reversed_data;
 8000652:	697b      	ldr	r3, [r7, #20]
}
 8000654:	4618      	mov	r0, r3
 8000656:	371c      	adds	r7, #28
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <_ZN7TMC2209C1Ev>:
#include "utils.h"
#include <cstring>
/**
 * @brief  Constructor for the TMC2209 class, initializes default settings.
 */
TMC2209::TMC2209() {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	759a      	strb	r2, [r3, #22]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2200      	movs	r2, #0
 8000672:	75da      	strb	r2, [r3, #23]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2203      	movs	r2, #3
 8000678:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	cool_step_enabled_ = false;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	data_received_flag = false;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	735a      	strb	r2, [r3, #13]
	TMC2209_status = TMC_OK;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	731a      	strb	r2, [r3, #12]
}
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4618      	mov	r0, r3
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <_ZN7TMC22095setupEv>:
/**
 * @brief  Configures the TMC2209 communication interface.
 * @param  None
 * @retval None
 */
void TMC2209::setup() {
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
	HAL_HalfDuplex_EnableReceiver(UART_address);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f009 f9d2 	bl	8009a54 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(UART_address, rxBufferRaw,
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	330e      	adds	r3, #14
 80006b8:	2208      	movs	r2, #8
 80006ba:	4619      	mov	r1, r3
 80006bc:	f00a fdf2 	bl	800b2a4 <HAL_UARTEx_ReceiveToIdle_DMA>
			WRITE_READ_REPLY_DATAGRAM_SIZE);

	initialize();
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f856 	bl	8000772 <_ZN7TMC220910initializeEv>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_ZN7TMC22097disableEv>:
/**
 * @brief  Disables the TMC2209 driver by setting the enable pin and disabling the chopper.
 * @param  None
 * @retval None
 */
void TMC2209::disable() {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(hardware_enable_port, hardware_enable_pin, GPIO_PIN_SET); //Treiber deaktivieren
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6898      	ldr	r0, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	889b      	ldrh	r3, [r3, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	4619      	mov	r1, r3
 80006e2:	f004 fd9f 	bl	8005224 <HAL_GPIO_WritePin>
	chopper_config_.toff = TOFF_DISABLE;
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80006ec:	f36f 0303 	bfc	r3, #0, #4
 80006f0:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	writeStoredChopperConfig();
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f9ab 	bl	8000a50 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
/**
 * @brief  Disables automatic current scaling by clearing the corresponding bit in the PWM configuration.
 * @param  None
 * @retval None
 */
void TMC2209::disableAutomaticCurrentScaling() {
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8000710:	f36f 0382 	bfc	r3, #2, #1
 8000714:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	writeStoredPwmConfig();
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f9a8 	bl	8000a6e <_ZN7TMC220920writeStoredPwmConfigEv>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
/**
 * @brief  Disables automatic gradient adaptation by clearing the corresponding bit in the PWM configuration.
 * @param  None
 * @retval None
 */
void TMC2209::disableAutomaticGradientAdaptation() {
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	f892 3032 	ldrb.w	r3, [r2, #50]	@ 0x32
 8000734:	f36f 03c3 	bfc	r3, #3, #1
 8000738:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
	writeStoredPwmConfig();
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f996 	bl	8000a6e <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_ZN7TMC220915clearDriveErrorEv>:
/**
 * @brief  Clears the drive error flag in the global status register of the TMC2209.
 * @param  None
 * @retval None
 */
void TMC2209::clearDriveError() {
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	GlobalStatusUnion global_status_union;
	global_status_union.bytes = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
	global_status_union.global_status.drv_err = 1;
 8000756:	7b3b      	ldrb	r3, [r7, #12]
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	733b      	strb	r3, [r7, #12]
	write(ADDRESS_GSTAT, global_status_union.bytes);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	461a      	mov	r2, r3
 8000762:	2101      	movs	r1, #1
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 f8e1 	bl	800092c <_ZN7TMC22095writeEhm>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <_ZN7TMC220910initializeEv>:
/* Private methods -----------------------------------------------------------*/

/**
 * @brief  Initializes the TMC2209 driver by setting operation mode, clearing errors, and configuring settings.
 */
void TMC2209::initialize() {
 8000772:	b580      	push	{r7, lr}
 8000774:	b082      	sub	sp, #8
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
	init_flag = 1;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	759a      	strb	r2, [r3, #22]
	setOperationModeToSerial();
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f81c 	bl	80007be <_ZN7TMC220924setOperationModeToSerialEv>
	setRegistersToDefaults();
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f83c 	bl	8000804 <_ZN7TMC220922setRegistersToDefaultsEv>
	clearDriveError();
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ffdc 	bl	800074a <_ZN7TMC220915clearDriveErrorEv>

	minimizeMotorCurrent();
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f8b4 	bl	8000900 <_ZN7TMC220920minimizeMotorCurrentEv>
	disable();
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff98 	bl	80006ce <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ffaf 	bl	8000702 <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ffbe 	bl	8000726 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
	init_flag = 0;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	759a      	strb	r2, [r3, #22]
	precomputedCRCIndex = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	75da      	strb	r2, [r3, #23]
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_ZN7TMC220924setOperationModeToSerialEv>:
/**
 * @brief  Sets the operation mode of the TMC2209 to serial communication mode by configuring global settings.
 * @param  None
 * @retval None
 */
void TMC2209::setOperationModeToSerial() {
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]

	global_config_.bytes = 0;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	global_config_.i_scale_analog = 0;
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7e13      	ldrb	r3, [r2, #24]
 80007d0:	f36f 0300 	bfc	r3, #0, #1
 80007d4:	7613      	strb	r3, [r2, #24]
	global_config_.pdn_disable = 1;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	7e13      	ldrb	r3, [r2, #24]
 80007da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007de:	7613      	strb	r3, [r2, #24]
	global_config_.mstep_reg_select = 1;
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	7e13      	ldrb	r3, [r2, #24]
 80007e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e8:	7613      	strb	r3, [r2, #24]
	global_config_.multistep_filt = 1;
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	7e53      	ldrb	r3, [r2, #25]
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	7653      	strb	r3, [r2, #25]

	writeStoredGlobalConfig();
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f8eb 	bl	80009d0 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <_ZN7TMC220922setRegistersToDefaultsEv>:
/**
 * @brief  Initializes the TMC2209 registers to their default values.
 * @param  None
 * @retval None
 */
void TMC2209::setRegistersToDefaults() {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
	driver_current_.ihold = IHOLD_DEFAULT;
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	7f13      	ldrb	r3, [r2, #28]
 8000816:	2110      	movs	r1, #16
 8000818:	f361 0304 	bfi	r3, r1, #0, #5
 800081c:	7713      	strb	r3, [r2, #28]
	driver_current_.irun = IRUN_DEFAULT;
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	7f53      	ldrb	r3, [r2, #29]
 8000822:	f043 031f 	orr.w	r3, r3, #31
 8000826:	7753      	strb	r3, [r2, #29]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	7f93      	ldrb	r3, [r2, #30]
 800082c:	2101      	movs	r1, #1
 800082e:	f361 0303 	bfi	r3, r1, #0, #4
 8000832:	7793      	strb	r3, [r2, #30]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	461a      	mov	r2, r3
 800083a:	2110      	movs	r1, #16
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f875 	bl	800092c <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <_ZN7TMC220922setRegistersToDefaultsEv+0xf4>)
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
	chopper_config_.tbl = TBL_DEFAULT;
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800084c:	2102      	movs	r1, #2
 800084e:	f361 33d0 	bfi	r3, r1, #15, #2
 8000852:	6293      	str	r3, [r2, #40]	@ 0x28
	chopper_config_.hend = HEND_DEFAULT;
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 8000858:	f36f 13ca 	bfc	r3, #7, #4
 800085c:	8513      	strh	r3, [r2, #40]	@ 0x28
	chopper_config_.hstart = HSTART_DEFAULT;
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8000864:	2105      	movs	r1, #5
 8000866:	f361 1306 	bfi	r3, r1, #4, #3
 800086a:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	chopper_config_.toff = TOFF_DEFAULT;
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8000874:	2103      	movs	r1, #3
 8000876:	f361 0303 	bfi	r3, r1, #0, #4
 800087a:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000882:	461a      	mov	r2, r3
 8000884:	216c      	movs	r1, #108	@ 0x6c
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f850 	bl	800092c <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a1b      	ldr	r2, [pc, #108]	@ (80008fc <_ZN7TMC220922setRegistersToDefaultsEv+0xf8>)
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	461a      	mov	r2, r3
 8000898:	2170      	movs	r1, #112	@ 0x70
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f000 f846 	bl	800092c <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a1b      	ldr	r3, [r3, #32]
 80008aa:	461a      	mov	r2, r3
 80008ac:	2142      	movs	r1, #66	@ 0x42
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f83c 	bl	800092c <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80008b4:	2214      	movs	r2, #20
 80008b6:	2111      	movs	r1, #17
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 f837 	bl	800092c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80008be:	2200      	movs	r2, #0
 80008c0:	2113      	movs	r1, #19
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f000 f832 	bl	800092c <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2122      	movs	r1, #34	@ 0x22
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f000 f82d 	bl	800092c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2114      	movs	r1, #20
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f828 	bl	800092c <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	@ 0x40
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f823 	bl	800092c <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2142      	movs	r1, #66	@ 0x42
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 f81e 	bl	800092c <_ZN7TMC22095writeEhm>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	10000053 	.word	0x10000053
 80008fc:	c10d0024 	.word	0xc10d0024

08000900 <_ZN7TMC220920minimizeMotorCurrentEv>:
/**
 * @brief  Minimizes the motor current by setting both the run and hold current to the minimum value.
 * @param  None
 * @retval None
 */
void TMC2209::minimizeMotorCurrent() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	driver_current_.irun = CURRENT_SETTING_MIN;
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7f53      	ldrb	r3, [r2, #29]
 800090c:	f36f 0304 	bfc	r3, #0, #5
 8000910:	7753      	strb	r3, [r2, #29]
	driver_current_.ihold = CURRENT_SETTING_MIN;
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7f13      	ldrb	r3, [r2, #28]
 8000916:	f36f 0304 	bfc	r3, #0, #5
 800091a:	7713      	strb	r3, [r2, #28]
	writeStoredDriverCurrent();
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 f866 	bl	80009ee <_ZN7TMC220924writeStoredDriverCurrentEv>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <_ZN7TMC22095writeEhm>:
 * @brief  Writes data to a specific register of the TMC2209.
 * @param  register_address: The address of the register to write to.
 * @param  data: The data to write to the register.
 * @retval None
 */
void TMC2209::write(uint8_t register_address, uint32_t data) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	460b      	mov	r3, r1
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8000946:	7c3b      	ldrb	r3, [r7, #16]
 8000948:	2205      	movs	r2, #5
 800094a:	f362 0303 	bfi	r3, r2, #0, #4
 800094e:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = DEFAULT_SERIAL_ADDRESS;
 8000950:	2300      	movs	r3, #0
 8000952:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8000954:	7afb      	ldrb	r3, [r7, #11]
 8000956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800095a:	b2da      	uxtb	r2, r3
 800095c:	7cbb      	ldrb	r3, [r7, #18]
 800095e:	f362 0306 	bfi	r3, r2, #0, #7
 8000962:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8000964:	7cbb      	ldrb	r3, [r7, #18]
 8000966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800096a:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data, DATA_SIZE);
 800096c:	2104      	movs	r1, #4
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fe44 	bl	80005fc <_ZL11reverseDatamh>
 8000974:	4603      	mov	r3, r0
 8000976:	f8c7 3013 	str.w	r3, [r7, #19]
	if (init_flag) {
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	7d9b      	ldrb	r3, [r3, #22]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <_ZN7TMC22095writeEhm+0x70>
		write_datagram.crc = precomputedCRC[precomputedCRCIndex];
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	7ddb      	ldrb	r3, [r3, #23]
 8000986:	461a      	mov	r2, r3
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <_ZN7TMC22095writeEhm+0x9c>)
 800098a:	5c9b      	ldrb	r3, [r3, r2]
 800098c:	75fb      	strb	r3, [r7, #23]
		precomputedCRCIndex++;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	7ddb      	ldrb	r3, [r3, #23]
 8000992:	3301      	adds	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	75da      	strb	r2, [r3, #23]
 800099a:	e009      	b.n	80009b0 <_ZN7TMC22095writeEhm+0x84>
	} else
		write_datagram.crc = HAL_CRC_Calculate(&hcrc,
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2207      	movs	r2, #7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	@ (80009cc <_ZN7TMC22095writeEhm+0xa0>)
 80009a6:	f001 fabb 	bl	8001f20 <HAL_CRC_Calculate>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	75fb      	strb	r3, [r7, #23]
				(uint32_t*) &write_datagram,
				WRITE_READ_REPLY_DATAGRAM_SIZE - 1);

	sendDatagram(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2208      	movs	r2, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 f867 	bl	8000a8c <_ZN7TMC220912sendDatagramINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	0800b458 	.word	0x0800b458
 80009cc:	24000030 	.word	0x24000030

080009d0 <_ZN7TMC220923writeStoredGlobalConfigEv>:
/**
 * @brief  Writes the stored global configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredGlobalConfig() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	461a      	mov	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffa3 	bl	800092c <_ZN7TMC22095writeEhm>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_ZN7TMC220924writeStoredDriverCurrentEv>:
/**
 * @brief  Writes the stored driver current configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredDriverCurrent() {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2110      	movs	r1, #16
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ff94 	bl	800092c <_ZN7TMC22095writeEhm>

	if (driver_current_.irun >= SEIMIN_UPPER_CURRENT_LIMIT) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7f5b      	ldrb	r3, [r3, #29]
 8000a08:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b13      	cmp	r3, #19
 8000a10:	d907      	bls.n	8000a22 <_ZN7TMC220924writeStoredDriverCurrentEv+0x34>
		cool_config_.seimin = SEIMIN_UPPER_SETTING;
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8000a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a1c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
 8000a20:	e006      	b.n	8000a30 <_ZN7TMC220924writeStoredDriverCurrentEv+0x42>
	} else {
		cool_config_.seimin = SEIMIN_LOWER_SETTING;
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8000a28:	f36f 13c7 	bfc	r3, #7, #1
 8000a2c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
	}
	if (cool_step_enabled_) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <_ZN7TMC220924writeStoredDriverCurrentEv+0x5a>
		write(ADDRESS_COOLCONF, cool_config_.bytes);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	2142      	movs	r1, #66	@ 0x42
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ff72 	bl	800092c <_ZN7TMC22095writeEhm>
	}
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN7TMC220924writeStoredChopperConfigEv>:
/**
 * @brief  Writes the stored chopper configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredChopperConfig() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	216c      	movs	r1, #108	@ 0x6c
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff63 	bl	800092c <_ZN7TMC22095writeEhm>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_ZN7TMC220920writeStoredPwmConfigEv>:
/**
 * @brief  Writes the stored PWM configuration to the driver.
 * @param  None
 * @retval None
 */
void TMC2209::writeStoredPwmConfig() {
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2170      	movs	r1, #112	@ 0x70
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff54 	bl	800092c <_ZN7TMC22095writeEhm>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_ZN7TMC220912sendDatagramINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagram(Datagram &datagram, uint8_t datagram_size) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(UART_address);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f008 ff84 	bl	80099ac <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit_DMA(UART_address, (uint8_t*) &datagram, datagram_size);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	b292      	uxth	r2, r2
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 fb1a 	bl	80090e8 <HAL_UART_Transmit_DMA>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000ac0:	f000 fc1a 	bl	80012f8 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ac4:	f000 ff8a 	bl	80019dc <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ac8:	f000 f83c 	bl	8000b44 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000acc:	f000 fa82 	bl	8000fd4 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000ad0:	f000 fa48 	bl	8000f64 <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 8000ad4:	f000 f986 	bl	8000de4 <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 8000ad8:	f000 f9e4 	bl	8000ea4 <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 8000adc:	f000 f8b0 	bl	8000c40 <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 8000ae0:	f000 f8f2 	bl	8000cc8 <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	tmcX.UART_address = &huart2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <main+0x68>)
 8000ae6:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <main+0x6c>)
 8000ae8:	601a      	str	r2, [r3, #0]
	tmcX.hardware_enable_port = X_EN_GPIO_Port;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <main+0x68>)
 8000aec:	4a0f      	ldr	r2, [pc, #60]	@ (8000b2c <main+0x70>)
 8000aee:	609a      	str	r2, [r3, #8]
	tmcX.hardware_enable_pin = X_EN_Pin;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <main+0x68>)
 8000af2:	2240      	movs	r2, #64	@ 0x40
 8000af4:	809a      	strh	r2, [r3, #4]
	tmcX.setup();
 8000af6:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <main+0x68>)
 8000af8:	f7ff fdd1 	bl	800069e <_ZN7TMC22095setupEv>

	tmcZ.UART_address = &huart8;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <main+0x74>)
 8000afe:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <main+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
	tmcZ.hardware_enable_port = Z_EN_GPIO_Port;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <main+0x74>)
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <main+0x7c>)
 8000b06:	609a      	str	r2, [r3, #8]
	tmcZ.hardware_enable_pin = Z_EN_Pin;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <main+0x74>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	809a      	strh	r2, [r3, #4]
	tmcZ.setup();
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <main+0x74>)
 8000b10:	f7ff fdc5 	bl	800069e <_ZN7TMC22095setupEv>

	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 8000b14:	4809      	ldr	r0, [pc, #36]	@ (8000b3c <main+0x80>)
 8000b16:	f007 f98d 	bl	8007e34 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <main+0x84>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	e7fa      	b.n	8000b1a <main+0x5e>
 8000b24:	240003a8 	.word	0x240003a8
 8000b28:	24000134 	.word	0x24000134
 8000b2c:	58020c00 	.word	0x58020c00
 8000b30:	240003dc 	.word	0x240003dc
 8000b34:	240000a0 	.word	0x240000a0
 8000b38:	58021000 	.word	0x58021000
 8000b3c:	24000054 	.word	0x24000054
 8000b40:	24000410 	.word	0x24000410

08000b44 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b09c      	sub	sp, #112	@ 0x70
 8000b48:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4e:	224c      	movs	r2, #76	@ 0x4c
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00a fc48 	bl	800b3e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00a fc42 	bl	800b3e8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply (PWR_LDO_SUPPLY);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f004 fbab 	bl	80052c0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <_Z18SystemClock_Configv+0xf8>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <_Z18SystemClock_Configv+0xf8>)
 8000b74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <_Z18SystemClock_Configv+0xf8>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000b86:	bf00      	nop
 8000b88:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <_Z18SystemClock_Configv+0xf8>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <_Z18SystemClock_Configv+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8000ba8:	2340      	movs	r3, #64	@ 0x40
 8000baa:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 8000bb8:	2322      	movs	r3, #34	@ 0x22
 8000bba:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000bd0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fbaa 	bl	8005334 <HAL_RCC_OscConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <_Z18SystemClock_Configv+0xb0>
		Error_Handler();
 8000bf0:	f000 fbae 	bl	8001350 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bf4:	233f      	movs	r3, #63	@ 0x3f
 8000bf6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c00:	2308      	movs	r3, #8
 8000c02:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c12:	2340      	movs	r3, #64	@ 0x40
 8000c14:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2103      	movs	r1, #3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 ff64 	bl	8005ae8 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2301      	movne	r3, #1
 8000c28:	2300      	moveq	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 8000c30:	f000 fb8e 	bl	8001350 <Error_Handler>
	}
}
 8000c34:	bf00      	nop
 8000c36:	3770      	adds	r7, #112	@ 0x70
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024800 	.word	0x58024800

08000c40 <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 8000c46:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <_ZL11MX_CRC_Initv+0x7c>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <_ZL11MX_CRC_Initv+0x7c>)
 8000c4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <_ZL11MX_CRC_Initv+0x7c>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <_ZL11MX_CRC_Initv+0x84>)
 8000c68:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 8000c76:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c7e:	2210      	movs	r2, #16
 8000c80:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000c9a:	4809      	ldr	r0, [pc, #36]	@ (8000cc0 <_ZL11MX_CRC_Initv+0x80>)
 8000c9c:	f001 f8dc 	bl	8001e58 <HAL_CRC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <_ZL11MX_CRC_Initv+0x74>
		Error_Handler();
 8000cb0:	f000 fb4e 	bl	8001350 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	24000030 	.word	0x24000030
 8000cc4:	58024c00 	.word	0x58024c00

08000cc8 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	@ 0x38
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000cfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d00:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 8000d02:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d04:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000d08:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8000d10:	4b33      	ldr	r3, [pc, #204]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d24:	482e      	ldr	r0, [pc, #184]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d26:	f007 f82d 	bl	8007d84 <HAL_TIM_Base_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <_ZL12MX_TIM2_Initv+0x76>
		Error_Handler();
 8000d3a:	f000 fb09 	bl	8001350 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4825      	ldr	r0, [pc, #148]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d4c:	f007 fb74 	bl	8008438 <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <_ZL12MX_TIM2_Initv+0x9c>
		Error_Handler();
 8000d60:	f000 faf6 	bl	8001350 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000d64:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d66:	f007 f8eb 	bl	8007f40 <HAL_TIM_PWM_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf14      	ite	ne
 8000d70:	2301      	movne	r3, #1
 8000d72:	2300      	moveq	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <_ZL12MX_TIM2_Initv+0xb6>
		Error_Handler();
 8000d7a:	f000 fae9 	bl	8001350 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000d8e:	f008 f899 	bl	8008ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	bf14      	ite	ne
 8000d98:	2301      	movne	r3, #1
 8000d9a:	2300      	moveq	r3, #0
 8000d9c:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <_ZL12MX_TIM2_Initv+0xde>
		Error_Handler();
 8000da2:	f000 fad5 	bl	8001350 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da6:	2360      	movs	r3, #96	@ 0x60
 8000da8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 8000daa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000dae:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <_ZL12MX_TIM2_Initv+0x118>)
 8000dc0:	f007 fa26 	bl	8008210 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf14      	ite	ne
 8000dca:	2301      	movne	r3, #1
 8000dcc:	2300      	moveq	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <_ZL12MX_TIM2_Initv+0x110>
		Error_Handler();
 8000dd4:	f000 fabc 	bl	8001350 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	@ 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	24000054 	.word	0x24000054

08000de4 <_ZL13MX_UART8_Initv>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 8000de8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000dea:	4a2d      	ldr	r2, [pc, #180]	@ (8000ea0 <_ZL13MX_UART8_Initv+0xbc>)
 8000dec:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000dee:	4b2b      	ldr	r3, [pc, #172]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b24      	ldr	r3, [pc, #144]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b21      	ldr	r3, [pc, #132]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 8000e2c:	481b      	ldr	r0, [pc, #108]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e2e:	f008 f903 	bl	8009038 <HAL_HalfDuplex_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <_ZL13MX_UART8_Initv+0x62>
		Error_Handler();
 8000e42:	f000 fa85 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4814      	ldr	r0, [pc, #80]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e4a:	f00a f9af 	bl	800b1ac <HAL_UARTEx_SetTxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf14      	ite	ne
 8000e54:	2301      	movne	r3, #1
 8000e56:	2300      	moveq	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <_ZL13MX_UART8_Initv+0x7e>
		Error_Handler();
 8000e5e:	f000 fa77 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000e62:	2100      	movs	r1, #0
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e66:	f00a f9df 	bl	800b228 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf14      	ite	ne
 8000e70:	2301      	movne	r3, #1
 8000e72:	2300      	moveq	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <_ZL13MX_UART8_Initv+0x9a>
		Error_Handler();
 8000e7a:	f000 fa69 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8000e7e:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <_ZL13MX_UART8_Initv+0xb8>)
 8000e80:	f00a f95b 	bl	800b13a <HAL_UARTEx_DisableFifoMode>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <_ZL13MX_UART8_Initv+0xb4>
		Error_Handler();
 8000e94:	f000 fa5c 	bl	8001350 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	240000a0 	.word	0x240000a0
 8000ea0:	40007c00 	.word	0x40007c00

08000ea4 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8000f60 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000eac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000eae:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eb4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8000eec:	481b      	ldr	r0, [pc, #108]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000eee:	f008 f8a3 	bl	8009038 <HAL_HalfDuplex_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	bf14      	ite	ne
 8000ef8:	2301      	movne	r3, #1
 8000efa:	2300      	moveq	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 8000f02:	f000 fa25 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f0a:	f00a f94f 	bl	800b1ac <HAL_UARTEx_SetTxFifoThreshold>
 8000f0e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8000f1e:	f000 fa17 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000f22:	2100      	movs	r1, #0
 8000f24:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f26:	f00a f97f 	bl	800b228 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8000f3a:	f000 fa09 	bl	8001350 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000f3e:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000f40:	f00a f8fb 	bl	800b13a <HAL_UARTEx_DisableFifoMode>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf14      	ite	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	2300      	moveq	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 8000f54:	f000 f9fc 	bl	8001350 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	24000134 	.word	0x24000134
 8000f60:	40004400 	.word	0x40004400

08000f64 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <_ZL11MX_DMA_Initv+0x6c>)
 8000f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f70:	4a17      	ldr	r2, [pc, #92]	@ (8000fd0 <_ZL11MX_DMA_Initv+0x6c>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_ZL11MX_DMA_Initv+0x6c>)
 8000f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	200b      	movs	r0, #11
 8000f8e:	f000 feb6 	bl	8001cfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream0_IRQn);
 8000f92:	200b      	movs	r0, #11
 8000f94:	f000 fecd 	bl	8001d32 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	200c      	movs	r0, #12
 8000f9e:	f000 feae 	bl	8001cfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream1_IRQn);
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f000 fec5 	bl	8001d32 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	200d      	movs	r0, #13
 8000fae:	f000 fea6 	bl	8001cfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream2_IRQn);
 8000fb2:	200d      	movs	r0, #13
 8000fb4:	f000 febd 	bl	8001d32 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	200e      	movs	r0, #14
 8000fbe:	f000 fe9e 	bl	8001cfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Stream3_IRQn);
 8000fc2:	200e      	movs	r0, #14
 8000fc4:	f000 feb5 	bl	8001d32 <HAL_NVIC_EnableIRQ>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fea:	4b52      	ldr	r3, [pc, #328]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	4a50      	ldr	r2, [pc, #320]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8000ff2:	f043 0310 	orr.w	r3, r3, #16
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001008:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	4a49      	ldr	r2, [pc, #292]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001018:	4b46      	ldr	r3, [pc, #280]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001026:	4b43      	ldr	r3, [pc, #268]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102c:	4a41      	ldr	r2, [pc, #260]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001036:	4b3f      	ldr	r3, [pc, #252]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104a:	4a3a      	ldr	r2, [pc, #232]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001054:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <_ZL12MX_GPIO_Initv+0x160>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	210c      	movs	r1, #12
 8001066:	4834      	ldr	r0, [pc, #208]	@ (8001138 <_ZL12MX_GPIO_Initv+0x164>)
 8001068:	f004 f8dc 	bl	8005224 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	2118      	movs	r1, #24
 8001070:	4832      	ldr	r0, [pc, #200]	@ (800113c <_ZL12MX_GPIO_Initv+0x168>)
 8001072:	f004 f8d7 	bl	8005224 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2140      	movs	r1, #64	@ 0x40
 800107a:	4830      	ldr	r0, [pc, #192]	@ (800113c <_ZL12MX_GPIO_Initv+0x168>)
 800107c:	f004 f8d2 	bl	8005224 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2108      	movs	r1, #8
 8001084:	482e      	ldr	r0, [pc, #184]	@ (8001140 <_ZL12MX_GPIO_Initv+0x16c>)
 8001086:	f004 f8cd 	bl	8005224 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2101      	movs	r1, #1
 800108e:	482a      	ldr	r0, [pc, #168]	@ (8001138 <_ZL12MX_GPIO_Initv+0x164>)
 8001090:	f004 f8c8 	bl	8005224 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 8001094:	230d      	movs	r3, #13
 8001096:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4823      	ldr	r0, [pc, #140]	@ (8001138 <_ZL12MX_GPIO_Initv+0x164>)
 80010ac:	f003 ff12 	bl	8004ed4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 80010b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	481f      	ldr	r0, [pc, #124]	@ (8001144 <_ZL12MX_GPIO_Initv+0x170>)
 80010c8:	f003 ff04 	bl	8004ed4 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 80010cc:	2303      	movs	r3, #3
 80010ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4819      	ldr	r0, [pc, #100]	@ (8001144 <_ZL12MX_GPIO_Initv+0x170>)
 80010e0:	f003 fef8 	bl	8004ed4 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 80010e4:	2358      	movs	r3, #88	@ 0x58
 80010e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4810      	ldr	r0, [pc, #64]	@ (800113c <_ZL12MX_GPIO_Initv+0x168>)
 80010fc:	f003 feea 	bl	8004ed4 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8001100:	2308      	movs	r3, #8
 8001102:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <_ZL12MX_GPIO_Initv+0x16c>)
 8001118:	f003 fedc 	bl	8004ed4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2028      	movs	r0, #40	@ 0x28
 8001122:	f000 fdec 	bl	8001cfe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI15_10_IRQn);
 8001126:	2028      	movs	r0, #40	@ 0x28
 8001128:	f000 fe03 	bl	8001d32 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	@ 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58024400 	.word	0x58024400
 8001138:	58021000 	.word	0x58021000
 800113c:	58020c00 	.word	0x58020c00
 8001140:	58020400 	.word	0x58020400
 8001144:	58020800 	.word	0x58020800

08001148 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001158:	d102      	bne.n	8001160 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <HAL_GPIO_EXTI_Callback+0x24>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	24000410 	.word	0x24000410

08001170 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001180:	d150      	bne.n	8001224 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf14      	ite	ne
 800118c:	2301      	movne	r3, #1
 800118e:	2300      	moveq	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d046      	beq.n	8001224 <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 8001196:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b23      	ldr	r3, [pc, #140]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011a2:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	429a      	cmp	r2, r3
 80011b2:	bf2c      	ite	cs
 80011b4:	2301      	movcs	r3, #1
 80011b6:	2300      	movcc	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011cc:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	429a      	cmp	r2, r3
 80011dc:	bf34      	ite	cc
 80011de:	2301      	movcc	r3, #1
 80011e0:	2300      	movcs	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	4814      	ldr	r0, [pc, #80]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011ee:	f004 f819 	bl	8005224 <HAL_GPIO_WritePin>
 80011f2:	e004      	b.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4811      	ldr	r0, [pc, #68]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011fa:	f004 f813 	bl	8005224 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	bf2c      	ite	cs
 800120a:	2301      	movcs	r3, #1
 800120c:	2300      	movcc	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2110      	movs	r1, #16
 800121e:	4808      	ldr	r0, [pc, #32]	@ (8001240 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001220:	f004 f800 	bl	8005224 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	24000420 	.word	0x24000420
 8001230:	24000418 	.word	0x24000418
 8001234:	24000000 	.word	0x24000000
 8001238:	24000414 	.word	0x24000414
 800123c:	24000002 	.word	0x24000002
 8001240:	58020c00 	.word	0x58020c00
 8001244:	2400041c 	.word	0x2400041c

08001248 <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_UART_TxCpltCallback+0x38>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d104      	bne.n	8001264 <HAL_UART_TxCpltCallback+0x1c>
		HAL_HalfDuplex_EnableReceiver(tmcX.UART_address);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_UART_TxCpltCallback+0x3c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f008 fbf8 	bl	8009a54 <HAL_HalfDuplex_EnableReceiver>
	}
	if (huart->Instance == UART8) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_UART_TxCpltCallback+0x40>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d104      	bne.n	8001278 <HAL_UART_TxCpltCallback+0x30>
		HAL_HalfDuplex_EnableReceiver(tmcZ.UART_address);
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <HAL_UART_TxCpltCallback+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f008 fbee 	bl	8009a54 <HAL_HalfDuplex_EnableReceiver>
	}
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40004400 	.word	0x40004400
 8001284:	240003a8 	.word	0x240003a8
 8001288:	40007c00 	.word	0x40007c00
 800128c:	240003dc 	.word	0x240003dc

08001290 <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <HAL_UARTEx_RxEventCallback+0x50>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d109      	bne.n	80012ba <HAL_UARTEx_RxEventCallback+0x2a>
		HAL_UARTEx_ReceiveToIdle_DMA(tmcX.UART_address, tmcX.rxBufferRaw,
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_UARTEx_RxEventCallback+0x54>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	490e      	ldr	r1, [pc, #56]	@ (80012e8 <HAL_UARTEx_RxEventCallback+0x58>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f009 fff8 	bl	800b2a4 <HAL_UARTEx_ReceiveToIdle_DMA>
				TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcX.data_received_flag = true;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_UARTEx_RxEventCallback+0x54>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	735a      	strb	r2, [r3, #13]
	}
	if (huart->Instance == UART8) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_UARTEx_RxEventCallback+0x5c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d109      	bne.n	80012d8 <HAL_UARTEx_RxEventCallback+0x48>
		HAL_UARTEx_ReceiveToIdle_DMA(tmcZ.UART_address, tmcZ.rxBufferRaw,
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x60>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	490a      	ldr	r1, [pc, #40]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x64>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f009 ffe9 	bl	800b2a4 <HAL_UARTEx_ReceiveToIdle_DMA>
				TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcZ.data_received_flag = true;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <HAL_UARTEx_RxEventCallback+0x60>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	735a      	strb	r2, [r3, #13]

	}
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40004400 	.word	0x40004400
 80012e4:	240003a8 	.word	0x240003a8
 80012e8:	240003b6 	.word	0x240003b6
 80012ec:	40007c00 	.word	0x40007c00
 80012f0:	240003dc 	.word	0x240003dc
 80012f4:	240003ea 	.word	0x240003ea

080012f8 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 800130a:	f000 fd2d 	bl	8001d68 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800130e:	2301      	movs	r3, #1
 8001310:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001312:	2300      	movs	r3, #0
 8001314:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800131a:	231f      	movs	r3, #31
 800131c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800131e:	2387      	movs	r3, #135	@ 0x87
 8001320:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001322:	2300      	movs	r3, #0
 8001324:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001326:	2300      	movs	r3, #0
 8001328:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800132a:	2301      	movs	r3, #1
 800132c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800132e:	2301      	movs	r3, #1
 8001330:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800133a:	463b      	mov	r3, r7
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fd4b 	bl	8001dd8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable (MPU_PRIVILEGED_DEFAULT);
 8001342:	2004      	movs	r0, #4
 8001344:	f000 fd28 	bl	8001d98 <HAL_MPU_Enable>

}
 8001348:	bf00      	nop
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001358:	2108      	movs	r1, #8
 800135a:	4804      	ldr	r0, [pc, #16]	@ (800136c <Error_Handler+0x1c>)
 800135c:	f003 ff7b 	bl	8005256 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	@ 0x64
 8001362:	f000 fbcd 	bl	8001b00 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001366:	bf00      	nop
 8001368:	e7f6      	b.n	8001358 <Error_Handler+0x8>
 800136a:	bf00      	nop
 800136c:	58020400 	.word	0x58020400

08001370 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d10a      	bne.n	8001396 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001386:	4293      	cmp	r3, r2
 8001388:	d105      	bne.n	8001396 <_Z41__static_initialization_and_destruction_0ii+0x26>
TMC2209 tmcX;
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800138c:	f7ff f968 	bl	8000660 <_ZN7TMC2209C1Ev>
TMC2209 tmcZ;
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001392:	f7ff f965 	bl	8000660 <_ZN7TMC2209C1Ev>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240003a8 	.word	0x240003a8
 80013a4:	240003dc 	.word	0x240003dc

080013a8 <_GLOBAL__sub_I_hcrc>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff ffdd 	bl	8001370 <_Z41__static_initialization_and_destruction_0ii>
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_MspInit+0x30>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013c4:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_MspInit+0x30>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_MspInit+0x30>)
 80013d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	58024400 	.word	0x58024400

080013ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <HAL_CRC_MspInit+0x3c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10e      	bne.n	800141c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <HAL_CRC_MspInit+0x40>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <HAL_CRC_MspInit+0x40>)
 8001406:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_CRC_MspInit+0x40>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	58024c00 	.word	0x58024c00
 800142c:	58024400 	.word	0x58024400

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001440:	d116      	bne.n	8001470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001448:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_TIM_Base_MspInit+0x48>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	201c      	movs	r0, #28
 8001466:	f000 fc4a 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146a:	201c      	movs	r0, #28
 800146c:	f000 fc61 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	58024400 	.word	0x58024400

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ba      	sub	sp, #232	@ 0xe8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	22b8      	movs	r2, #184	@ 0xb8
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f009 ffa3 	bl	800b3e8 <memset>
  if(huart->Instance==UART8)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4ab0      	ldr	r2, [pc, #704]	@ (8001768 <HAL_UART_MspInit+0x2ec>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	f040 80aa 	bne.w	8001602 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80014ae:	f04f 0202 	mov.w	r2, #2
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fe9b 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80014d0:	f7ff ff3e 	bl	8001350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80014d4:	4ba5      	ldr	r3, [pc, #660]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 80014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014da:	4aa4      	ldr	r2, [pc, #656]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 80014dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014e4:	4ba1      	ldr	r3, [pc, #644]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 80014e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f2:	4b9e      	ldr	r3, [pc, #632]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	4a9c      	ldr	r2, [pc, #624]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001502:	4b9a      	ldr	r3, [pc, #616]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151c:	2301      	movs	r3, #1
 800151e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001528:	2308      	movs	r3, #8
 800152a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001532:	4619      	mov	r1, r3
 8001534:	488e      	ldr	r0, [pc, #568]	@ (8001770 <HAL_UART_MspInit+0x2f4>)
 8001536:	f003 fccd 	bl	8004ed4 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 800153a:	4b8e      	ldr	r3, [pc, #568]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800153c:	4a8e      	ldr	r2, [pc, #568]	@ (8001778 <HAL_UART_MspInit+0x2fc>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001540:	4b8c      	ldr	r3, [pc, #560]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001542:	2252      	movs	r2, #82	@ 0x52
 8001544:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	4b8b      	ldr	r3, [pc, #556]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001548:	2240      	movs	r2, #64	@ 0x40
 800154a:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b89      	ldr	r3, [pc, #548]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b88      	ldr	r3, [pc, #544]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001558:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155a:	4b86      	ldr	r3, [pc, #536]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001560:	4b84      	ldr	r3, [pc, #528]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001566:	4b83      	ldr	r3, [pc, #524]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156c:	4b81      	ldr	r3, [pc, #516]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001572:	4b80      	ldr	r3, [pc, #512]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001578:	487e      	ldr	r0, [pc, #504]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800157a:	f000 fe73 	bl	8002264 <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001584:	f7ff fee4 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a7a      	ldr	r2, [pc, #488]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 800158c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800158e:	4a79      	ldr	r2, [pc, #484]	@ (8001774 <HAL_UART_MspInit+0x2f8>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 8001594:	4b79      	ldr	r3, [pc, #484]	@ (800177c <HAL_UART_MspInit+0x300>)
 8001596:	4a7a      	ldr	r2, [pc, #488]	@ (8001780 <HAL_UART_MspInit+0x304>)
 8001598:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800159a:	4b78      	ldr	r3, [pc, #480]	@ (800177c <HAL_UART_MspInit+0x300>)
 800159c:	2251      	movs	r2, #81	@ 0x51
 800159e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a0:	4b76      	ldr	r3, [pc, #472]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b75      	ldr	r3, [pc, #468]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b73      	ldr	r3, [pc, #460]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b4:	4b71      	ldr	r3, [pc, #452]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ba:	4b70      	ldr	r3, [pc, #448]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80015c0:	4b6e      	ldr	r3, [pc, #440]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b6d      	ldr	r3, [pc, #436]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b6b      	ldr	r3, [pc, #428]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80015d2:	486a      	ldr	r0, [pc, #424]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015d4:	f000 fe46 	bl	8002264 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80015de:	f7ff feb7 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a65      	ldr	r2, [pc, #404]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015ea:	4a64      	ldr	r2, [pc, #400]	@ (800177c <HAL_UART_MspInit+0x300>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2053      	movs	r0, #83	@ 0x53
 80015f6:	f000 fb82 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80015fa:	2053      	movs	r0, #83	@ 0x53
 80015fc:	f000 fb99 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001600:	e0ae      	b.n	8001760 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a5f      	ldr	r2, [pc, #380]	@ (8001784 <HAL_UART_MspInit+0x308>)
 8001608:	4293      	cmp	r3, r2
 800160a:	f040 80a9 	bne.w	8001760 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800160e:	f04f 0202 	mov.w	r2, #2
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fdeb 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001630:	f7ff fe8e 	bl	8001350 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001634:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 8001636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800163a:	4a4c      	ldr	r2, [pc, #304]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 800163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001640:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001644:	4b49      	ldr	r3, [pc, #292]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800164a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	4b46      	ldr	r3, [pc, #280]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001658:	4a44      	ldr	r2, [pc, #272]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001662:	4b42      	ldr	r3, [pc, #264]	@ (800176c <HAL_UART_MspInit+0x2f0>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 8001670:	2320      	movs	r3, #32
 8001672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001688:	2307      	movs	r3, #7
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001692:	4619      	mov	r1, r3
 8001694:	483c      	ldr	r0, [pc, #240]	@ (8001788 <HAL_UART_MspInit+0x30c>)
 8001696:	f003 fc1d 	bl	8004ed4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 800169a:	4b3c      	ldr	r3, [pc, #240]	@ (800178c <HAL_UART_MspInit+0x310>)
 800169c:	4a3c      	ldr	r2, [pc, #240]	@ (8001790 <HAL_UART_MspInit+0x314>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80016a0:	4b3a      	ldr	r3, [pc, #232]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016a2:	222c      	movs	r2, #44	@ 0x2c
 80016a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a6:	4b39      	ldr	r3, [pc, #228]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016a8:	2240      	movs	r2, #64	@ 0x40
 80016aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ac:	4b37      	ldr	r3, [pc, #220]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c0:	4b32      	ldr	r3, [pc, #200]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016d8:	482c      	ldr	r0, [pc, #176]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016da:	f000 fdc3 	bl	8002264 <HAL_DMA_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80016e4:	f7ff fe34 	bl	8001350 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016ec:	67da      	str	r2, [r3, #124]	@ 0x7c
 80016ee:	4a27      	ldr	r2, [pc, #156]	@ (800178c <HAL_UART_MspInit+0x310>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80016f4:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_UART_MspInit+0x318>)
 80016f6:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_UART_MspInit+0x31c>)
 80016f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_UART_MspInit+0x318>)
 80016fc:	222b      	movs	r2, #43	@ 0x2b
 80016fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001700:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <HAL_UART_MspInit+0x318>)
 800170e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001712:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <HAL_UART_MspInit+0x318>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001720:	4b1c      	ldr	r3, [pc, #112]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_UART_MspInit+0x318>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001732:	4818      	ldr	r0, [pc, #96]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001734:	f000 fd96 	bl	8002264 <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 800173e:	f7ff fe07 	bl	8001350 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a13      	ldr	r2, [pc, #76]	@ (8001794 <HAL_UART_MspInit+0x318>)
 8001746:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800174a:	4a12      	ldr	r2, [pc, #72]	@ (8001794 <HAL_UART_MspInit+0x318>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2100      	movs	r1, #0
 8001754:	2026      	movs	r0, #38	@ 0x26
 8001756:	f000 fad2 	bl	8001cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175a:	2026      	movs	r0, #38	@ 0x26
 800175c:	f000 fae9 	bl	8001d32 <HAL_NVIC_EnableIRQ>
}
 8001760:	bf00      	nop
 8001762:	37e8      	adds	r7, #232	@ 0xe8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40007c00 	.word	0x40007c00
 800176c:	58024400 	.word	0x58024400
 8001770:	58021000 	.word	0x58021000
 8001774:	240001c8 	.word	0x240001c8
 8001778:	40020040 	.word	0x40020040
 800177c:	24000240 	.word	0x24000240
 8001780:	40020058 	.word	0x40020058
 8001784:	40004400 	.word	0x40004400
 8001788:	58020c00 	.word	0x58020c00
 800178c:	240002b8 	.word	0x240002b8
 8001790:	40020010 	.word	0x40020010
 8001794:	24000330 	.word	0x24000330
 8001798:	40020028 	.word	0x40020028

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <NMI_Handler+0x4>

080017a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <MemManage_Handler+0x4>

080017b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f2:	f000 f965 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <DMA1_Stream0_IRQHandler+0x10>)
 8001802:	f002 f855 	bl	80038b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	240002b8 	.word	0x240002b8

08001810 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <DMA1_Stream1_IRQHandler+0x10>)
 8001816:	f002 f84b 	bl	80038b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000330 	.word	0x24000330

08001824 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <DMA1_Stream2_IRQHandler+0x10>)
 800182a:	f002 f841 	bl	80038b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	240001c8 	.word	0x240001c8

08001838 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA1_Stream3_IRQHandler+0x10>)
 800183e:	f002 f837 	bl	80038b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	24000240 	.word	0x24000240

0800184c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <TIM2_IRQHandler+0x10>)
 8001852:	f006 fbd6 	bl	8008002 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000054 	.word	0x24000054

08001860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <USART2_IRQHandler+0x10>)
 8001866:	f007 fcbf 	bl	80091e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	24000134 	.word	0x24000134

08001874 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001878:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800187c:	f003 fd05 	bl	800528a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001888:	4802      	ldr	r0, [pc, #8]	@ (8001894 <UART8_IRQHandler+0x10>)
 800188a:	f007 fcad 	bl	80091e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	240000a0 	.word	0x240000a0

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <SystemInit+0xd0>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a31      	ldr	r2, [pc, #196]	@ (8001968 <SystemInit+0xd0>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <SystemInit+0xd4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d807      	bhi.n	80018c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b8:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <SystemInit+0xd4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	4a2a      	ldr	r2, [pc, #168]	@ (800196c <SystemInit+0xd4>)
 80018c2:	f043 0307 	orr.w	r3, r3, #7
 80018c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c8:	4b29      	ldr	r3, [pc, #164]	@ (8001970 <SystemInit+0xd8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <SystemInit+0xd8>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d4:	4b26      	ldr	r3, [pc, #152]	@ (8001970 <SystemInit+0xd8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <SystemInit+0xd8>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4924      	ldr	r1, [pc, #144]	@ (8001970 <SystemInit+0xd8>)
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <SystemInit+0xdc>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e6:	4b21      	ldr	r3, [pc, #132]	@ (800196c <SystemInit+0xd4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f2:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <SystemInit+0xd4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <SystemInit+0xd4>)
 80018fc:	f043 0307 	orr.w	r3, r3, #7
 8001900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <SystemInit+0xd8>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <SystemInit+0xd8>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <SystemInit+0xd8>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <SystemInit+0xd8>)
 8001916:	4a18      	ldr	r2, [pc, #96]	@ (8001978 <SystemInit+0xe0>)
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <SystemInit+0xd8>)
 800191c:	4a17      	ldr	r2, [pc, #92]	@ (800197c <SystemInit+0xe4>)
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <SystemInit+0xd8>)
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <SystemInit+0xe8>)
 8001924:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <SystemInit+0xd8>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <SystemInit+0xd8>)
 800192e:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <SystemInit+0xe8>)
 8001930:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <SystemInit+0xd8>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <SystemInit+0xd8>)
 800193a:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <SystemInit+0xe8>)
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193e:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <SystemInit+0xd8>)
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <SystemInit+0xd8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <SystemInit+0xd8>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <SystemInit+0xd8>)
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <SystemInit+0xec>)
 8001958:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800195c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	52002000 	.word	0x52002000
 8001970:	58024400 	.word	0x58024400
 8001974:	eaf6ed7f 	.word	0xeaf6ed7f
 8001978:	02020200 	.word	0x02020200
 800197c:	01ff0000 	.word	0x01ff0000
 8001980:	01010280 	.word	0x01010280
 8001984:	52004000 	.word	0x52004000

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800198c:	f7ff ff84 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f009 fd1f 	bl	800b3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff f87f 	bl	8000abc <main>
  bx  lr
 80019be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80019c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019c8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80019cc:	0800b4bc 	.word	0x0800b4bc
  ldr r2, =_sbss
 80019d0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80019d4:	24000428 	.word	0x24000428

080019d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC3_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f000 f980 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019e8:	f004 fa34 	bl	8005e54 <HAL_RCC_GetSysClockFreq>
 80019ec:	4602      	mov	r2, r0
 80019ee:	4b15      	ldr	r3, [pc, #84]	@ (8001a44 <HAL_Init+0x68>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	4913      	ldr	r1, [pc, #76]	@ (8001a48 <HAL_Init+0x6c>)
 80019fa:	5ccb      	ldrb	r3, [r1, r3]
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <HAL_Init+0x68>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a48 <HAL_Init+0x6c>)
 8001a10:	5cd3      	ldrb	r3, [r2, r3]
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <HAL_Init+0x70>)
 8001a1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_Init+0x74>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	200f      	movs	r0, #15
 8001a28:	f000 f814 	bl	8001a54 <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e002      	b.n	8001a3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a36:	f7ff fcbf 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58024400 	.word	0x58024400
 8001a48:	0800b468 	.word	0x0800b468
 8001a4c:	24000008 	.word	0x24000008
 8001a50:	24000004 	.word	0x24000004

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a5c:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <HAL_InitTick+0x60>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e021      	b.n	8001aac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a68:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_InitTick+0x64>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_InitTick+0x60>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f965 	bl	8001d4e <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f92f 	bl	8001cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	@ (8001abc <HAL_InitTick+0x68>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	24000010 	.word	0x24000010
 8001ab8:	24000004 	.word	0x24000004
 8001abc:	2400000c 	.word	0x2400000c

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	24000010 	.word	0x24000010
 8001ae4:	24000424 	.word	0x24000424

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	24000424 	.word	0x24000424

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	24000010 	.word	0x24000010

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <__NVIC_SetPriorityGrouping+0x40>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b70:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <__NVIC_SetPriorityGrouping+0x40>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00
 8001b8c:	05fa0000 	.word	0x05fa0000

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff40 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff33 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa4 	bl	8001ca4 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d6c:	f3bf 8f5f 	dmb	sy
}
 8001d70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <HAL_MPU_Disable+0x28>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <HAL_MPU_Disable+0x28>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_MPU_Disable+0x2c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	e000ed90 	.word	0xe000ed90

08001d98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001da0:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd0 <HAL_MPU_Enable+0x38>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_MPU_Enable+0x3c>)
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_MPU_Enable+0x3c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001db6:	f3bf 8f4f 	dsb	sy
}
 8001dba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dbc:	f3bf 8f6f 	isb	sy
}
 8001dc0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed90 	.word	0xe000ed90
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	785a      	ldrb	r2, [r3, #1]
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_MPU_ConfigRegion+0x7c>)
 8001de6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001de8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_MPU_ConfigRegion+0x7c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a19      	ldr	r2, [pc, #100]	@ (8001e54 <HAL_MPU_ConfigRegion+0x7c>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001df4:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <HAL_MPU_ConfigRegion+0x7c>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7b1b      	ldrb	r3, [r3, #12]
 8001e00:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7adb      	ldrb	r3, [r3, #11]
 8001e06:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7a9b      	ldrb	r3, [r3, #10]
 8001e0e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7b5b      	ldrb	r3, [r3, #13]
 8001e16:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7b9b      	ldrb	r3, [r3, #14]
 8001e1e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7bdb      	ldrb	r3, [r3, #15]
 8001e26:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7a5b      	ldrb	r3, [r3, #9]
 8001e2e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7a1b      	ldrb	r3, [r3, #8]
 8001e36:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e38:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e40:	4a04      	ldr	r2, [pc, #16]	@ (8001e54 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e42:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e44:	6113      	str	r3, [r2, #16]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed90 	.word	0xe000ed90

08001e58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e054      	b.n	8001f14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7f5b      	ldrb	r3, [r3, #29]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fab6 	bl	80013ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	791b      	ldrb	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a22      	ldr	r2, [pc, #136]	@ (8001f1c <HAL_CRC_Init+0xc4>)
 8001e94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0218 	bic.w	r2, r2, #24
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	e00c      	b.n	8001ec2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f948 	bl	8002148 <HAL_CRCEx_Polynomial_Set>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e028      	b.n	8001f14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	795b      	ldrb	r3, [r3, #5]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	e004      	b.n	8001ee0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6912      	ldr	r2, [r2, #16]
 8001ede:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	04c11db7 	.word	0x04c11db7

08001f20 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2202      	movs	r2, #2
 8001f34:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d006      	beq.n	8001f5c <HAL_CRC_Calculate+0x3c>
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d829      	bhi.n	8001fa6 <HAL_CRC_Calculate+0x86>
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d019      	beq.n	8001f8a <HAL_CRC_Calculate+0x6a>
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d01e      	beq.n	8001f98 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001f5a:	e024      	b.n	8001fa6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	441a      	add	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d3f0      	bcc.n	8001f62 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	e00e      	b.n	8001fa8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f812 	bl	8001fb8 <CRC_Handle_8>
 8001f94:	6138      	str	r0, [r7, #16]
      break;
 8001f96:	e007      	b.n	8001fa8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f899 	bl	80020d4 <CRC_Handle_16>
 8001fa2:	6138      	str	r0, [r7, #16]
      break;
 8001fa4:	e000      	b.n	8001fa8 <HAL_CRC_Calculate+0x88>
      break;
 8001fa6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001fae:	693b      	ldr	r3, [r7, #16]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b089      	sub	sp, #36	@ 0x24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	e023      	b.n	8002012 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	3301      	adds	r3, #1
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	440b      	add	r3, r1
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001fe4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	440b      	add	r3, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001ff4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3303      	adds	r3, #3
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	440b      	add	r3, r1
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002008:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800200a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3301      	adds	r3, #1
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3d6      	bcc.n	8001fca <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d04d      	beq.n	80020c2 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d116      	bne.n	8002078 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	3301      	adds	r3, #1
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	440b      	add	r3, r1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	8b7a      	ldrh	r2, [r7, #26]
 8002076:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b03      	cmp	r3, #3
 8002080:	d11f      	bne.n	80020c2 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	3301      	adds	r3, #1
 8002096:	68b9      	ldr	r1, [r7, #8]
 8002098:	440b      	add	r3, r1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	8b7a      	ldrh	r2, [r7, #26]
 80020ae:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3302      	adds	r3, #2
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3724      	adds	r7, #36	@ 0x24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e013      	b.n	800210e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	041a      	lsls	r2, r3, #16
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	440b      	add	r3, r1
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3e6      	bcc.n	80020e6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002158:	231f      	movs	r3, #31
 800215a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
 800216a:	e063      	b.n	8002234 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800216c:	bf00      	nop
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	613a      	str	r2, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <HAL_CRCEx_Polynomial_Set+0x44>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b18      	cmp	r3, #24
 8002190:	d846      	bhi.n	8002220 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002192:	a201      	add	r2, pc, #4	@ (adr r2, 8002198 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	08002227 	.word	0x08002227
 800219c:	08002221 	.word	0x08002221
 80021a0:	08002221 	.word	0x08002221
 80021a4:	08002221 	.word	0x08002221
 80021a8:	08002221 	.word	0x08002221
 80021ac:	08002221 	.word	0x08002221
 80021b0:	08002221 	.word	0x08002221
 80021b4:	08002221 	.word	0x08002221
 80021b8:	08002215 	.word	0x08002215
 80021bc:	08002221 	.word	0x08002221
 80021c0:	08002221 	.word	0x08002221
 80021c4:	08002221 	.word	0x08002221
 80021c8:	08002221 	.word	0x08002221
 80021cc:	08002221 	.word	0x08002221
 80021d0:	08002221 	.word	0x08002221
 80021d4:	08002221 	.word	0x08002221
 80021d8:	08002209 	.word	0x08002209
 80021dc:	08002221 	.word	0x08002221
 80021e0:	08002221 	.word	0x08002221
 80021e4:	08002221 	.word	0x08002221
 80021e8:	08002221 	.word	0x08002221
 80021ec:	08002221 	.word	0x08002221
 80021f0:	08002221 	.word	0x08002221
 80021f4:	08002221 	.word	0x08002221
 80021f8:	080021fd 	.word	0x080021fd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d913      	bls.n	800222a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002206:	e010      	b.n	800222a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b07      	cmp	r3, #7
 800220c:	d90f      	bls.n	800222e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002212:	e00c      	b.n	800222e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b0f      	cmp	r3, #15
 8002218:	d90b      	bls.n	8002232 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800221e:	e008      	b.n	8002232 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	75fb      	strb	r3, [r7, #23]
        break;
 8002224:	e006      	b.n	8002234 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002226:	bf00      	nop
 8002228:	e004      	b.n	8002234 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800222a:	bf00      	nop
 800222c:	e002      	b.n	8002234 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002232:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 0118 	bic.w	r1, r3, #24
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002256:	7dfb      	ldrb	r3, [r7, #23]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff fc3c 	bl	8001ae8 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e312      	b.n	80028a2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a66      	ldr	r2, [pc, #408]	@ (800241c <HAL_DMA_Init+0x1b8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d04a      	beq.n	800231c <HAL_DMA_Init+0xb8>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	@ (8002420 <HAL_DMA_Init+0x1bc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d045      	beq.n	800231c <HAL_DMA_Init+0xb8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a63      	ldr	r2, [pc, #396]	@ (8002424 <HAL_DMA_Init+0x1c0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d040      	beq.n	800231c <HAL_DMA_Init+0xb8>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a62      	ldr	r2, [pc, #392]	@ (8002428 <HAL_DMA_Init+0x1c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d03b      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a60      	ldr	r2, [pc, #384]	@ (800242c <HAL_DMA_Init+0x1c8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d036      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002430 <HAL_DMA_Init+0x1cc>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d031      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002434 <HAL_DMA_Init+0x1d0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02c      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002438 <HAL_DMA_Init+0x1d4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d027      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5a      	ldr	r2, [pc, #360]	@ (800243c <HAL_DMA_Init+0x1d8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a59      	ldr	r2, [pc, #356]	@ (8002440 <HAL_DMA_Init+0x1dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d01d      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a57      	ldr	r2, [pc, #348]	@ (8002444 <HAL_DMA_Init+0x1e0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a56      	ldr	r2, [pc, #344]	@ (8002448 <HAL_DMA_Init+0x1e4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a54      	ldr	r2, [pc, #336]	@ (800244c <HAL_DMA_Init+0x1e8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a53      	ldr	r2, [pc, #332]	@ (8002450 <HAL_DMA_Init+0x1ec>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a51      	ldr	r2, [pc, #324]	@ (8002454 <HAL_DMA_Init+0x1f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a50      	ldr	r2, [pc, #320]	@ (8002458 <HAL_DMA_Init+0x1f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Init+0xbc>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_DMA_Init+0xbe>
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 813c 	beq.w	80025a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a37      	ldr	r2, [pc, #220]	@ (800241c <HAL_DMA_Init+0x1b8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a36      	ldr	r2, [pc, #216]	@ (8002420 <HAL_DMA_Init+0x1bc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a34      	ldr	r2, [pc, #208]	@ (8002424 <HAL_DMA_Init+0x1c0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a33      	ldr	r2, [pc, #204]	@ (8002428 <HAL_DMA_Init+0x1c4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a31      	ldr	r2, [pc, #196]	@ (800242c <HAL_DMA_Init+0x1c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a30      	ldr	r2, [pc, #192]	@ (8002430 <HAL_DMA_Init+0x1cc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a2e      	ldr	r2, [pc, #184]	@ (8002434 <HAL_DMA_Init+0x1d0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a2d      	ldr	r2, [pc, #180]	@ (8002438 <HAL_DMA_Init+0x1d4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_DMA_Init+0x1d8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2a      	ldr	r2, [pc, #168]	@ (8002440 <HAL_DMA_Init+0x1dc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <HAL_DMA_Init+0x1e0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a27      	ldr	r2, [pc, #156]	@ (8002448 <HAL_DMA_Init+0x1e4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a25      	ldr	r2, [pc, #148]	@ (800244c <HAL_DMA_Init+0x1e8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	@ (8002450 <HAL_DMA_Init+0x1ec>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a22      	ldr	r2, [pc, #136]	@ (8002454 <HAL_DMA_Init+0x1f0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <HAL_DMA_Init+0x1f4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d108      	bne.n	80023ea <HAL_DMA_Init+0x186>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_DMA_Init+0x196>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0201 	bic.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023fa:	e02f      	b.n	800245c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fc:	f7ff fb74 	bl	8001ae8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b05      	cmp	r3, #5
 8002408:	d928      	bls.n	800245c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2203      	movs	r2, #3
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e242      	b.n	80028a2 <HAL_DMA_Init+0x63e>
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1c8      	bne.n	80023fc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4b83      	ldr	r3, [pc, #524]	@ (8002684 <HAL_DMA_Init+0x420>)
 8002476:	4013      	ands	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002482:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800249a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d107      	bne.n	80024c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	4313      	orrs	r3, r2
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b28      	cmp	r3, #40	@ 0x28
 80024c6:	d903      	bls.n	80024d0 <HAL_DMA_Init+0x26c>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80024ce:	d91f      	bls.n	8002510 <HAL_DMA_Init+0x2ac>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80024d6:	d903      	bls.n	80024e0 <HAL_DMA_Init+0x27c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b42      	cmp	r3, #66	@ 0x42
 80024de:	d917      	bls.n	8002510 <HAL_DMA_Init+0x2ac>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b46      	cmp	r3, #70	@ 0x46
 80024e6:	d903      	bls.n	80024f0 <HAL_DMA_Init+0x28c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b48      	cmp	r3, #72	@ 0x48
 80024ee:	d90f      	bls.n	8002510 <HAL_DMA_Init+0x2ac>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b4e      	cmp	r3, #78	@ 0x4e
 80024f6:	d903      	bls.n	8002500 <HAL_DMA_Init+0x29c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b52      	cmp	r3, #82	@ 0x52
 80024fe:	d907      	bls.n	8002510 <HAL_DMA_Init+0x2ac>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b73      	cmp	r3, #115	@ 0x73
 8002506:	d905      	bls.n	8002514 <HAL_DMA_Init+0x2b0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b77      	cmp	r3, #119	@ 0x77
 800250e:	d801      	bhi.n	8002514 <HAL_DMA_Init+0x2b0>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_DMA_Init+0x2b2>
 8002514:	2300      	movs	r3, #0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002520:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f023 0307 	bic.w	r3, r3, #7
 8002538:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	2b04      	cmp	r3, #4
 800254a:	d117      	bne.n	800257c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00e      	beq.n	800257c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f002 fb2e 	bl	8004bc0 <DMA_CheckFifoParam>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2240      	movs	r2, #64	@ 0x40
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e192      	b.n	80028a2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f002 fa69 	bl	8004a5c <DMA_CalcBaseAndBitshift>
 800258a:	4603      	mov	r3, r0
 800258c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	223f      	movs	r2, #63	@ 0x3f
 8002598:	409a      	lsls	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	e0c8      	b.n	8002732 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a38      	ldr	r2, [pc, #224]	@ (8002688 <HAL_DMA_Init+0x424>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d022      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a37      	ldr	r2, [pc, #220]	@ (800268c <HAL_DMA_Init+0x428>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d01d      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a35      	ldr	r2, [pc, #212]	@ (8002690 <HAL_DMA_Init+0x42c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d018      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a34      	ldr	r2, [pc, #208]	@ (8002694 <HAL_DMA_Init+0x430>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d013      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a32      	ldr	r2, [pc, #200]	@ (8002698 <HAL_DMA_Init+0x434>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00e      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a31      	ldr	r2, [pc, #196]	@ (800269c <HAL_DMA_Init+0x438>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d009      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_DMA_Init+0x43c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d004      	beq.n	80025f0 <HAL_DMA_Init+0x38c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_DMA_Init+0x440>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <HAL_DMA_Init+0x390>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_DMA_Init+0x392>
 80025f4:	2300      	movs	r3, #0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8092 	beq.w	8002720 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a21      	ldr	r2, [pc, #132]	@ (8002688 <HAL_DMA_Init+0x424>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d021      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a20      	ldr	r2, [pc, #128]	@ (800268c <HAL_DMA_Init+0x428>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01c      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1e      	ldr	r2, [pc, #120]	@ (8002690 <HAL_DMA_Init+0x42c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d017      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1d      	ldr	r2, [pc, #116]	@ (8002694 <HAL_DMA_Init+0x430>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d012      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1b      	ldr	r2, [pc, #108]	@ (8002698 <HAL_DMA_Init+0x434>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1a      	ldr	r2, [pc, #104]	@ (800269c <HAL_DMA_Init+0x438>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d008      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <HAL_DMA_Init+0x43c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <HAL_DMA_Init+0x3e6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <HAL_DMA_Init+0x440>)
 8002648:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HAL_DMA_Init+0x444>)
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d01c      	beq.n	80026ac <HAL_DMA_Init+0x448>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d102      	bne.n	8002680 <HAL_DMA_Init+0x41c>
 800267a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800267e:	e016      	b.n	80026ae <HAL_DMA_Init+0x44a>
 8002680:	2300      	movs	r3, #0
 8002682:	e014      	b.n	80026ae <HAL_DMA_Init+0x44a>
 8002684:	fe10803f 	.word	0xfe10803f
 8002688:	58025408 	.word	0x58025408
 800268c:	5802541c 	.word	0x5802541c
 8002690:	58025430 	.word	0x58025430
 8002694:	58025444 	.word	0x58025444
 8002698:	58025458 	.word	0x58025458
 800269c:	5802546c 	.word	0x5802546c
 80026a0:	58025480 	.word	0x58025480
 80026a4:	58025494 	.word	0x58025494
 80026a8:	fffe000f 	.word	0xfffe000f
 80026ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80026bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80026c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80026cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80026d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80026dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b6e      	ldr	r3, [pc, #440]	@ (80028ac <HAL_DMA_Init+0x648>)
 80026f4:	4413      	add	r3, r2
 80026f6:	4a6e      	ldr	r2, [pc, #440]	@ (80028b0 <HAL_DMA_Init+0x64c>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	009a      	lsls	r2, r3, #2
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f002 f9a9 	bl	8004a5c <DMA_CalcBaseAndBitshift>
 800270a:	4603      	mov	r3, r0
 800270c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	e008      	b.n	8002732 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2240      	movs	r2, #64	@ 0x40
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0b7      	b.n	80028a2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5f      	ldr	r2, [pc, #380]	@ (80028b4 <HAL_DMA_Init+0x650>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d072      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5d      	ldr	r2, [pc, #372]	@ (80028b8 <HAL_DMA_Init+0x654>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d06d      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5c      	ldr	r2, [pc, #368]	@ (80028bc <HAL_DMA_Init+0x658>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d068      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5a      	ldr	r2, [pc, #360]	@ (80028c0 <HAL_DMA_Init+0x65c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d063      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a59      	ldr	r2, [pc, #356]	@ (80028c4 <HAL_DMA_Init+0x660>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a57      	ldr	r2, [pc, #348]	@ (80028c8 <HAL_DMA_Init+0x664>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d059      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a56      	ldr	r2, [pc, #344]	@ (80028cc <HAL_DMA_Init+0x668>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d054      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a54      	ldr	r2, [pc, #336]	@ (80028d0 <HAL_DMA_Init+0x66c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d04f      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a53      	ldr	r2, [pc, #332]	@ (80028d4 <HAL_DMA_Init+0x670>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d04a      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a51      	ldr	r2, [pc, #324]	@ (80028d8 <HAL_DMA_Init+0x674>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d045      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a50      	ldr	r2, [pc, #320]	@ (80028dc <HAL_DMA_Init+0x678>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d040      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	@ (80028e0 <HAL_DMA_Init+0x67c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d03b      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a4d      	ldr	r2, [pc, #308]	@ (80028e4 <HAL_DMA_Init+0x680>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d036      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	@ (80028e8 <HAL_DMA_Init+0x684>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4a      	ldr	r2, [pc, #296]	@ (80028ec <HAL_DMA_Init+0x688>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d02c      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a48      	ldr	r2, [pc, #288]	@ (80028f0 <HAL_DMA_Init+0x68c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d027      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a47      	ldr	r2, [pc, #284]	@ (80028f4 <HAL_DMA_Init+0x690>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a45      	ldr	r2, [pc, #276]	@ (80028f8 <HAL_DMA_Init+0x694>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01d      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a44      	ldr	r2, [pc, #272]	@ (80028fc <HAL_DMA_Init+0x698>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d018      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a42      	ldr	r2, [pc, #264]	@ (8002900 <HAL_DMA_Init+0x69c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a41      	ldr	r2, [pc, #260]	@ (8002904 <HAL_DMA_Init+0x6a0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a3f      	ldr	r2, [pc, #252]	@ (8002908 <HAL_DMA_Init+0x6a4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d009      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a3e      	ldr	r2, [pc, #248]	@ (800290c <HAL_DMA_Init+0x6a8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d004      	beq.n	8002822 <HAL_DMA_Init+0x5be>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3c      	ldr	r2, [pc, #240]	@ (8002910 <HAL_DMA_Init+0x6ac>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d101      	bne.n	8002826 <HAL_DMA_Init+0x5c2>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_DMA_Init+0x5c4>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f002 fa43 	bl	8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b80      	cmp	r3, #128	@ 0x80
 8002838:	d102      	bne.n	8002840 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002854:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_DMA_Init+0x61c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d80c      	bhi.n	8002880 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f002 fac0 	bl	8004dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e008      	b.n	8002892 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	a7fdabf8 	.word	0xa7fdabf8
 80028b0:	cccccccd 	.word	0xcccccccd
 80028b4:	40020010 	.word	0x40020010
 80028b8:	40020028 	.word	0x40020028
 80028bc:	40020040 	.word	0x40020040
 80028c0:	40020058 	.word	0x40020058
 80028c4:	40020070 	.word	0x40020070
 80028c8:	40020088 	.word	0x40020088
 80028cc:	400200a0 	.word	0x400200a0
 80028d0:	400200b8 	.word	0x400200b8
 80028d4:	40020410 	.word	0x40020410
 80028d8:	40020428 	.word	0x40020428
 80028dc:	40020440 	.word	0x40020440
 80028e0:	40020458 	.word	0x40020458
 80028e4:	40020470 	.word	0x40020470
 80028e8:	40020488 	.word	0x40020488
 80028ec:	400204a0 	.word	0x400204a0
 80028f0:	400204b8 	.word	0x400204b8
 80028f4:	58025408 	.word	0x58025408
 80028f8:	5802541c 	.word	0x5802541c
 80028fc:	58025430 	.word	0x58025430
 8002900:	58025444 	.word	0x58025444
 8002904:	58025458 	.word	0x58025458
 8002908:	5802546c 	.word	0x5802546c
 800290c:	58025480 	.word	0x58025480
 8002910:	58025494 	.word	0x58025494

08002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e226      	b.n	8002d7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_DMA_Start_IT+0x2a>
 800293a:	2302      	movs	r3, #2
 800293c:	e21f      	b.n	8002d7e <HAL_DMA_Start_IT+0x46a>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	f040 820a 	bne.w	8002d68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a68      	ldr	r2, [pc, #416]	@ (8002b08 <HAL_DMA_Start_IT+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d04a      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a66      	ldr	r2, [pc, #408]	@ (8002b0c <HAL_DMA_Start_IT+0x1f8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d045      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a65      	ldr	r2, [pc, #404]	@ (8002b10 <HAL_DMA_Start_IT+0x1fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d040      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a63      	ldr	r2, [pc, #396]	@ (8002b14 <HAL_DMA_Start_IT+0x200>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d03b      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a62      	ldr	r2, [pc, #392]	@ (8002b18 <HAL_DMA_Start_IT+0x204>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d036      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a60      	ldr	r2, [pc, #384]	@ (8002b1c <HAL_DMA_Start_IT+0x208>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002b20 <HAL_DMA_Start_IT+0x20c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d02c      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_DMA_Start_IT+0x210>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d027      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5c      	ldr	r2, [pc, #368]	@ (8002b28 <HAL_DMA_Start_IT+0x214>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5a      	ldr	r2, [pc, #360]	@ (8002b2c <HAL_DMA_Start_IT+0x218>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01d      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a59      	ldr	r2, [pc, #356]	@ (8002b30 <HAL_DMA_Start_IT+0x21c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d018      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_DMA_Start_IT+0x220>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a56      	ldr	r2, [pc, #344]	@ (8002b38 <HAL_DMA_Start_IT+0x224>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a54      	ldr	r2, [pc, #336]	@ (8002b3c <HAL_DMA_Start_IT+0x228>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a53      	ldr	r2, [pc, #332]	@ (8002b40 <HAL_DMA_Start_IT+0x22c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d004      	beq.n	8002a02 <HAL_DMA_Start_IT+0xee>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a51      	ldr	r2, [pc, #324]	@ (8002b44 <HAL_DMA_Start_IT+0x230>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d108      	bne.n	8002a14 <HAL_DMA_Start_IT+0x100>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e007      	b.n	8002a24 <HAL_DMA_Start_IT+0x110>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f001 fe6a 	bl	8004704 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a34      	ldr	r2, [pc, #208]	@ (8002b08 <HAL_DMA_Start_IT+0x1f4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d04a      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a33      	ldr	r2, [pc, #204]	@ (8002b0c <HAL_DMA_Start_IT+0x1f8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d045      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <HAL_DMA_Start_IT+0x1fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d040      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <HAL_DMA_Start_IT+0x200>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d03b      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b18 <HAL_DMA_Start_IT+0x204>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2d      	ldr	r2, [pc, #180]	@ (8002b1c <HAL_DMA_Start_IT+0x208>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d031      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <HAL_DMA_Start_IT+0x20c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02c      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b24 <HAL_DMA_Start_IT+0x210>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d027      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_DMA_Start_IT+0x214>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_DMA_Start_IT+0x218>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01d      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_DMA_Start_IT+0x21c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d018      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <HAL_DMA_Start_IT+0x220>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_DMA_Start_IT+0x224>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_DMA_Start_IT+0x228>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_DMA_Start_IT+0x22c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_Start_IT+0x1bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	@ (8002b44 <HAL_DMA_Start_IT+0x230>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Start_IT+0x1c0>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_DMA_Start_IT+0x1c2>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d036      	beq.n	8002b48 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 021e 	bic.w	r2, r3, #30
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0216 	orr.w	r2, r2, #22
 8002aec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03e      	beq.n	8002b74 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0208 	orr.w	r2, r2, #8
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e035      	b.n	8002b74 <HAL_DMA_Start_IT+0x260>
 8002b08:	40020010 	.word	0x40020010
 8002b0c:	40020028 	.word	0x40020028
 8002b10:	40020040 	.word	0x40020040
 8002b14:	40020058 	.word	0x40020058
 8002b18:	40020070 	.word	0x40020070
 8002b1c:	40020088 	.word	0x40020088
 8002b20:	400200a0 	.word	0x400200a0
 8002b24:	400200b8 	.word	0x400200b8
 8002b28:	40020410 	.word	0x40020410
 8002b2c:	40020428 	.word	0x40020428
 8002b30:	40020440 	.word	0x40020440
 8002b34:	40020458 	.word	0x40020458
 8002b38:	40020470 	.word	0x40020470
 8002b3c:	40020488 	.word	0x40020488
 8002b40:	400204a0 	.word	0x400204a0
 8002b44:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 020e 	bic.w	r2, r3, #14
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 020a 	orr.w	r2, r2, #10
 8002b5a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0204 	orr.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a83      	ldr	r2, [pc, #524]	@ (8002d88 <HAL_DMA_Start_IT+0x474>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d072      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a82      	ldr	r2, [pc, #520]	@ (8002d8c <HAL_DMA_Start_IT+0x478>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d06d      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a80      	ldr	r2, [pc, #512]	@ (8002d90 <HAL_DMA_Start_IT+0x47c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d068      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7f      	ldr	r2, [pc, #508]	@ (8002d94 <HAL_DMA_Start_IT+0x480>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d063      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a7d      	ldr	r2, [pc, #500]	@ (8002d98 <HAL_DMA_Start_IT+0x484>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d05e      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a7c      	ldr	r2, [pc, #496]	@ (8002d9c <HAL_DMA_Start_IT+0x488>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d059      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a7a      	ldr	r2, [pc, #488]	@ (8002da0 <HAL_DMA_Start_IT+0x48c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d054      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a79      	ldr	r2, [pc, #484]	@ (8002da4 <HAL_DMA_Start_IT+0x490>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04f      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a77      	ldr	r2, [pc, #476]	@ (8002da8 <HAL_DMA_Start_IT+0x494>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d04a      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a76      	ldr	r2, [pc, #472]	@ (8002dac <HAL_DMA_Start_IT+0x498>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d045      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a74      	ldr	r2, [pc, #464]	@ (8002db0 <HAL_DMA_Start_IT+0x49c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d040      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a73      	ldr	r2, [pc, #460]	@ (8002db4 <HAL_DMA_Start_IT+0x4a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d03b      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a71      	ldr	r2, [pc, #452]	@ (8002db8 <HAL_DMA_Start_IT+0x4a4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d036      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a70      	ldr	r2, [pc, #448]	@ (8002dbc <HAL_DMA_Start_IT+0x4a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d031      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc0 <HAL_DMA_Start_IT+0x4ac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d02c      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6d      	ldr	r2, [pc, #436]	@ (8002dc4 <HAL_DMA_Start_IT+0x4b0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d027      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc8 <HAL_DMA_Start_IT+0x4b4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d022      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a6a      	ldr	r2, [pc, #424]	@ (8002dcc <HAL_DMA_Start_IT+0x4b8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d01d      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a68      	ldr	r2, [pc, #416]	@ (8002dd0 <HAL_DMA_Start_IT+0x4bc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d018      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a67      	ldr	r2, [pc, #412]	@ (8002dd4 <HAL_DMA_Start_IT+0x4c0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a65      	ldr	r2, [pc, #404]	@ (8002dd8 <HAL_DMA_Start_IT+0x4c4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00e      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a64      	ldr	r2, [pc, #400]	@ (8002ddc <HAL_DMA_Start_IT+0x4c8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d009      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a62      	ldr	r2, [pc, #392]	@ (8002de0 <HAL_DMA_Start_IT+0x4cc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_DMA_Start_IT+0x350>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a61      	ldr	r2, [pc, #388]	@ (8002de4 <HAL_DMA_Start_IT+0x4d0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_DMA_Start_IT+0x354>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_DMA_Start_IT+0x356>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a37      	ldr	r2, [pc, #220]	@ (8002d88 <HAL_DMA_Start_IT+0x474>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d04a      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a36      	ldr	r2, [pc, #216]	@ (8002d8c <HAL_DMA_Start_IT+0x478>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d045      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a34      	ldr	r2, [pc, #208]	@ (8002d90 <HAL_DMA_Start_IT+0x47c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d040      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a33      	ldr	r2, [pc, #204]	@ (8002d94 <HAL_DMA_Start_IT+0x480>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d03b      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a31      	ldr	r2, [pc, #196]	@ (8002d98 <HAL_DMA_Start_IT+0x484>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d036      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a30      	ldr	r2, [pc, #192]	@ (8002d9c <HAL_DMA_Start_IT+0x488>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d031      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8002da0 <HAL_DMA_Start_IT+0x48c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d02c      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_DMA_Start_IT+0x490>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d027      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <HAL_DMA_Start_IT+0x494>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d022      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2a      	ldr	r2, [pc, #168]	@ (8002dac <HAL_DMA_Start_IT+0x498>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d01d      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	@ (8002db0 <HAL_DMA_Start_IT+0x49c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d018      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a27      	ldr	r2, [pc, #156]	@ (8002db4 <HAL_DMA_Start_IT+0x4a0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_DMA_Start_IT+0x4a4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00e      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a24      	ldr	r2, [pc, #144]	@ (8002dbc <HAL_DMA_Start_IT+0x4a8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d009      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_DMA_Start_IT+0x4ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d004      	beq.n	8002d44 <HAL_DMA_Start_IT+0x430>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <HAL_DMA_Start_IT+0x4b0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d108      	bne.n	8002d56 <HAL_DMA_Start_IT+0x442>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e012      	b.n	8002d7c <HAL_DMA_Start_IT+0x468>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e009      	b.n	8002d7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40020010 	.word	0x40020010
 8002d8c:	40020028 	.word	0x40020028
 8002d90:	40020040 	.word	0x40020040
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020070 	.word	0x40020070
 8002d9c:	40020088 	.word	0x40020088
 8002da0:	400200a0 	.word	0x400200a0
 8002da4:	400200b8 	.word	0x400200b8
 8002da8:	40020410 	.word	0x40020410
 8002dac:	40020428 	.word	0x40020428
 8002db0:	40020440 	.word	0x40020440
 8002db4:	40020458 	.word	0x40020458
 8002db8:	40020470 	.word	0x40020470
 8002dbc:	40020488 	.word	0x40020488
 8002dc0:	400204a0 	.word	0x400204a0
 8002dc4:	400204b8 	.word	0x400204b8
 8002dc8:	58025408 	.word	0x58025408
 8002dcc:	5802541c 	.word	0x5802541c
 8002dd0:	58025430 	.word	0x58025430
 8002dd4:	58025444 	.word	0x58025444
 8002dd8:	58025458 	.word	0x58025458
 8002ddc:	5802546c 	.word	0x5802546c
 8002de0:	58025480 	.word	0x58025480
 8002de4:	58025494 	.word	0x58025494

08002de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7fe fe7a 	bl	8001ae8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e2dc      	b.n	80033ba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d008      	beq.n	8002e1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2280      	movs	r2, #128	@ 0x80
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e2cd      	b.n	80033ba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a76      	ldr	r2, [pc, #472]	@ (8002ffc <HAL_DMA_Abort+0x214>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04a      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a74      	ldr	r2, [pc, #464]	@ (8003000 <HAL_DMA_Abort+0x218>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a73      	ldr	r2, [pc, #460]	@ (8003004 <HAL_DMA_Abort+0x21c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a71      	ldr	r2, [pc, #452]	@ (8003008 <HAL_DMA_Abort+0x220>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a70      	ldr	r2, [pc, #448]	@ (800300c <HAL_DMA_Abort+0x224>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6e      	ldr	r2, [pc, #440]	@ (8003010 <HAL_DMA_Abort+0x228>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003014 <HAL_DMA_Abort+0x22c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d02c      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6b      	ldr	r2, [pc, #428]	@ (8003018 <HAL_DMA_Abort+0x230>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_DMA_Abort+0x234>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <HAL_DMA_Abort+0x238>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a67      	ldr	r2, [pc, #412]	@ (8003024 <HAL_DMA_Abort+0x23c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a65      	ldr	r2, [pc, #404]	@ (8003028 <HAL_DMA_Abort+0x240>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a64      	ldr	r2, [pc, #400]	@ (800302c <HAL_DMA_Abort+0x244>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a62      	ldr	r2, [pc, #392]	@ (8003030 <HAL_DMA_Abort+0x248>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a61      	ldr	r2, [pc, #388]	@ (8003034 <HAL_DMA_Abort+0x24c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort+0xd6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003038 <HAL_DMA_Abort+0x250>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_DMA_Abort+0xda>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_DMA_Abort+0xdc>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 021e 	bic.w	r2, r2, #30
 8002ed6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ee6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e00a      	b.n	8002f06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002ffc <HAL_DMA_Abort+0x214>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d072      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a3a      	ldr	r2, [pc, #232]	@ (8003000 <HAL_DMA_Abort+0x218>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d06d      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a39      	ldr	r2, [pc, #228]	@ (8003004 <HAL_DMA_Abort+0x21c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d068      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a37      	ldr	r2, [pc, #220]	@ (8003008 <HAL_DMA_Abort+0x220>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d063      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a36      	ldr	r2, [pc, #216]	@ (800300c <HAL_DMA_Abort+0x224>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d05e      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <HAL_DMA_Abort+0x228>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d059      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a33      	ldr	r2, [pc, #204]	@ (8003014 <HAL_DMA_Abort+0x22c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d054      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <HAL_DMA_Abort+0x230>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04f      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a30      	ldr	r2, [pc, #192]	@ (800301c <HAL_DMA_Abort+0x234>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2e      	ldr	r2, [pc, #184]	@ (8003020 <HAL_DMA_Abort+0x238>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <HAL_DMA_Abort+0x23c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2b      	ldr	r2, [pc, #172]	@ (8003028 <HAL_DMA_Abort+0x240>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2a      	ldr	r2, [pc, #168]	@ (800302c <HAL_DMA_Abort+0x244>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	@ (8003030 <HAL_DMA_Abort+0x248>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_DMA_Abort+0x24c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a25      	ldr	r2, [pc, #148]	@ (8003038 <HAL_DMA_Abort+0x250>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_DMA_Abort+0x254>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a22      	ldr	r2, [pc, #136]	@ (8003040 <HAL_DMA_Abort+0x258>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a21      	ldr	r2, [pc, #132]	@ (8003044 <HAL_DMA_Abort+0x25c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8003048 <HAL_DMA_Abort+0x260>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <HAL_DMA_Abort+0x264>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8003050 <HAL_DMA_Abort+0x268>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8003054 <HAL_DMA_Abort+0x26c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort+0x20e>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_DMA_Abort+0x270>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d132      	bne.n	800305c <HAL_DMA_Abort+0x274>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e031      	b.n	800305e <HAL_DMA_Abort+0x276>
 8002ffa:	bf00      	nop
 8002ffc:	40020010 	.word	0x40020010
 8003000:	40020028 	.word	0x40020028
 8003004:	40020040 	.word	0x40020040
 8003008:	40020058 	.word	0x40020058
 800300c:	40020070 	.word	0x40020070
 8003010:	40020088 	.word	0x40020088
 8003014:	400200a0 	.word	0x400200a0
 8003018:	400200b8 	.word	0x400200b8
 800301c:	40020410 	.word	0x40020410
 8003020:	40020428 	.word	0x40020428
 8003024:	40020440 	.word	0x40020440
 8003028:	40020458 	.word	0x40020458
 800302c:	40020470 	.word	0x40020470
 8003030:	40020488 	.word	0x40020488
 8003034:	400204a0 	.word	0x400204a0
 8003038:	400204b8 	.word	0x400204b8
 800303c:	58025408 	.word	0x58025408
 8003040:	5802541c 	.word	0x5802541c
 8003044:	58025430 	.word	0x58025430
 8003048:	58025444 	.word	0x58025444
 800304c:	58025458 	.word	0x58025458
 8003050:	5802546c 	.word	0x5802546c
 8003054:	58025480 	.word	0x58025480
 8003058:	58025494 	.word	0x58025494
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003070:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6d      	ldr	r2, [pc, #436]	@ (800322c <HAL_DMA_Abort+0x444>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6b      	ldr	r2, [pc, #428]	@ (8003230 <HAL_DMA_Abort+0x448>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6a      	ldr	r2, [pc, #424]	@ (8003234 <HAL_DMA_Abort+0x44c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a68      	ldr	r2, [pc, #416]	@ (8003238 <HAL_DMA_Abort+0x450>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a67      	ldr	r2, [pc, #412]	@ (800323c <HAL_DMA_Abort+0x454>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	@ (8003240 <HAL_DMA_Abort+0x458>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a64      	ldr	r2, [pc, #400]	@ (8003244 <HAL_DMA_Abort+0x45c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a62      	ldr	r2, [pc, #392]	@ (8003248 <HAL_DMA_Abort+0x460>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	@ (800324c <HAL_DMA_Abort+0x464>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003250 <HAL_DMA_Abort+0x468>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5e      	ldr	r2, [pc, #376]	@ (8003254 <HAL_DMA_Abort+0x46c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5c      	ldr	r2, [pc, #368]	@ (8003258 <HAL_DMA_Abort+0x470>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5b      	ldr	r2, [pc, #364]	@ (800325c <HAL_DMA_Abort+0x474>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a59      	ldr	r2, [pc, #356]	@ (8003260 <HAL_DMA_Abort+0x478>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_DMA_Abort+0x47c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort+0x32a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a56      	ldr	r2, [pc, #344]	@ (8003268 <HAL_DMA_Abort+0x480>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <HAL_DMA_Abort+0x33c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e007      	b.n	8003134 <HAL_DMA_Abort+0x34c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003134:	e013      	b.n	800315e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003136:	f7fe fcd7 	bl	8001ae8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d90c      	bls.n	800315e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2203      	movs	r2, #3
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e12d      	b.n	80033ba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e5      	bne.n	8003136 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2f      	ldr	r2, [pc, #188]	@ (800322c <HAL_DMA_Abort+0x444>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d04a      	beq.n	800320a <HAL_DMA_Abort+0x422>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a2d      	ldr	r2, [pc, #180]	@ (8003230 <HAL_DMA_Abort+0x448>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d045      	beq.n	800320a <HAL_DMA_Abort+0x422>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a2c      	ldr	r2, [pc, #176]	@ (8003234 <HAL_DMA_Abort+0x44c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d040      	beq.n	800320a <HAL_DMA_Abort+0x422>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <HAL_DMA_Abort+0x450>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d03b      	beq.n	800320a <HAL_DMA_Abort+0x422>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a29      	ldr	r2, [pc, #164]	@ (800323c <HAL_DMA_Abort+0x454>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d036      	beq.n	800320a <HAL_DMA_Abort+0x422>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <HAL_DMA_Abort+0x458>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <HAL_DMA_Abort+0x45c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d02c      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <HAL_DMA_Abort+0x460>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d027      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a23      	ldr	r2, [pc, #140]	@ (800324c <HAL_DMA_Abort+0x464>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d022      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a21      	ldr	r2, [pc, #132]	@ (8003250 <HAL_DMA_Abort+0x468>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01d      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a20      	ldr	r2, [pc, #128]	@ (8003254 <HAL_DMA_Abort+0x46c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d018      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <HAL_DMA_Abort+0x470>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1d      	ldr	r2, [pc, #116]	@ (800325c <HAL_DMA_Abort+0x474>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <HAL_DMA_Abort+0x478>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d009      	beq.n	800320a <HAL_DMA_Abort+0x422>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003264 <HAL_DMA_Abort+0x47c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Abort+0x422>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a18      	ldr	r2, [pc, #96]	@ (8003268 <HAL_DMA_Abort+0x480>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_DMA_Abort+0x426>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_DMA_Abort+0x428>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02b      	beq.n	800326c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	223f      	movs	r2, #63	@ 0x3f
 8003224:	409a      	lsls	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	e02a      	b.n	8003282 <HAL_DMA_Abort+0x49a>
 800322c:	40020010 	.word	0x40020010
 8003230:	40020028 	.word	0x40020028
 8003234:	40020040 	.word	0x40020040
 8003238:	40020058 	.word	0x40020058
 800323c:	40020070 	.word	0x40020070
 8003240:	40020088 	.word	0x40020088
 8003244:	400200a0 	.word	0x400200a0
 8003248:	400200b8 	.word	0x400200b8
 800324c:	40020410 	.word	0x40020410
 8003250:	40020428 	.word	0x40020428
 8003254:	40020440 	.word	0x40020440
 8003258:	40020458 	.word	0x40020458
 800325c:	40020470 	.word	0x40020470
 8003260:	40020488 	.word	0x40020488
 8003264:	400204a0 	.word	0x400204a0
 8003268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	2201      	movs	r2, #1
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4f      	ldr	r2, [pc, #316]	@ (80033c4 <HAL_DMA_Abort+0x5dc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d072      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a4d      	ldr	r2, [pc, #308]	@ (80033c8 <HAL_DMA_Abort+0x5e0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d06d      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <HAL_DMA_Abort+0x5e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d068      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a4a      	ldr	r2, [pc, #296]	@ (80033d0 <HAL_DMA_Abort+0x5e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d063      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a49      	ldr	r2, [pc, #292]	@ (80033d4 <HAL_DMA_Abort+0x5ec>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d05e      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a47      	ldr	r2, [pc, #284]	@ (80033d8 <HAL_DMA_Abort+0x5f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d059      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a46      	ldr	r2, [pc, #280]	@ (80033dc <HAL_DMA_Abort+0x5f4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d054      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a44      	ldr	r2, [pc, #272]	@ (80033e0 <HAL_DMA_Abort+0x5f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d04f      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a43      	ldr	r2, [pc, #268]	@ (80033e4 <HAL_DMA_Abort+0x5fc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d04a      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a41      	ldr	r2, [pc, #260]	@ (80033e8 <HAL_DMA_Abort+0x600>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d045      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a40      	ldr	r2, [pc, #256]	@ (80033ec <HAL_DMA_Abort+0x604>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d040      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3e      	ldr	r2, [pc, #248]	@ (80033f0 <HAL_DMA_Abort+0x608>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d03b      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3d      	ldr	r2, [pc, #244]	@ (80033f4 <HAL_DMA_Abort+0x60c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d036      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3b      	ldr	r2, [pc, #236]	@ (80033f8 <HAL_DMA_Abort+0x610>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3a      	ldr	r2, [pc, #232]	@ (80033fc <HAL_DMA_Abort+0x614>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d02c      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a38      	ldr	r2, [pc, #224]	@ (8003400 <HAL_DMA_Abort+0x618>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d027      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a37      	ldr	r2, [pc, #220]	@ (8003404 <HAL_DMA_Abort+0x61c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a35      	ldr	r2, [pc, #212]	@ (8003408 <HAL_DMA_Abort+0x620>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a34      	ldr	r2, [pc, #208]	@ (800340c <HAL_DMA_Abort+0x624>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a32      	ldr	r2, [pc, #200]	@ (8003410 <HAL_DMA_Abort+0x628>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <HAL_DMA_Abort+0x62c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2f      	ldr	r2, [pc, #188]	@ (8003418 <HAL_DMA_Abort+0x630>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a2e      	ldr	r2, [pc, #184]	@ (800341c <HAL_DMA_Abort+0x634>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_DMA_Abort+0x58a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2c      	ldr	r2, [pc, #176]	@ (8003420 <HAL_DMA_Abort+0x638>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Abort+0x58e>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_DMA_Abort+0x590>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003384:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800339c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033a6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40020010 	.word	0x40020010
 80033c8:	40020028 	.word	0x40020028
 80033cc:	40020040 	.word	0x40020040
 80033d0:	40020058 	.word	0x40020058
 80033d4:	40020070 	.word	0x40020070
 80033d8:	40020088 	.word	0x40020088
 80033dc:	400200a0 	.word	0x400200a0
 80033e0:	400200b8 	.word	0x400200b8
 80033e4:	40020410 	.word	0x40020410
 80033e8:	40020428 	.word	0x40020428
 80033ec:	40020440 	.word	0x40020440
 80033f0:	40020458 	.word	0x40020458
 80033f4:	40020470 	.word	0x40020470
 80033f8:	40020488 	.word	0x40020488
 80033fc:	400204a0 	.word	0x400204a0
 8003400:	400204b8 	.word	0x400204b8
 8003404:	58025408 	.word	0x58025408
 8003408:	5802541c 	.word	0x5802541c
 800340c:	58025430 	.word	0x58025430
 8003410:	58025444 	.word	0x58025444
 8003414:	58025458 	.word	0x58025458
 8003418:	5802546c 	.word	0x5802546c
 800341c:	58025480 	.word	0x58025480
 8003420:	58025494 	.word	0x58025494

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e237      	b.n	80038a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d004      	beq.n	800344c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2280      	movs	r2, #128	@ 0x80
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e22c      	b.n	80038a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5c      	ldr	r2, [pc, #368]	@ (80035c4 <HAL_DMA_Abort_IT+0x1a0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d04a      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a5b      	ldr	r2, [pc, #364]	@ (80035c8 <HAL_DMA_Abort_IT+0x1a4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d045      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a59      	ldr	r2, [pc, #356]	@ (80035cc <HAL_DMA_Abort_IT+0x1a8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d040      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a58      	ldr	r2, [pc, #352]	@ (80035d0 <HAL_DMA_Abort_IT+0x1ac>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d03b      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a56      	ldr	r2, [pc, #344]	@ (80035d4 <HAL_DMA_Abort_IT+0x1b0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d036      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a55      	ldr	r2, [pc, #340]	@ (80035d8 <HAL_DMA_Abort_IT+0x1b4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d031      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a53      	ldr	r2, [pc, #332]	@ (80035dc <HAL_DMA_Abort_IT+0x1b8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02c      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a52      	ldr	r2, [pc, #328]	@ (80035e0 <HAL_DMA_Abort_IT+0x1bc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d027      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a50      	ldr	r2, [pc, #320]	@ (80035e4 <HAL_DMA_Abort_IT+0x1c0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d022      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4f      	ldr	r2, [pc, #316]	@ (80035e8 <HAL_DMA_Abort_IT+0x1c4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d01d      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	@ (80035ec <HAL_DMA_Abort_IT+0x1c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a4c      	ldr	r2, [pc, #304]	@ (80035f0 <HAL_DMA_Abort_IT+0x1cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a4a      	ldr	r2, [pc, #296]	@ (80035f4 <HAL_DMA_Abort_IT+0x1d0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a49      	ldr	r2, [pc, #292]	@ (80035f8 <HAL_DMA_Abort_IT+0x1d4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a47      	ldr	r2, [pc, #284]	@ (80035fc <HAL_DMA_Abort_IT+0x1d8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a46      	ldr	r2, [pc, #280]	@ (8003600 <HAL_DMA_Abort_IT+0x1dc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_DMA_Abort_IT+0xcc>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_DMA_Abort_IT+0xce>
 80034f0:	2300      	movs	r3, #0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8086 	beq.w	8003604 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2204      	movs	r2, #4
 80034fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_DMA_Abort_IT+0x1a0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04a      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <HAL_DMA_Abort_IT+0x1a4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d045      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <HAL_DMA_Abort_IT+0x1a8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d040      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2b      	ldr	r2, [pc, #172]	@ (80035d0 <HAL_DMA_Abort_IT+0x1ac>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d03b      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a29      	ldr	r2, [pc, #164]	@ (80035d4 <HAL_DMA_Abort_IT+0x1b0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a28      	ldr	r2, [pc, #160]	@ (80035d8 <HAL_DMA_Abort_IT+0x1b4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a26      	ldr	r2, [pc, #152]	@ (80035dc <HAL_DMA_Abort_IT+0x1b8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02c      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a25      	ldr	r2, [pc, #148]	@ (80035e0 <HAL_DMA_Abort_IT+0x1bc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d027      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <HAL_DMA_Abort_IT+0x1c0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a22      	ldr	r2, [pc, #136]	@ (80035e8 <HAL_DMA_Abort_IT+0x1c4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d01d      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a20      	ldr	r2, [pc, #128]	@ (80035ec <HAL_DMA_Abort_IT+0x1c8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1f      	ldr	r2, [pc, #124]	@ (80035f0 <HAL_DMA_Abort_IT+0x1cc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_DMA_Abort_IT+0x1d0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <HAL_DMA_Abort_IT+0x1d4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_DMA_Abort_IT+0x1d8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_Abort_IT+0x17c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_DMA_Abort_IT+0x1dc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <HAL_DMA_Abort_IT+0x18e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e178      	b.n	80038a4 <HAL_DMA_Abort_IT+0x480>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0201 	bic.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	e16f      	b.n	80038a4 <HAL_DMA_Abort_IT+0x480>
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 020e 	bic.w	r2, r2, #14
 8003612:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6c      	ldr	r2, [pc, #432]	@ (80037cc <HAL_DMA_Abort_IT+0x3a8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d04a      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6b      	ldr	r2, [pc, #428]	@ (80037d0 <HAL_DMA_Abort_IT+0x3ac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d045      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a69      	ldr	r2, [pc, #420]	@ (80037d4 <HAL_DMA_Abort_IT+0x3b0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d040      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a68      	ldr	r2, [pc, #416]	@ (80037d8 <HAL_DMA_Abort_IT+0x3b4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d03b      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a66      	ldr	r2, [pc, #408]	@ (80037dc <HAL_DMA_Abort_IT+0x3b8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d036      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_DMA_Abort_IT+0x3bc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d031      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a63      	ldr	r2, [pc, #396]	@ (80037e4 <HAL_DMA_Abort_IT+0x3c0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d02c      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a62      	ldr	r2, [pc, #392]	@ (80037e8 <HAL_DMA_Abort_IT+0x3c4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d027      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a60      	ldr	r2, [pc, #384]	@ (80037ec <HAL_DMA_Abort_IT+0x3c8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d022      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5f      	ldr	r2, [pc, #380]	@ (80037f0 <HAL_DMA_Abort_IT+0x3cc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d01d      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a5d      	ldr	r2, [pc, #372]	@ (80037f4 <HAL_DMA_Abort_IT+0x3d0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d018      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_DMA_Abort_IT+0x3d4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5a      	ldr	r2, [pc, #360]	@ (80037fc <HAL_DMA_Abort_IT+0x3d8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a59      	ldr	r2, [pc, #356]	@ (8003800 <HAL_DMA_Abort_IT+0x3dc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a57      	ldr	r2, [pc, #348]	@ (8003804 <HAL_DMA_Abort_IT+0x3e0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x290>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a56      	ldr	r2, [pc, #344]	@ (8003808 <HAL_DMA_Abort_IT+0x3e4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d108      	bne.n	80036c6 <HAL_DMA_Abort_IT+0x2a2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e007      	b.n	80036d6 <HAL_DMA_Abort_IT+0x2b2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a3c      	ldr	r2, [pc, #240]	@ (80037cc <HAL_DMA_Abort_IT+0x3a8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d072      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a3a      	ldr	r2, [pc, #232]	@ (80037d0 <HAL_DMA_Abort_IT+0x3ac>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d06d      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a39      	ldr	r2, [pc, #228]	@ (80037d4 <HAL_DMA_Abort_IT+0x3b0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d068      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a37      	ldr	r2, [pc, #220]	@ (80037d8 <HAL_DMA_Abort_IT+0x3b4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d063      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a36      	ldr	r2, [pc, #216]	@ (80037dc <HAL_DMA_Abort_IT+0x3b8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d05e      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a34      	ldr	r2, [pc, #208]	@ (80037e0 <HAL_DMA_Abort_IT+0x3bc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d059      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a33      	ldr	r2, [pc, #204]	@ (80037e4 <HAL_DMA_Abort_IT+0x3c0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d054      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a31      	ldr	r2, [pc, #196]	@ (80037e8 <HAL_DMA_Abort_IT+0x3c4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04f      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a30      	ldr	r2, [pc, #192]	@ (80037ec <HAL_DMA_Abort_IT+0x3c8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a2e      	ldr	r2, [pc, #184]	@ (80037f0 <HAL_DMA_Abort_IT+0x3cc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a2d      	ldr	r2, [pc, #180]	@ (80037f4 <HAL_DMA_Abort_IT+0x3d0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a2b      	ldr	r2, [pc, #172]	@ (80037f8 <HAL_DMA_Abort_IT+0x3d4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2a      	ldr	r2, [pc, #168]	@ (80037fc <HAL_DMA_Abort_IT+0x3d8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a28      	ldr	r2, [pc, #160]	@ (8003800 <HAL_DMA_Abort_IT+0x3dc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a27      	ldr	r2, [pc, #156]	@ (8003804 <HAL_DMA_Abort_IT+0x3e0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <HAL_DMA_Abort_IT+0x3e4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a24      	ldr	r2, [pc, #144]	@ (800380c <HAL_DMA_Abort_IT+0x3e8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <HAL_DMA_Abort_IT+0x3ec>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a21      	ldr	r2, [pc, #132]	@ (8003814 <HAL_DMA_Abort_IT+0x3f0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <HAL_DMA_Abort_IT+0x3f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <HAL_DMA_Abort_IT+0x3f8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <HAL_DMA_Abort_IT+0x3fc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003824 <HAL_DMA_Abort_IT+0x400>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_Abort_IT+0x3a2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_DMA_Abort_IT+0x404>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d132      	bne.n	800382c <HAL_DMA_Abort_IT+0x408>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e031      	b.n	800382e <HAL_DMA_Abort_IT+0x40a>
 80037ca:	bf00      	nop
 80037cc:	40020010 	.word	0x40020010
 80037d0:	40020028 	.word	0x40020028
 80037d4:	40020040 	.word	0x40020040
 80037d8:	40020058 	.word	0x40020058
 80037dc:	40020070 	.word	0x40020070
 80037e0:	40020088 	.word	0x40020088
 80037e4:	400200a0 	.word	0x400200a0
 80037e8:	400200b8 	.word	0x400200b8
 80037ec:	40020410 	.word	0x40020410
 80037f0:	40020428 	.word	0x40020428
 80037f4:	40020440 	.word	0x40020440
 80037f8:	40020458 	.word	0x40020458
 80037fc:	40020470 	.word	0x40020470
 8003800:	40020488 	.word	0x40020488
 8003804:	400204a0 	.word	0x400204a0
 8003808:	400204b8 	.word	0x400204b8
 800380c:	58025408 	.word	0x58025408
 8003810:	5802541c 	.word	0x5802541c
 8003814:	58025430 	.word	0x58025430
 8003818:	58025444 	.word	0x58025444
 800381c:	58025458 	.word	0x58025458
 8003820:	5802546c 	.word	0x5802546c
 8003824:	58025480 	.word	0x58025480
 8003828:	58025494 	.word	0x58025494
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d028      	beq.n	8003884 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003840:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003860:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00c      	beq.n	8003884 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003878:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003882:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop

080038b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	@ 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038bc:	4b67      	ldr	r3, [pc, #412]	@ (8003a5c <HAL_DMA_IRQHandler+0x1ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a67      	ldr	r2, [pc, #412]	@ (8003a60 <HAL_DMA_IRQHandler+0x1b0>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0a9b      	lsrs	r3, r3, #10
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a64 <HAL_DMA_IRQHandler+0x1b4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a68 <HAL_DMA_IRQHandler+0x1b8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a5c      	ldr	r2, [pc, #368]	@ (8003a6c <HAL_DMA_IRQHandler+0x1bc>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a5a      	ldr	r2, [pc, #360]	@ (8003a70 <HAL_DMA_IRQHandler+0x1c0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a59      	ldr	r2, [pc, #356]	@ (8003a74 <HAL_DMA_IRQHandler+0x1c4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a57      	ldr	r2, [pc, #348]	@ (8003a78 <HAL_DMA_IRQHandler+0x1c8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_DMA_IRQHandler+0x1cc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a54      	ldr	r2, [pc, #336]	@ (8003a80 <HAL_DMA_IRQHandler+0x1d0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a53      	ldr	r2, [pc, #332]	@ (8003a84 <HAL_DMA_IRQHandler+0x1d4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a51      	ldr	r2, [pc, #324]	@ (8003a88 <HAL_DMA_IRQHandler+0x1d8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a50      	ldr	r2, [pc, #320]	@ (8003a8c <HAL_DMA_IRQHandler+0x1dc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4e      	ldr	r2, [pc, #312]	@ (8003a90 <HAL_DMA_IRQHandler+0x1e0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_DMA_IRQHandler+0x1e4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a4b      	ldr	r2, [pc, #300]	@ (8003a98 <HAL_DMA_IRQHandler+0x1e8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4a      	ldr	r2, [pc, #296]	@ (8003a9c <HAL_DMA_IRQHandler+0x1ec>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_IRQHandler+0xd2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a48      	ldr	r2, [pc, #288]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1f0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_DMA_IRQHandler+0xd6>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_DMA_IRQHandler+0xd8>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 842b 	beq.w	80041e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2208      	movs	r2, #8
 8003998:	409a      	lsls	r2, r3
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80a2 	beq.w	8003ae8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <HAL_DMA_IRQHandler+0x1b4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <HAL_DMA_IRQHandler+0x1b8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <HAL_DMA_IRQHandler+0x1bc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a70 <HAL_DMA_IRQHandler+0x1c0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_DMA_IRQHandler+0x1c4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_DMA_IRQHandler+0x1c8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a25      	ldr	r2, [pc, #148]	@ (8003a7c <HAL_DMA_IRQHandler+0x1cc>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <HAL_DMA_IRQHandler+0x1d0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a22      	ldr	r2, [pc, #136]	@ (8003a84 <HAL_DMA_IRQHandler+0x1d4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <HAL_DMA_IRQHandler+0x1d8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a8c <HAL_DMA_IRQHandler+0x1dc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <HAL_DMA_IRQHandler+0x1e0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1c      	ldr	r2, [pc, #112]	@ (8003a94 <HAL_DMA_IRQHandler+0x1e4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003a98 <HAL_DMA_IRQHandler+0x1e8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	@ (8003a9c <HAL_DMA_IRQHandler+0x1ec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x194>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a18      	ldr	r2, [pc, #96]	@ (8003aa0 <HAL_DMA_IRQHandler+0x1f0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d12f      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x1f4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e02e      	b.n	8003ab8 <HAL_DMA_IRQHandler+0x208>
 8003a5a:	bf00      	nop
 8003a5c:	24000004 	.word	0x24000004
 8003a60:	1b4e81b5 	.word	0x1b4e81b5
 8003a64:	40020010 	.word	0x40020010
 8003a68:	40020028 	.word	0x40020028
 8003a6c:	40020040 	.word	0x40020040
 8003a70:	40020058 	.word	0x40020058
 8003a74:	40020070 	.word	0x40020070
 8003a78:	40020088 	.word	0x40020088
 8003a7c:	400200a0 	.word	0x400200a0
 8003a80:	400200b8 	.word	0x400200b8
 8003a84:	40020410 	.word	0x40020410
 8003a88:	40020428 	.word	0x40020428
 8003a8c:	40020440 	.word	0x40020440
 8003a90:	40020458 	.word	0x40020458
 8003a94:	40020470 	.word	0x40020470
 8003a98:	40020488 	.word	0x40020488
 8003a9c:	400204a0 	.word	0x400204a0
 8003aa0:	400204b8 	.word	0x400204b8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d06e      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a69      	ldr	r2, [pc, #420]	@ (8003ca8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d04a      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a67      	ldr	r2, [pc, #412]	@ (8003cac <HAL_DMA_IRQHandler+0x3fc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d045      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a66      	ldr	r2, [pc, #408]	@ (8003cb0 <HAL_DMA_IRQHandler+0x400>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d040      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a64      	ldr	r2, [pc, #400]	@ (8003cb4 <HAL_DMA_IRQHandler+0x404>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d03b      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a63      	ldr	r2, [pc, #396]	@ (8003cb8 <HAL_DMA_IRQHandler+0x408>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d036      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a61      	ldr	r2, [pc, #388]	@ (8003cbc <HAL_DMA_IRQHandler+0x40c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d031      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a60      	ldr	r2, [pc, #384]	@ (8003cc0 <HAL_DMA_IRQHandler+0x410>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d02c      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5e      	ldr	r2, [pc, #376]	@ (8003cc4 <HAL_DMA_IRQHandler+0x414>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d027      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc8 <HAL_DMA_IRQHandler+0x418>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5b      	ldr	r2, [pc, #364]	@ (8003ccc <HAL_DMA_IRQHandler+0x41c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01d      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd0 <HAL_DMA_IRQHandler+0x420>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a58      	ldr	r2, [pc, #352]	@ (8003cd4 <HAL_DMA_IRQHandler+0x424>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_DMA_IRQHandler+0x428>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a55      	ldr	r2, [pc, #340]	@ (8003cdc <HAL_DMA_IRQHandler+0x42c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a54      	ldr	r2, [pc, #336]	@ (8003ce0 <HAL_DMA_IRQHandler+0x430>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2ee>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a52      	ldr	r2, [pc, #328]	@ (8003ce4 <HAL_DMA_IRQHandler+0x434>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x304>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf14      	ite	ne
 8003bac:	2301      	movne	r3, #1
 8003bae:	2300      	moveq	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e003      	b.n	8003bbc <HAL_DMA_IRQHandler+0x30c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	2201      	movs	r2, #1
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd4:	f043 0202 	orr.w	r2, r3, #2
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2204      	movs	r2, #4
 8003be6:	409a      	lsls	r2, r3
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 808f 	beq.w	8003d10 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca8 <HAL_DMA_IRQHandler+0x3f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d04a      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <HAL_DMA_IRQHandler+0x3fc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d045      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a29      	ldr	r2, [pc, #164]	@ (8003cb0 <HAL_DMA_IRQHandler+0x400>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d040      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <HAL_DMA_IRQHandler+0x404>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d03b      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a26      	ldr	r2, [pc, #152]	@ (8003cb8 <HAL_DMA_IRQHandler+0x408>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d036      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a24      	ldr	r2, [pc, #144]	@ (8003cbc <HAL_DMA_IRQHandler+0x40c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d031      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a23      	ldr	r2, [pc, #140]	@ (8003cc0 <HAL_DMA_IRQHandler+0x410>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d02c      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a21      	ldr	r2, [pc, #132]	@ (8003cc4 <HAL_DMA_IRQHandler+0x414>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d027      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a20      	ldr	r2, [pc, #128]	@ (8003cc8 <HAL_DMA_IRQHandler+0x418>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1e      	ldr	r2, [pc, #120]	@ (8003ccc <HAL_DMA_IRQHandler+0x41c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01d      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd0 <HAL_DMA_IRQHandler+0x420>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <HAL_DMA_IRQHandler+0x424>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_DMA_IRQHandler+0x428>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a18      	ldr	r2, [pc, #96]	@ (8003cdc <HAL_DMA_IRQHandler+0x42c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a17      	ldr	r2, [pc, #92]	@ (8003ce0 <HAL_DMA_IRQHandler+0x430>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x3e2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <HAL_DMA_IRQHandler+0x434>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d12a      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x438>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e023      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x440>
 8003ca8:	40020010 	.word	0x40020010
 8003cac:	40020028 	.word	0x40020028
 8003cb0:	40020040 	.word	0x40020040
 8003cb4:	40020058 	.word	0x40020058
 8003cb8:	40020070 	.word	0x40020070
 8003cbc:	40020088 	.word	0x40020088
 8003cc0:	400200a0 	.word	0x400200a0
 8003cc4:	400200b8 	.word	0x400200b8
 8003cc8:	40020410 	.word	0x40020410
 8003ccc:	40020428 	.word	0x40020428
 8003cd0:	40020440 	.word	0x40020440
 8003cd4:	40020458 	.word	0x40020458
 8003cd8:	40020470 	.word	0x40020470
 8003cdc:	40020488 	.word	0x40020488
 8003ce0:	400204a0 	.word	0x400204a0
 8003ce4:	400204b8 	.word	0x400204b8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	f043 0204 	orr.w	r2, r3, #4
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2210      	movs	r2, #16
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80a6 	beq.w	8003e72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <HAL_DMA_IRQHandler+0x690>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a83      	ldr	r2, [pc, #524]	@ (8003f44 <HAL_DMA_IRQHandler+0x694>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a82      	ldr	r2, [pc, #520]	@ (8003f48 <HAL_DMA_IRQHandler+0x698>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a80      	ldr	r2, [pc, #512]	@ (8003f4c <HAL_DMA_IRQHandler+0x69c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7f      	ldr	r2, [pc, #508]	@ (8003f50 <HAL_DMA_IRQHandler+0x6a0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7d      	ldr	r2, [pc, #500]	@ (8003f54 <HAL_DMA_IRQHandler+0x6a4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7c      	ldr	r2, [pc, #496]	@ (8003f58 <HAL_DMA_IRQHandler+0x6a8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a7a      	ldr	r2, [pc, #488]	@ (8003f5c <HAL_DMA_IRQHandler+0x6ac>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a79      	ldr	r2, [pc, #484]	@ (8003f60 <HAL_DMA_IRQHandler+0x6b0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a77      	ldr	r2, [pc, #476]	@ (8003f64 <HAL_DMA_IRQHandler+0x6b4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a76      	ldr	r2, [pc, #472]	@ (8003f68 <HAL_DMA_IRQHandler+0x6b8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a74      	ldr	r2, [pc, #464]	@ (8003f6c <HAL_DMA_IRQHandler+0x6bc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a73      	ldr	r2, [pc, #460]	@ (8003f70 <HAL_DMA_IRQHandler+0x6c0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a71      	ldr	r2, [pc, #452]	@ (8003f74 <HAL_DMA_IRQHandler+0x6c4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a70      	ldr	r2, [pc, #448]	@ (8003f78 <HAL_DMA_IRQHandler+0x6c8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x516>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f7c <HAL_DMA_IRQHandler+0x6cc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10a      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x52c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e009      	b.n	8003df0 <HAL_DMA_IRQHandler+0x540>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d024      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4798      	blx	r3
 8003e30:	e01f      	b.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
 8003e42:	e016      	b.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8110 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f40 <HAL_DMA_IRQHandler+0x690>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d04a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a2b      	ldr	r2, [pc, #172]	@ (8003f44 <HAL_DMA_IRQHandler+0x694>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d045      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	@ (8003f48 <HAL_DMA_IRQHandler+0x698>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d040      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <HAL_DMA_IRQHandler+0x69c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d03b      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a26      	ldr	r2, [pc, #152]	@ (8003f50 <HAL_DMA_IRQHandler+0x6a0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d036      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a25      	ldr	r2, [pc, #148]	@ (8003f54 <HAL_DMA_IRQHandler+0x6a4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d031      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	@ (8003f58 <HAL_DMA_IRQHandler+0x6a8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02c      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a22      	ldr	r2, [pc, #136]	@ (8003f5c <HAL_DMA_IRQHandler+0x6ac>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d027      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a20      	ldr	r2, [pc, #128]	@ (8003f60 <HAL_DMA_IRQHandler+0x6b0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d022      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <HAL_DMA_IRQHandler+0x6b4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d01d      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f68 <HAL_DMA_IRQHandler+0x6b8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_DMA_IRQHandler+0x6bc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <HAL_DMA_IRQHandler+0x6c0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_DMA_IRQHandler+0x6c4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <HAL_DMA_IRQHandler+0x6c8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x678>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <HAL_DMA_IRQHandler+0x6cc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d12b      	bne.n	8003f80 <HAL_DMA_IRQHandler+0x6d0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e02a      	b.n	8003f94 <HAL_DMA_IRQHandler+0x6e4>
 8003f3e:	bf00      	nop
 8003f40:	40020010 	.word	0x40020010
 8003f44:	40020028 	.word	0x40020028
 8003f48:	40020040 	.word	0x40020040
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	40020070 	.word	0x40020070
 8003f54:	40020088 	.word	0x40020088
 8003f58:	400200a0 	.word	0x400200a0
 8003f5c:	400200b8 	.word	0x400200b8
 8003f60:	40020410 	.word	0x40020410
 8003f64:	40020428 	.word	0x40020428
 8003f68:	40020440 	.word	0x40020440
 8003f6c:	40020458 	.word	0x40020458
 8003f70:	40020470 	.word	0x40020470
 8003f74:	40020488 	.word	0x40020488
 8003f78:	400204a0 	.word	0x400204a0
 8003f7c:	400204b8 	.word	0x400204b8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8087 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d139      	bne.n	800402a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0216 	bic.w	r2, r2, #22
 8003fc4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <HAL_DMA_IRQHandler+0x736>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0208 	bic.w	r2, r2, #8
 8003ff4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	223f      	movs	r2, #63	@ 0x3f
 8004000:	409a      	lsls	r2, r3
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 834a 	beq.w	80046b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4798      	blx	r3
          }
          return;
 8004028:	e344      	b.n	80046b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02c      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e027      	b.n	80040a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d023      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
 8004068:	e01e      	b.n	80040a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10f      	bne.n	8004098 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0210 	bic.w	r2, r2, #16
 8004086:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8306 	beq.w	80046be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8088 	beq.w	80041d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2204      	movs	r2, #4
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7a      	ldr	r2, [pc, #488]	@ (80042b8 <HAL_DMA_IRQHandler+0xa08>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d04a      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a79      	ldr	r2, [pc, #484]	@ (80042bc <HAL_DMA_IRQHandler+0xa0c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d045      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a77      	ldr	r2, [pc, #476]	@ (80042c0 <HAL_DMA_IRQHandler+0xa10>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d040      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a76      	ldr	r2, [pc, #472]	@ (80042c4 <HAL_DMA_IRQHandler+0xa14>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d03b      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a74      	ldr	r2, [pc, #464]	@ (80042c8 <HAL_DMA_IRQHandler+0xa18>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d036      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a73      	ldr	r2, [pc, #460]	@ (80042cc <HAL_DMA_IRQHandler+0xa1c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d031      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a71      	ldr	r2, [pc, #452]	@ (80042d0 <HAL_DMA_IRQHandler+0xa20>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d02c      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a70      	ldr	r2, [pc, #448]	@ (80042d4 <HAL_DMA_IRQHandler+0xa24>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d027      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a6e      	ldr	r2, [pc, #440]	@ (80042d8 <HAL_DMA_IRQHandler+0xa28>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6d      	ldr	r2, [pc, #436]	@ (80042dc <HAL_DMA_IRQHandler+0xa2c>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d01d      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a6b      	ldr	r2, [pc, #428]	@ (80042e0 <HAL_DMA_IRQHandler+0xa30>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6a      	ldr	r2, [pc, #424]	@ (80042e4 <HAL_DMA_IRQHandler+0xa34>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a68      	ldr	r2, [pc, #416]	@ (80042e8 <HAL_DMA_IRQHandler+0xa38>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a67      	ldr	r2, [pc, #412]	@ (80042ec <HAL_DMA_IRQHandler+0xa3c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a65      	ldr	r2, [pc, #404]	@ (80042f0 <HAL_DMA_IRQHandler+0xa40>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_DMA_IRQHandler+0x8b8>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a64      	ldr	r2, [pc, #400]	@ (80042f4 <HAL_DMA_IRQHandler+0xa44>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d108      	bne.n	800417a <HAL_DMA_IRQHandler+0x8ca>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0201 	bic.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <HAL_DMA_IRQHandler+0x8da>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004192:	429a      	cmp	r2, r3
 8004194:	d307      	bcc.n	80041a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f2      	bne.n	800418a <HAL_DMA_IRQHandler+0x8da>
 80041a4:	e000      	b.n	80041a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80041a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80041be:	e003      	b.n	80041c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8272 	beq.w	80046be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	4798      	blx	r3
 80041e2:	e26c      	b.n	80046be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a43      	ldr	r2, [pc, #268]	@ (80042f8 <HAL_DMA_IRQHandler+0xa48>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a42      	ldr	r2, [pc, #264]	@ (80042fc <HAL_DMA_IRQHandler+0xa4c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a40      	ldr	r2, [pc, #256]	@ (8004300 <HAL_DMA_IRQHandler+0xa50>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a3f      	ldr	r2, [pc, #252]	@ (8004304 <HAL_DMA_IRQHandler+0xa54>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a3d      	ldr	r2, [pc, #244]	@ (8004308 <HAL_DMA_IRQHandler+0xa58>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3c      	ldr	r2, [pc, #240]	@ (800430c <HAL_DMA_IRQHandler+0xa5c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3a      	ldr	r2, [pc, #232]	@ (8004310 <HAL_DMA_IRQHandler+0xa60>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_DMA_IRQHandler+0x984>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a39      	ldr	r2, [pc, #228]	@ (8004314 <HAL_DMA_IRQHandler+0xa64>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_DMA_IRQHandler+0x988>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_DMA_IRQHandler+0x98a>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 823f 	beq.w	80046be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2204      	movs	r2, #4
 8004252:	409a      	lsls	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4013      	ands	r3, r2
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80cd 	beq.w	80043f8 <HAL_DMA_IRQHandler+0xb48>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80c7 	beq.w	80043f8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2204      	movs	r2, #4
 8004274:	409a      	lsls	r2, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d049      	beq.n	8004318 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8210 	beq.w	80046b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042a0:	e20a      	b.n	80046b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8206 	beq.w	80046b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b4:	e200      	b.n	80046b8 <HAL_DMA_IRQHandler+0xe08>
 80042b6:	bf00      	nop
 80042b8:	40020010 	.word	0x40020010
 80042bc:	40020028 	.word	0x40020028
 80042c0:	40020040 	.word	0x40020040
 80042c4:	40020058 	.word	0x40020058
 80042c8:	40020070 	.word	0x40020070
 80042cc:	40020088 	.word	0x40020088
 80042d0:	400200a0 	.word	0x400200a0
 80042d4:	400200b8 	.word	0x400200b8
 80042d8:	40020410 	.word	0x40020410
 80042dc:	40020428 	.word	0x40020428
 80042e0:	40020440 	.word	0x40020440
 80042e4:	40020458 	.word	0x40020458
 80042e8:	40020470 	.word	0x40020470
 80042ec:	40020488 	.word	0x40020488
 80042f0:	400204a0 	.word	0x400204a0
 80042f4:	400204b8 	.word	0x400204b8
 80042f8:	58025408 	.word	0x58025408
 80042fc:	5802541c 	.word	0x5802541c
 8004300:	58025430 	.word	0x58025430
 8004304:	58025444 	.word	0x58025444
 8004308:	58025458 	.word	0x58025458
 800430c:	5802546c 	.word	0x5802546c
 8004310:	58025480 	.word	0x58025480
 8004314:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d160      	bne.n	80043e4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7f      	ldr	r2, [pc, #508]	@ (8004524 <HAL_DMA_IRQHandler+0xc74>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d04a      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7d      	ldr	r2, [pc, #500]	@ (8004528 <HAL_DMA_IRQHandler+0xc78>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d045      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7c      	ldr	r2, [pc, #496]	@ (800452c <HAL_DMA_IRQHandler+0xc7c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d040      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7a      	ldr	r2, [pc, #488]	@ (8004530 <HAL_DMA_IRQHandler+0xc80>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d03b      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a79      	ldr	r2, [pc, #484]	@ (8004534 <HAL_DMA_IRQHandler+0xc84>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d036      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a77      	ldr	r2, [pc, #476]	@ (8004538 <HAL_DMA_IRQHandler+0xc88>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d031      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a76      	ldr	r2, [pc, #472]	@ (800453c <HAL_DMA_IRQHandler+0xc8c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d02c      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a74      	ldr	r2, [pc, #464]	@ (8004540 <HAL_DMA_IRQHandler+0xc90>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d027      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	@ (8004544 <HAL_DMA_IRQHandler+0xc94>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d022      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a71      	ldr	r2, [pc, #452]	@ (8004548 <HAL_DMA_IRQHandler+0xc98>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01d      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a70      	ldr	r2, [pc, #448]	@ (800454c <HAL_DMA_IRQHandler+0xc9c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d018      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6e      	ldr	r2, [pc, #440]	@ (8004550 <HAL_DMA_IRQHandler+0xca0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6d      	ldr	r2, [pc, #436]	@ (8004554 <HAL_DMA_IRQHandler+0xca4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00e      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004558 <HAL_DMA_IRQHandler+0xca8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6a      	ldr	r2, [pc, #424]	@ (800455c <HAL_DMA_IRQHandler+0xcac>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xb12>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a68      	ldr	r2, [pc, #416]	@ (8004560 <HAL_DMA_IRQHandler+0xcb0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <HAL_DMA_IRQHandler+0xb24>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0208 	bic.w	r2, r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e007      	b.n	80043e4 <HAL_DMA_IRQHandler+0xb34>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0204 	bic.w	r2, r2, #4
 80043e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8165 	beq.w	80046b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043f6:	e15f      	b.n	80046b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2202      	movs	r2, #2
 8004402:	409a      	lsls	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80c5 	beq.w	8004598 <HAL_DMA_IRQHandler+0xce8>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80bf 	beq.w	8004598 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	2202      	movs	r2, #2
 8004424:	409a      	lsls	r2, r3
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d018      	beq.n	8004466 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 813a 	beq.w	80046bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004450:	e134      	b.n	80046bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8130 	beq.w	80046bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004464:	e12a      	b.n	80046bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8089 	bne.w	8004584 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <HAL_DMA_IRQHandler+0xc74>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d04a      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a29      	ldr	r2, [pc, #164]	@ (8004528 <HAL_DMA_IRQHandler+0xc78>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d045      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a28      	ldr	r2, [pc, #160]	@ (800452c <HAL_DMA_IRQHandler+0xc7c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d040      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a26      	ldr	r2, [pc, #152]	@ (8004530 <HAL_DMA_IRQHandler+0xc80>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d03b      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a25      	ldr	r2, [pc, #148]	@ (8004534 <HAL_DMA_IRQHandler+0xc84>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d036      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a23      	ldr	r2, [pc, #140]	@ (8004538 <HAL_DMA_IRQHandler+0xc88>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d031      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a22      	ldr	r2, [pc, #136]	@ (800453c <HAL_DMA_IRQHandler+0xc8c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d02c      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a20      	ldr	r2, [pc, #128]	@ (8004540 <HAL_DMA_IRQHandler+0xc90>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d027      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <HAL_DMA_IRQHandler+0xc94>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d022      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <HAL_DMA_IRQHandler+0xc98>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01d      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <HAL_DMA_IRQHandler+0xc9c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d018      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004550 <HAL_DMA_IRQHandler+0xca0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_DMA_IRQHandler+0xca4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <HAL_DMA_IRQHandler+0xca8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a16      	ldr	r2, [pc, #88]	@ (800455c <HAL_DMA_IRQHandler+0xcac>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_DMA_IRQHandler+0xc62>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <HAL_DMA_IRQHandler+0xcb0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d128      	bne.n	8004564 <HAL_DMA_IRQHandler+0xcb4>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0214 	bic.w	r2, r2, #20
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e027      	b.n	8004574 <HAL_DMA_IRQHandler+0xcc4>
 8004524:	40020010 	.word	0x40020010
 8004528:	40020028 	.word	0x40020028
 800452c:	40020040 	.word	0x40020040
 8004530:	40020058 	.word	0x40020058
 8004534:	40020070 	.word	0x40020070
 8004538:	40020088 	.word	0x40020088
 800453c:	400200a0 	.word	0x400200a0
 8004540:	400200b8 	.word	0x400200b8
 8004544:	40020410 	.word	0x40020410
 8004548:	40020428 	.word	0x40020428
 800454c:	40020440 	.word	0x40020440
 8004550:	40020458 	.word	0x40020458
 8004554:	40020470 	.word	0x40020470
 8004558:	40020488 	.word	0x40020488
 800455c:	400204a0 	.word	0x400204a0
 8004560:	400204b8 	.word	0x400204b8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 020a 	bic.w	r2, r2, #10
 8004572:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8097 	beq.w	80046bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004596:	e091      	b.n	80046bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2208      	movs	r2, #8
 80045a2:	409a      	lsls	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8088 	beq.w	80046be <HAL_DMA_IRQHandler+0xe0e>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8082 	beq.w	80046be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a41      	ldr	r2, [pc, #260]	@ (80046c4 <HAL_DMA_IRQHandler+0xe14>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d04a      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a3f      	ldr	r2, [pc, #252]	@ (80046c8 <HAL_DMA_IRQHandler+0xe18>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d045      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a3e      	ldr	r2, [pc, #248]	@ (80046cc <HAL_DMA_IRQHandler+0xe1c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d040      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3c      	ldr	r2, [pc, #240]	@ (80046d0 <HAL_DMA_IRQHandler+0xe20>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d03b      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3b      	ldr	r2, [pc, #236]	@ (80046d4 <HAL_DMA_IRQHandler+0xe24>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d036      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a39      	ldr	r2, [pc, #228]	@ (80046d8 <HAL_DMA_IRQHandler+0xe28>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d031      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a38      	ldr	r2, [pc, #224]	@ (80046dc <HAL_DMA_IRQHandler+0xe2c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d02c      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a36      	ldr	r2, [pc, #216]	@ (80046e0 <HAL_DMA_IRQHandler+0xe30>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d027      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a35      	ldr	r2, [pc, #212]	@ (80046e4 <HAL_DMA_IRQHandler+0xe34>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a33      	ldr	r2, [pc, #204]	@ (80046e8 <HAL_DMA_IRQHandler+0xe38>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a32      	ldr	r2, [pc, #200]	@ (80046ec <HAL_DMA_IRQHandler+0xe3c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a30      	ldr	r2, [pc, #192]	@ (80046f0 <HAL_DMA_IRQHandler+0xe40>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2f      	ldr	r2, [pc, #188]	@ (80046f4 <HAL_DMA_IRQHandler+0xe44>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2d      	ldr	r2, [pc, #180]	@ (80046f8 <HAL_DMA_IRQHandler+0xe48>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2c      	ldr	r2, [pc, #176]	@ (80046fc <HAL_DMA_IRQHandler+0xe4c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_DMA_IRQHandler+0xdaa>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2a      	ldr	r2, [pc, #168]	@ (8004700 <HAL_DMA_IRQHandler+0xe50>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d108      	bne.n	800466c <HAL_DMA_IRQHandler+0xdbc>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 021c 	bic.w	r2, r2, #28
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e007      	b.n	800467c <HAL_DMA_IRQHandler+0xdcc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 020e 	bic.w	r2, r2, #14
 800467a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2201      	movs	r2, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
 80046b2:	e004      	b.n	80046be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80046b4:	bf00      	nop
 80046b6:	e002      	b.n	80046be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8

08004704 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7f      	ldr	r2, [pc, #508]	@ (8004920 <DMA_SetConfig+0x21c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d072      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7d      	ldr	r2, [pc, #500]	@ (8004924 <DMA_SetConfig+0x220>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d06d      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7c      	ldr	r2, [pc, #496]	@ (8004928 <DMA_SetConfig+0x224>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d068      	beq.n	800480e <DMA_SetConfig+0x10a>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7a      	ldr	r2, [pc, #488]	@ (800492c <DMA_SetConfig+0x228>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d063      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a79      	ldr	r2, [pc, #484]	@ (8004930 <DMA_SetConfig+0x22c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d05e      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a77      	ldr	r2, [pc, #476]	@ (8004934 <DMA_SetConfig+0x230>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d059      	beq.n	800480e <DMA_SetConfig+0x10a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a76      	ldr	r2, [pc, #472]	@ (8004938 <DMA_SetConfig+0x234>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d054      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a74      	ldr	r2, [pc, #464]	@ (800493c <DMA_SetConfig+0x238>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d04f      	beq.n	800480e <DMA_SetConfig+0x10a>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	@ (8004940 <DMA_SetConfig+0x23c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a71      	ldr	r2, [pc, #452]	@ (8004944 <DMA_SetConfig+0x240>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	@ (8004948 <DMA_SetConfig+0x244>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <DMA_SetConfig+0x10a>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6e      	ldr	r2, [pc, #440]	@ (800494c <DMA_SetConfig+0x248>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6d      	ldr	r2, [pc, #436]	@ (8004950 <DMA_SetConfig+0x24c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004954 <DMA_SetConfig+0x250>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004958 <DMA_SetConfig+0x254>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <DMA_SetConfig+0x258>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <DMA_SetConfig+0x25c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a65      	ldr	r2, [pc, #404]	@ (8004964 <DMA_SetConfig+0x260>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a64      	ldr	r2, [pc, #400]	@ (8004968 <DMA_SetConfig+0x264>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a62      	ldr	r2, [pc, #392]	@ (800496c <DMA_SetConfig+0x268>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a61      	ldr	r2, [pc, #388]	@ (8004970 <DMA_SetConfig+0x26c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004974 <DMA_SetConfig+0x270>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <DMA_SetConfig+0x10a>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004978 <DMA_SetConfig+0x274>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <DMA_SetConfig+0x10a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5c      	ldr	r2, [pc, #368]	@ (800497c <DMA_SetConfig+0x278>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <DMA_SetConfig+0x10e>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <DMA_SetConfig+0x110>
 8004812:	2300      	movs	r3, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004820:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004832:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a39      	ldr	r2, [pc, #228]	@ (8004920 <DMA_SetConfig+0x21c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d04a      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <DMA_SetConfig+0x220>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d045      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a36      	ldr	r2, [pc, #216]	@ (8004928 <DMA_SetConfig+0x224>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d040      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a35      	ldr	r2, [pc, #212]	@ (800492c <DMA_SetConfig+0x228>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d03b      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <DMA_SetConfig+0x22c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d036      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a32      	ldr	r2, [pc, #200]	@ (8004934 <DMA_SetConfig+0x230>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d031      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	@ (8004938 <DMA_SetConfig+0x234>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02c      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2f      	ldr	r2, [pc, #188]	@ (800493c <DMA_SetConfig+0x238>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d027      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <DMA_SetConfig+0x23c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2c      	ldr	r2, [pc, #176]	@ (8004944 <DMA_SetConfig+0x240>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d01d      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2a      	ldr	r2, [pc, #168]	@ (8004948 <DMA_SetConfig+0x244>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a29      	ldr	r2, [pc, #164]	@ (800494c <DMA_SetConfig+0x248>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <DMA_SetConfig+0x24c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a26      	ldr	r2, [pc, #152]	@ (8004954 <DMA_SetConfig+0x250>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <DMA_SetConfig+0x254>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <DMA_SetConfig+0x1d0>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a23      	ldr	r2, [pc, #140]	@ (800495c <DMA_SetConfig+0x258>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d101      	bne.n	80048d8 <DMA_SetConfig+0x1d4>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <DMA_SetConfig+0x1d6>
 80048d8:	2300      	movs	r3, #0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d059      	beq.n	8004992 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	223f      	movs	r2, #63	@ 0x3f
 80048e8:	409a      	lsls	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b40      	cmp	r3, #64	@ 0x40
 800490c:	d138      	bne.n	8004980 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800491e:	e086      	b.n	8004a2e <DMA_SetConfig+0x32a>
 8004920:	40020010 	.word	0x40020010
 8004924:	40020028 	.word	0x40020028
 8004928:	40020040 	.word	0x40020040
 800492c:	40020058 	.word	0x40020058
 8004930:	40020070 	.word	0x40020070
 8004934:	40020088 	.word	0x40020088
 8004938:	400200a0 	.word	0x400200a0
 800493c:	400200b8 	.word	0x400200b8
 8004940:	40020410 	.word	0x40020410
 8004944:	40020428 	.word	0x40020428
 8004948:	40020440 	.word	0x40020440
 800494c:	40020458 	.word	0x40020458
 8004950:	40020470 	.word	0x40020470
 8004954:	40020488 	.word	0x40020488
 8004958:	400204a0 	.word	0x400204a0
 800495c:	400204b8 	.word	0x400204b8
 8004960:	58025408 	.word	0x58025408
 8004964:	5802541c 	.word	0x5802541c
 8004968:	58025430 	.word	0x58025430
 800496c:	58025444 	.word	0x58025444
 8004970:	58025458 	.word	0x58025458
 8004974:	5802546c 	.word	0x5802546c
 8004978:	58025480 	.word	0x58025480
 800497c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	60da      	str	r2, [r3, #12]
}
 8004990:	e04d      	b.n	8004a2e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a29      	ldr	r2, [pc, #164]	@ (8004a3c <DMA_SetConfig+0x338>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a27      	ldr	r2, [pc, #156]	@ (8004a40 <DMA_SetConfig+0x33c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a26      	ldr	r2, [pc, #152]	@ (8004a44 <DMA_SetConfig+0x340>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a24      	ldr	r2, [pc, #144]	@ (8004a48 <DMA_SetConfig+0x344>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <DMA_SetConfig+0x348>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a21      	ldr	r2, [pc, #132]	@ (8004a50 <DMA_SetConfig+0x34c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a20      	ldr	r2, [pc, #128]	@ (8004a54 <DMA_SetConfig+0x350>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <DMA_SetConfig+0x2de>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a58 <DMA_SetConfig+0x354>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <DMA_SetConfig+0x2e2>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <DMA_SetConfig+0x2e4>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2201      	movs	r2, #1
 80049f6:	409a      	lsls	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b40      	cmp	r3, #64	@ 0x40
 8004a0a:	d108      	bne.n	8004a1e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	60da      	str	r2, [r3, #12]
}
 8004a1c:	e007      	b.n	8004a2e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	60da      	str	r2, [r3, #12]
}
 8004a2e:	bf00      	nop
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	58025408 	.word	0x58025408
 8004a40:	5802541c 	.word	0x5802541c
 8004a44:	58025430 	.word	0x58025430
 8004a48:	58025444 	.word	0x58025444
 8004a4c:	58025458 	.word	0x58025458
 8004a50:	5802546c 	.word	0x5802546c
 8004a54:	58025480 	.word	0x58025480
 8004a58:	58025494 	.word	0x58025494

08004a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a42      	ldr	r2, [pc, #264]	@ (8004b74 <DMA_CalcBaseAndBitshift+0x118>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a41      	ldr	r2, [pc, #260]	@ (8004b78 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <DMA_CalcBaseAndBitshift+0x120>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3e      	ldr	r2, [pc, #248]	@ (8004b80 <DMA_CalcBaseAndBitshift+0x124>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3c      	ldr	r2, [pc, #240]	@ (8004b84 <DMA_CalcBaseAndBitshift+0x128>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b88 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a39      	ldr	r2, [pc, #228]	@ (8004b8c <DMA_CalcBaseAndBitshift+0x130>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a38      	ldr	r2, [pc, #224]	@ (8004b90 <DMA_CalcBaseAndBitshift+0x134>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a36      	ldr	r2, [pc, #216]	@ (8004b94 <DMA_CalcBaseAndBitshift+0x138>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a33      	ldr	r2, [pc, #204]	@ (8004b9c <DMA_CalcBaseAndBitshift+0x140>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a32      	ldr	r2, [pc, #200]	@ (8004ba0 <DMA_CalcBaseAndBitshift+0x144>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a30      	ldr	r2, [pc, #192]	@ (8004ba4 <DMA_CalcBaseAndBitshift+0x148>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	@ (8004bac <DMA_CalcBaseAndBitshift+0x150>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <DMA_CalcBaseAndBitshift+0xa8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb0 <DMA_CalcBaseAndBitshift+0x154>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d101      	bne.n	8004b08 <DMA_CalcBaseAndBitshift+0xac>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <DMA_CalcBaseAndBitshift+0xae>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d024      	beq.n	8004b58 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3b10      	subs	r3, #16
 8004b16:	4a27      	ldr	r2, [pc, #156]	@ (8004bb4 <DMA_CalcBaseAndBitshift+0x158>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	091b      	lsrs	r3, r3, #4
 8004b1e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	4a24      	ldr	r2, [pc, #144]	@ (8004bb8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d908      	bls.n	8004b48 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bbc <DMA_CalcBaseAndBitshift+0x160>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b46:	e00d      	b.n	8004b64 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <DMA_CalcBaseAndBitshift+0x160>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b56:	e005      	b.n	8004b64 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40020010 	.word	0x40020010
 8004b78:	40020028 	.word	0x40020028
 8004b7c:	40020040 	.word	0x40020040
 8004b80:	40020058 	.word	0x40020058
 8004b84:	40020070 	.word	0x40020070
 8004b88:	40020088 	.word	0x40020088
 8004b8c:	400200a0 	.word	0x400200a0
 8004b90:	400200b8 	.word	0x400200b8
 8004b94:	40020410 	.word	0x40020410
 8004b98:	40020428 	.word	0x40020428
 8004b9c:	40020440 	.word	0x40020440
 8004ba0:	40020458 	.word	0x40020458
 8004ba4:	40020470 	.word	0x40020470
 8004ba8:	40020488 	.word	0x40020488
 8004bac:	400204a0 	.word	0x400204a0
 8004bb0:	400204b8 	.word	0x400204b8
 8004bb4:	aaaaaaab 	.word	0xaaaaaaab
 8004bb8:	0800b478 	.word	0x0800b478
 8004bbc:	fffffc00 	.word	0xfffffc00

08004bc0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d120      	bne.n	8004c16 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	2b03      	cmp	r3, #3
 8004bda:	d858      	bhi.n	8004c8e <DMA_CheckFifoParam+0xce>
 8004bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <DMA_CheckFifoParam+0x24>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c07 	.word	0x08004c07
 8004bec:	08004bf5 	.word	0x08004bf5
 8004bf0:	08004c8f 	.word	0x08004c8f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d048      	beq.n	8004c92 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c04:	e045      	b.n	8004c92 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c0e:	d142      	bne.n	8004c96 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c14:	e03f      	b.n	8004c96 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c1e:	d123      	bne.n	8004c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d838      	bhi.n	8004c9a <DMA_CheckFifoParam+0xda>
 8004c28:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <DMA_CheckFifoParam+0x70>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c47 	.word	0x08004c47
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004c59 	.word	0x08004c59
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
        break;
 8004c44:	e030      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d025      	beq.n	8004c9e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c56:	e022      	b.n	8004c9e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c60:	d11f      	bne.n	8004ca2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c66:	e01c      	b.n	8004ca2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d902      	bls.n	8004c76 <DMA_CheckFifoParam+0xb6>
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d003      	beq.n	8004c7c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c74:	e018      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7a:	e015      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8004c8c:	e00b      	b.n	8004ca6 <DMA_CheckFifoParam+0xe6>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e00a      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8004c92:	bf00      	nop
 8004c94:	e008      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8004c96:	bf00      	nop
 8004c98:	e006      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e004      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8004c9e:	bf00      	nop
 8004ca0:	e002      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ca2:	bf00      	nop
 8004ca4:	e000      	b.n	8004ca8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ca6:	bf00      	nop
    }
  }

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop

08004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d022      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a36      	ldr	r2, [pc, #216]	@ (8004db0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01d      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d018      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a33      	ldr	r2, [pc, #204]	@ (8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00e      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	@ (8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d009      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d004      	beq.n	8004d16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d101      	bne.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01a      	beq.n	8004d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	3b08      	subs	r3, #8
 8004d28:	4a28      	ldr	r2, [pc, #160]	@ (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4b26      	ldr	r3, [pc, #152]	@ (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d44:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d54:	e024      	b.n	8004da0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b10      	subs	r3, #16
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d806      	bhi.n	8004d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d902      	bls.n	8004d7e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	2201      	movs	r2, #1
 8004d9a:	409a      	lsls	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	58025408 	.word	0x58025408
 8004db0:	5802541c 	.word	0x5802541c
 8004db4:	58025430 	.word	0x58025430
 8004db8:	58025444 	.word	0x58025444
 8004dbc:	58025458 	.word	0x58025458
 8004dc0:	5802546c 	.word	0x5802546c
 8004dc4:	58025480 	.word	0x58025480
 8004dc8:	58025494 	.word	0x58025494
 8004dcc:	cccccccd 	.word	0xcccccccd
 8004dd0:	16009600 	.word	0x16009600
 8004dd4:	58025880 	.word	0x58025880
 8004dd8:	aaaaaaab 	.word	0xaaaaaaab
 8004ddc:	400204b8 	.word	0x400204b8
 8004de0:	4002040f 	.word	0x4002040f
 8004de4:	10008200 	.word	0x10008200
 8004de8:	40020880 	.word	0x40020880

08004dec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d04a      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d847      	bhi.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a22      	ldr	r2, [pc, #136]	@ (8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	@ (8004eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4b17      	ldr	r3, [pc, #92]	@ (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e74:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e76:	e009      	b.n	8004e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a11      	ldr	r2, [pc, #68]	@ (8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	2201      	movs	r2, #1
 8004e92:	409a      	lsls	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	58025408 	.word	0x58025408
 8004ea8:	5802541c 	.word	0x5802541c
 8004eac:	58025430 	.word	0x58025430
 8004eb0:	58025444 	.word	0x58025444
 8004eb4:	58025458 	.word	0x58025458
 8004eb8:	5802546c 	.word	0x5802546c
 8004ebc:	58025480 	.word	0x58025480
 8004ec0:	58025494 	.word	0x58025494
 8004ec4:	1600963f 	.word	0x1600963f
 8004ec8:	58025940 	.word	0x58025940
 8004ecc:	1000823f 	.word	0x1000823f
 8004ed0:	40020940 	.word	0x40020940

08004ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	@ 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004ee2:	4b86      	ldr	r3, [pc, #536]	@ (80050fc <HAL_GPIO_Init+0x228>)
 8004ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ee6:	e18c      	b.n	8005202 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 817e 	beq.w	80051fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d005      	beq.n	8004f18 <HAL_GPIO_Init+0x44>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d130      	bne.n	8004f7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	2203      	movs	r2, #3
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f4e:	2201      	movs	r2, #1
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	f003 0201 	and.w	r2, r3, #1
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d017      	beq.n	8004fb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	2203      	movs	r2, #3
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d123      	bne.n	800500a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	08da      	lsrs	r2, r3, #3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3208      	adds	r2, #8
 8004fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	220f      	movs	r2, #15
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	08da      	lsrs	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3208      	adds	r2, #8
 8005004:	69b9      	ldr	r1, [r7, #24]
 8005006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	2203      	movs	r2, #3
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 0203 	and.w	r2, r3, #3
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80d8 	beq.w	80051fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800504c:	4b2c      	ldr	r3, [pc, #176]	@ (8005100 <HAL_GPIO_Init+0x22c>)
 800504e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005052:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <HAL_GPIO_Init+0x22c>)
 8005054:	f043 0302 	orr.w	r3, r3, #2
 8005058:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800505c:	4b28      	ldr	r3, [pc, #160]	@ (8005100 <HAL_GPIO_Init+0x22c>)
 800505e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800506a:	4a26      	ldr	r2, [pc, #152]	@ (8005104 <HAL_GPIO_Init+0x230>)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	220f      	movs	r2, #15
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <HAL_GPIO_Init+0x234>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d04a      	beq.n	800512c <HAL_GPIO_Init+0x258>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1c      	ldr	r2, [pc, #112]	@ (800510c <HAL_GPIO_Init+0x238>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d02b      	beq.n	80050f6 <HAL_GPIO_Init+0x222>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005110 <HAL_GPIO_Init+0x23c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d025      	beq.n	80050f2 <HAL_GPIO_Init+0x21e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005114 <HAL_GPIO_Init+0x240>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01f      	beq.n	80050ee <HAL_GPIO_Init+0x21a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_GPIO_Init+0x244>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d019      	beq.n	80050ea <HAL_GPIO_Init+0x216>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a18      	ldr	r2, [pc, #96]	@ (800511c <HAL_GPIO_Init+0x248>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_GPIO_Init+0x212>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <HAL_GPIO_Init+0x24c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00d      	beq.n	80050e2 <HAL_GPIO_Init+0x20e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	@ (8005124 <HAL_GPIO_Init+0x250>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <HAL_GPIO_Init+0x20a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	@ (8005128 <HAL_GPIO_Init+0x254>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d101      	bne.n	80050da <HAL_GPIO_Init+0x206>
 80050d6:	2309      	movs	r3, #9
 80050d8:	e029      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050da:	230a      	movs	r3, #10
 80050dc:	e027      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050de:	2307      	movs	r3, #7
 80050e0:	e025      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050e2:	2306      	movs	r3, #6
 80050e4:	e023      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050e6:	2305      	movs	r3, #5
 80050e8:	e021      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050ea:	2304      	movs	r3, #4
 80050ec:	e01f      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050ee:	2303      	movs	r3, #3
 80050f0:	e01d      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e01b      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e019      	b.n	800512e <HAL_GPIO_Init+0x25a>
 80050fa:	bf00      	nop
 80050fc:	58000080 	.word	0x58000080
 8005100:	58024400 	.word	0x58024400
 8005104:	58000400 	.word	0x58000400
 8005108:	58020000 	.word	0x58020000
 800510c:	58020400 	.word	0x58020400
 8005110:	58020800 	.word	0x58020800
 8005114:	58020c00 	.word	0x58020c00
 8005118:	58021000 	.word	0x58021000
 800511c:	58021400 	.word	0x58021400
 8005120:	58021800 	.word	0x58021800
 8005124:	58021c00 	.word	0x58021c00
 8005128:	58022400 	.word	0x58022400
 800512c:	2300      	movs	r3, #0
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	f002 0203 	and.w	r2, r2, #3
 8005134:	0092      	lsls	r2, r2, #2
 8005136:	4093      	lsls	r3, r2
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4313      	orrs	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800513e:	4938      	ldr	r1, [pc, #224]	@ (8005220 <HAL_GPIO_Init+0x34c>)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	089b      	lsrs	r3, r3, #2
 8005144:	3302      	adds	r3, #2
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	3301      	adds	r3, #1
 8005200:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f47f ae6b 	bne.w	8004ee8 <HAL_GPIO_Init+0x14>
  }
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	3724      	adds	r7, #36	@ 0x24
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	58000400 	.word	0x58000400

08005224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	807b      	strh	r3, [r7, #2]
 8005230:	4613      	mov	r3, r2
 8005232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005234:	787b      	ldrb	r3, [r7, #1]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800523a:	887a      	ldrh	r2, [r7, #2]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005240:	e003      	b.n	800524a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005242:	887b      	ldrh	r3, [r7, #2]
 8005244:	041a      	lsls	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	619a      	str	r2, [r3, #24]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005256:	b480      	push	{r7}
 8005258:	b085      	sub	sp, #20
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	460b      	mov	r3, r1
 8005260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005268:	887a      	ldrh	r2, [r7, #2]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4013      	ands	r3, r2
 800526e:	041a      	lsls	r2, r3, #16
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	43d9      	mvns	r1, r3
 8005274:	887b      	ldrh	r3, [r7, #2]
 8005276:	400b      	ands	r3, r1
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
}
 800527e:	bf00      	nop
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	4603      	mov	r3, r0
 8005292:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005298:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb ff49 	bl	8001148 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052c8:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d00a      	beq.n	80052ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052d4:	4b16      	ldr	r3, [pc, #88]	@ (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e01f      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e01d      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052ea:	4b11      	ldr	r3, [pc, #68]	@ (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	490f      	ldr	r1, [pc, #60]	@ (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052fa:	f7fc fbf5 	bl	8001ae8 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005300:	e009      	b.n	8005316 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005302:	f7fc fbf1 	bl	8001ae8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005310:	d901      	bls.n	8005316 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e007      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005316:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <HAL_PWREx_ConfigSupply+0x70>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005322:	d1ee      	bne.n	8005302 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	58024800 	.word	0x58024800

08005334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08c      	sub	sp, #48	@ 0x30
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e3c8      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8087 	beq.w	8005462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005354:	4b88      	ldr	r3, [pc, #544]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800535c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800535e:	4b86      	ldr	r3, [pc, #536]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005362:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	2b10      	cmp	r3, #16
 8005368:	d007      	beq.n	800537a <HAL_RCC_OscConfig+0x46>
 800536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536c:	2b18      	cmp	r3, #24
 800536e:	d110      	bne.n	8005392 <HAL_RCC_OscConfig+0x5e>
 8005370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d10b      	bne.n	8005392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537a:	4b7f      	ldr	r3, [pc, #508]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d06c      	beq.n	8005460 <HAL_RCC_OscConfig+0x12c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d168      	bne.n	8005460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e3a2      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539a:	d106      	bne.n	80053aa <HAL_RCC_OscConfig+0x76>
 800539c:	4b76      	ldr	r3, [pc, #472]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a75      	ldr	r2, [pc, #468]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e02e      	b.n	8005408 <HAL_RCC_OscConfig+0xd4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_RCC_OscConfig+0x98>
 80053b2:	4b71      	ldr	r3, [pc, #452]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a70      	ldr	r2, [pc, #448]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	4b6e      	ldr	r3, [pc, #440]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e01d      	b.n	8005408 <HAL_RCC_OscConfig+0xd4>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053d4:	d10c      	bne.n	80053f0 <HAL_RCC_OscConfig+0xbc>
 80053d6:	4b68      	ldr	r3, [pc, #416]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a67      	ldr	r2, [pc, #412]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	4b65      	ldr	r3, [pc, #404]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a64      	ldr	r2, [pc, #400]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e00b      	b.n	8005408 <HAL_RCC_OscConfig+0xd4>
 80053f0:	4b61      	ldr	r3, [pc, #388]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a60      	ldr	r2, [pc, #384]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5d      	ldr	r2, [pc, #372]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d013      	beq.n	8005438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005410:	f7fc fb6a 	bl	8001ae8 <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005418:	f7fc fb66 	bl	8001ae8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e356      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800542a:	4b53      	ldr	r3, [pc, #332]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0xe4>
 8005436:	e014      	b.n	8005462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc fb56 	bl	8001ae8 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005440:	f7fc fb52 	bl	8001ae8 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	@ 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e342      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005452:	4b49      	ldr	r3, [pc, #292]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x10c>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 808c 	beq.w	8005588 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005470:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005478:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800547a:	4b3f      	ldr	r3, [pc, #252]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800547c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <HAL_RCC_OscConfig+0x162>
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b18      	cmp	r3, #24
 800548a:	d137      	bne.n	80054fc <HAL_RCC_OscConfig+0x1c8>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d132      	bne.n	80054fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005496:	4b38      	ldr	r3, [pc, #224]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x17a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e314      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054ae:	4b32      	ldr	r3, [pc, #200]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 0219 	bic.w	r2, r3, #25
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	492f      	ldr	r1, [pc, #188]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fc fb12 	bl	8001ae8 <HAL_GetTick>
 80054c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c8:	f7fc fb0e 	bl	8001ae8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e2fe      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054da:	4b27      	ldr	r3, [pc, #156]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b24      	ldr	r3, [pc, #144]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	061b      	lsls	r3, r3, #24
 80054f4:	4920      	ldr	r1, [pc, #128]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fa:	e045      	b.n	8005588 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d026      	beq.n	8005552 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005504:	4b1c      	ldr	r3, [pc, #112]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 0219 	bic.w	r2, r3, #25
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4919      	ldr	r1, [pc, #100]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005516:	f7fc fae7 	bl	8001ae8 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551e:	f7fc fae3 	bl	8001ae8 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e2d3      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005530:	4b11      	ldr	r3, [pc, #68]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0f0      	beq.n	800551e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	490b      	ldr	r1, [pc, #44]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	e01a      	b.n	8005588 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005552:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a08      	ldr	r2, [pc, #32]	@ (8005578 <HAL_RCC_OscConfig+0x244>)
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555e:	f7fc fac3 	bl	8001ae8 <HAL_GetTick>
 8005562:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005564:	e00a      	b.n	800557c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005566:	f7fc fabf 	bl	8001ae8 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b02      	cmp	r3, #2
 8005572:	d903      	bls.n	800557c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e2af      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
 8005578:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800557c:	4b96      	ldr	r3, [pc, #600]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1ee      	bne.n	8005566 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d06a      	beq.n	800566a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005594:	4b90      	ldr	r3, [pc, #576]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800559c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800559e:	4b8e      	ldr	r3, [pc, #568]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d007      	beq.n	80055ba <HAL_RCC_OscConfig+0x286>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b18      	cmp	r3, #24
 80055ae:	d11b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x2b4>
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d116      	bne.n	80055e8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ba:	4b87      	ldr	r3, [pc, #540]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_RCC_OscConfig+0x29e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b80      	cmp	r3, #128	@ 0x80
 80055cc:	d001      	beq.n	80055d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e282      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055d2:	4b81      	ldr	r3, [pc, #516]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	497d      	ldr	r1, [pc, #500]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e6:	e040      	b.n	800566a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d023      	beq.n	8005638 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055f0:	4b79      	ldr	r3, [pc, #484]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a78      	ldr	r2, [pc, #480]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80055f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc fa74 	bl	8001ae8 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005604:	f7fc fa70 	bl	8001ae8 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e260      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005616:	4b70      	ldr	r3, [pc, #448]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005622:	4b6d      	ldr	r3, [pc, #436]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	061b      	lsls	r3, r3, #24
 8005630:	4969      	ldr	r1, [pc, #420]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005632:	4313      	orrs	r3, r2
 8005634:	60cb      	str	r3, [r1, #12]
 8005636:	e018      	b.n	800566a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005638:	4b67      	ldr	r3, [pc, #412]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a66      	ldr	r2, [pc, #408]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 800563e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fc fa50 	bl	8001ae8 <HAL_GetTick>
 8005648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800564c:	f7fc fa4c 	bl	8001ae8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e23c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800565e:	4b5e      	ldr	r3, [pc, #376]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d019      	beq.n	80056b2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b56      	ldr	r3, [pc, #344]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005682:	4a55      	ldr	r2, [pc, #340]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7fc fa2d 	bl	8001ae8 <HAL_GetTick>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005692:	f7fc fa29 	bl	8001ae8 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e219      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056a4:	4b4c      	ldr	r3, [pc, #304]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x35e>
 80056b0:	e018      	b.n	80056e4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b2:	4b49      	ldr	r3, [pc, #292]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b6:	4a48      	ldr	r2, [pc, #288]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fc fa13 	bl	8001ae8 <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056c6:	f7fc fa0f 	bl	8001ae8 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1ff      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056d8:	4b3f      	ldr	r3, [pc, #252]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d036      	beq.n	800575e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d019      	beq.n	800572c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f8:	4b37      	ldr	r3, [pc, #220]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a36      	ldr	r2, [pc, #216]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80056fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005702:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005704:	f7fc f9f0 	bl	8001ae8 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800570c:	f7fc f9ec 	bl	8001ae8 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1dc      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800571e:	4b2e      	ldr	r3, [pc, #184]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x3d8>
 800572a:	e018      	b.n	800575e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800572c:	4b2a      	ldr	r3, [pc, #168]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a29      	ldr	r2, [pc, #164]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005732:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005736:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005738:	f7fc f9d6 	bl	8001ae8 <HAL_GetTick>
 800573c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005740:	f7fc f9d2 	bl	8001ae8 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1c2      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005752:	4b21      	ldr	r3, [pc, #132]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8086 	beq.w	8005878 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800576c:	4b1b      	ldr	r3, [pc, #108]	@ (80057dc <HAL_RCC_OscConfig+0x4a8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1a      	ldr	r2, [pc, #104]	@ (80057dc <HAL_RCC_OscConfig+0x4a8>)
 8005772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005778:	f7fc f9b6 	bl	8001ae8 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005780:	f7fc f9b2 	bl	8001ae8 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	@ 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e1a2      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005792:	4b12      	ldr	r3, [pc, #72]	@ (80057dc <HAL_RCC_OscConfig+0x4a8>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x480>
 80057a6:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057aa:	4a0b      	ldr	r2, [pc, #44]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057b2:	e032      	b.n	800581a <HAL_RCC_OscConfig+0x4e6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <HAL_RCC_OscConfig+0x4ac>
 80057bc:	4b06      	ldr	r3, [pc, #24]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c0:	4a05      	ldr	r2, [pc, #20]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c8:	4b03      	ldr	r3, [pc, #12]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057cc:	4a02      	ldr	r2, [pc, #8]	@ (80057d8 <HAL_RCC_OscConfig+0x4a4>)
 80057ce:	f023 0304 	bic.w	r3, r3, #4
 80057d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057d4:	e021      	b.n	800581a <HAL_RCC_OscConfig+0x4e6>
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
 80057dc:	58024800 	.word	0x58024800
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d10c      	bne.n	8005802 <HAL_RCC_OscConfig+0x4ce>
 80057e8:	4b83      	ldr	r3, [pc, #524]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	4a82      	ldr	r2, [pc, #520]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f4:	4b80      	ldr	r3, [pc, #512]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f8:	4a7f      	ldr	r2, [pc, #508]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005800:	e00b      	b.n	800581a <HAL_RCC_OscConfig+0x4e6>
 8005802:	4b7d      	ldr	r3, [pc, #500]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	4a7c      	ldr	r2, [pc, #496]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	@ 0x70
 800580e:	4b7a      	ldr	r3, [pc, #488]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	4a79      	ldr	r2, [pc, #484]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005814:	f023 0304 	bic.w	r3, r3, #4
 8005818:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d015      	beq.n	800584e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005822:	f7fc f961 	bl	8001ae8 <HAL_GetTick>
 8005826:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005828:	e00a      	b.n	8005840 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc f95d 	bl	8001ae8 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e14b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005840:	4b6d      	ldr	r3, [pc, #436]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0ee      	beq.n	800582a <HAL_RCC_OscConfig+0x4f6>
 800584c:	e014      	b.n	8005878 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584e:	f7fc f94b 	bl	8001ae8 <HAL_GetTick>
 8005852:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005854:	e00a      	b.n	800586c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fc f947 	bl	8001ae8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e135      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800586c:	4b62      	ldr	r3, [pc, #392]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ee      	bne.n	8005856 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 812a 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005882:	4b5d      	ldr	r3, [pc, #372]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	2b18      	cmp	r3, #24
 800588c:	f000 80ba 	beq.w	8005a04 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	2b02      	cmp	r3, #2
 8005896:	f040 8095 	bne.w	80059c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b57      	ldr	r3, [pc, #348]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a56      	ldr	r2, [pc, #344]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80058a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a6:	f7fc f91f 	bl	8001ae8 <HAL_GetTick>
 80058aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ae:	f7fc f91b 	bl	8001ae8 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e10b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c0:	4b4d      	ldr	r3, [pc, #308]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f0      	bne.n	80058ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058cc:	4b4a      	ldr	r3, [pc, #296]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80058ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058d0:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <HAL_RCC_OscConfig+0x6c8>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058dc:	0112      	lsls	r2, r2, #4
 80058de:	430a      	orrs	r2, r1
 80058e0:	4945      	ldr	r1, [pc, #276]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ea:	3b01      	subs	r3, #1
 80058ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f4:	3b01      	subs	r3, #1
 80058f6:	025b      	lsls	r3, r3, #9
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	3b01      	subs	r3, #1
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005908:	431a      	orrs	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	3b01      	subs	r3, #1
 8005910:	061b      	lsls	r3, r3, #24
 8005912:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005916:	4938      	ldr	r1, [pc, #224]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800591c:	4b36      	ldr	r3, [pc, #216]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a35      	ldr	r2, [pc, #212]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005928:	4b33      	ldr	r3, [pc, #204]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800592a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <HAL_RCC_OscConfig+0x6cc>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005934:	00d2      	lsls	r2, r2, #3
 8005936:	4930      	ldr	r1, [pc, #192]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005938:	4313      	orrs	r3, r2
 800593a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800593c:	4b2e      	ldr	r3, [pc, #184]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f023 020c 	bic.w	r2, r3, #12
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	492b      	ldr	r1, [pc, #172]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800594a:	4313      	orrs	r3, r2
 800594c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800594e:	4b2a      	ldr	r3, [pc, #168]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	f023 0202 	bic.w	r2, r3, #2
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	4927      	ldr	r1, [pc, #156]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800595c:	4313      	orrs	r3, r2
 800595e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005960:	4b25      	ldr	r3, [pc, #148]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	4a24      	ldr	r2, [pc, #144]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596c:	4b22      	ldr	r3, [pc, #136]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4a21      	ldr	r2, [pc, #132]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005978:	4b1f      	ldr	r3, [pc, #124]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800597e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005984:	4b1c      	ldr	r3, [pc, #112]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005990:	4b19      	ldr	r3, [pc, #100]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 8005996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800599a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc f8a4 	bl	8001ae8 <HAL_GetTick>
 80059a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fc f8a0 	bl	8001ae8 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e090      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059b6:	4b10      	ldr	r3, [pc, #64]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x670>
 80059c2:	e088      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0b      	ldr	r2, [pc, #44]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fc f88a 	bl	8001ae8 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059d8:	f7fc f886 	bl	8001ae8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e076      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ea:	4b03      	ldr	r3, [pc, #12]	@ (80059f8 <HAL_RCC_OscConfig+0x6c4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x6a4>
 80059f6:	e06e      	b.n	8005ad6 <HAL_RCC_OscConfig+0x7a2>
 80059f8:	58024400 	.word	0x58024400
 80059fc:	fffffc0c 	.word	0xfffffc0c
 8005a00:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a04:	4b36      	ldr	r3, [pc, #216]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a0a:	4b35      	ldr	r3, [pc, #212]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d031      	beq.n	8005a7c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f003 0203 	and.w	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d12a      	bne.n	8005a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d122      	bne.n	8005a7c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d11a      	bne.n	8005a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	0a5b      	lsrs	r3, r3, #9
 8005a4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d111      	bne.n	8005a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d108      	bne.n	8005a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	0e1b      	lsrs	r3, r3, #24
 8005a6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e02b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005a80:	4b17      	ldr	r3, [pc, #92]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a84:	08db      	lsrs	r3, r3, #3
 8005a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d01f      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005a96:	4b12      	ldr	r3, [pc, #72]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aa2:	f7fc f821 	bl	8001ae8 <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005aa8:	bf00      	nop
 8005aaa:	f7fc f81d 	bl	8001ae8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d0f9      	beq.n	8005aaa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aba:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <HAL_RCC_OscConfig+0x7b0>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ac2:	00d2      	lsls	r2, r2, #3
 8005ac4:	4906      	ldr	r1, [pc, #24]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005aca:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ace:	4a04      	ldr	r2, [pc, #16]	@ (8005ae0 <HAL_RCC_OscConfig+0x7ac>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3730      	adds	r7, #48	@ 0x30
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	58024400 	.word	0x58024400
 8005ae4:	ffff0007 	.word	0xffff0007

08005ae8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e19c      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005afc:	4b8a      	ldr	r3, [pc, #552]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d910      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b87      	ldr	r3, [pc, #540]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 020f 	bic.w	r2, r3, #15
 8005b12:	4985      	ldr	r1, [pc, #532]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b83      	ldr	r3, [pc, #524]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e184      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d908      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b48:	4b78      	ldr	r3, [pc, #480]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4975      	ldr	r1, [pc, #468]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d010      	beq.n	8005b88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	4b70      	ldr	r3, [pc, #448]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d908      	bls.n	8005b88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b76:	4b6d      	ldr	r3, [pc, #436]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	496a      	ldr	r1, [pc, #424]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	4b64      	ldr	r3, [pc, #400]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d908      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ba4:	4b61      	ldr	r3, [pc, #388]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	495e      	ldr	r1, [pc, #376]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	4b59      	ldr	r3, [pc, #356]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d908      	bls.n	8005be4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bd2:	4b56      	ldr	r3, [pc, #344]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4953      	ldr	r1, [pc, #332]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d908      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c00:	4b4a      	ldr	r3, [pc, #296]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f023 020f 	bic.w	r2, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4947      	ldr	r1, [pc, #284]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d055      	beq.n	8005cca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c1e:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	4940      	ldr	r1, [pc, #256]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c38:	4b3c      	ldr	r3, [pc, #240]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d121      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0f6      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c50:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d115      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0ea      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c68:	4b30      	ldr	r3, [pc, #192]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0de      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c78:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0d6      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c88:	4b28      	ldr	r3, [pc, #160]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f023 0207 	bic.w	r2, r3, #7
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	4925      	ldr	r1, [pc, #148]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fb ff25 	bl	8001ae8 <HAL_GetTick>
 8005c9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca2:	f7fb ff21 	bl	8001ae8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e0be      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d1eb      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d010      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d208      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce6:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f023 020f 	bic.w	r2, r3, #15
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	490e      	ldr	r1, [pc, #56]	@ (8005d2c <HAL_RCC_ClockConfig+0x244>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 030f 	and.w	r3, r3, #15
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d214      	bcs.n	8005d30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d06:	4b08      	ldr	r3, [pc, #32]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f023 020f 	bic.w	r2, r3, #15
 8005d0e:	4906      	ldr	r1, [pc, #24]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d16:	4b04      	ldr	r3, [pc, #16]	@ (8005d28 <HAL_RCC_ClockConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e086      	b.n	8005e36 <HAL_RCC_ClockConfig+0x34e>
 8005d28:	52002000 	.word	0x52002000
 8005d2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	4b3f      	ldr	r3, [pc, #252]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d208      	bcs.n	8005d5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4939      	ldr	r1, [pc, #228]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d010      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	4b34      	ldr	r3, [pc, #208]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d208      	bcs.n	8005d8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d7a:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	492e      	ldr	r1, [pc, #184]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d010      	beq.n	8005dba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	4b28      	ldr	r3, [pc, #160]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d208      	bcs.n	8005dba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005da8:	4b25      	ldr	r3, [pc, #148]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	4922      	ldr	r1, [pc, #136]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d010      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d208      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4917      	ldr	r1, [pc, #92]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005de8:	f000 f834 	bl	8005e54 <HAL_RCC_GetSysClockFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b14      	ldr	r3, [pc, #80]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	4912      	ldr	r1, [pc, #72]	@ (8005e44 <HAL_RCC_ClockConfig+0x35c>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	f003 031f 	and.w	r3, r3, #31
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
 8005e04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e06:	4b0e      	ldr	r3, [pc, #56]	@ (8005e40 <HAL_RCC_ClockConfig+0x358>)
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e44 <HAL_RCC_ClockConfig+0x35c>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <HAL_RCC_ClockConfig+0x360>)
 8005e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e20:	4a0a      	ldr	r2, [pc, #40]	@ (8005e4c <HAL_RCC_ClockConfig+0x364>)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005e26:	4b0a      	ldr	r3, [pc, #40]	@ (8005e50 <HAL_RCC_ClockConfig+0x368>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fb fe12 	bl	8001a54 <HAL_InitTick>
 8005e30:	4603      	mov	r3, r0
 8005e32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	58024400 	.word	0x58024400
 8005e44:	0800b468 	.word	0x0800b468
 8005e48:	24000008 	.word	0x24000008
 8005e4c:	24000004 	.word	0x24000004
 8005e50:	2400000c 	.word	0x2400000c

08005e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b089      	sub	sp, #36	@ 0x24
 8005e58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e5a:	4bb3      	ldr	r3, [pc, #716]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e62:	2b18      	cmp	r3, #24
 8005e64:	f200 8155 	bhi.w	8006112 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e68:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08006113 	.word	0x08006113
 8005e78:	08006113 	.word	0x08006113
 8005e7c:	08006113 	.word	0x08006113
 8005e80:	08006113 	.word	0x08006113
 8005e84:	08006113 	.word	0x08006113
 8005e88:	08006113 	.word	0x08006113
 8005e8c:	08006113 	.word	0x08006113
 8005e90:	08005efb 	.word	0x08005efb
 8005e94:	08006113 	.word	0x08006113
 8005e98:	08006113 	.word	0x08006113
 8005e9c:	08006113 	.word	0x08006113
 8005ea0:	08006113 	.word	0x08006113
 8005ea4:	08006113 	.word	0x08006113
 8005ea8:	08006113 	.word	0x08006113
 8005eac:	08006113 	.word	0x08006113
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	08006113 	.word	0x08006113
 8005eb8:	08006113 	.word	0x08006113
 8005ebc:	08006113 	.word	0x08006113
 8005ec0:	08006113 	.word	0x08006113
 8005ec4:	08006113 	.word	0x08006113
 8005ec8:	08006113 	.word	0x08006113
 8005ecc:	08006113 	.word	0x08006113
 8005ed0:	08005f07 	.word	0x08005f07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed4:	4b94      	ldr	r3, [pc, #592]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ee0:	4b91      	ldr	r3, [pc, #580]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	4a90      	ldr	r2, [pc, #576]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005ef2:	e111      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ef4:	4b8d      	ldr	r3, [pc, #564]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef6:	61bb      	str	r3, [r7, #24]
      break;
 8005ef8:	e10e      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005efa:	4b8d      	ldr	r3, [pc, #564]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005efc:	61bb      	str	r3, [r7, #24]
      break;
 8005efe:	e10b      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005f00:	4b8c      	ldr	r3, [pc, #560]	@ (8006134 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005f02:	61bb      	str	r3, [r7, #24]
      break;
 8005f04:	e108      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f06:	4b88      	ldr	r3, [pc, #544]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005f10:	4b85      	ldr	r3, [pc, #532]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	091b      	lsrs	r3, r3, #4
 8005f16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f1c:	4b82      	ldr	r3, [pc, #520]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005f26:	4b80      	ldr	r3, [pc, #512]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80e1 	beq.w	800610c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f000 8083 	beq.w	8006058 <HAL_RCC_GetSysClockFreq+0x204>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	f200 80a1 	bhi.w	800609c <HAL_RCC_GetSysClockFreq+0x248>
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x114>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d056      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f66:	e099      	b.n	800609c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f68:	4b6f      	ldr	r3, [pc, #444]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d02d      	beq.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f74:	4b6c      	ldr	r3, [pc, #432]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800612c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b62      	ldr	r3, [pc, #392]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fb2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005fce:	e087      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800613c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b51      	ldr	r3, [pc, #324]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006012:	e065      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006140 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b40      	ldr	r3, [pc, #256]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a02 	vldr	s12, [r7, #8]
 800603a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e4>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006056:	e043      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006144 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b2f      	ldr	r3, [pc, #188]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a02 	vldr	s12, [r7, #8]
 800607e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800609a:	e021      	b.n	80060e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006140 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006138 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80060de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80060e0:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e4:	0a5b      	lsrs	r3, r3, #9
 80060e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ea:	3301      	adds	r3, #1
 80060ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	ee07 3a90 	vmov	s15, r3
 80060f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006104:	ee17 3a90 	vmov	r3, s15
 8006108:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800610a:	e005      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
      break;
 8006110:	e002      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006112:	4b07      	ldr	r3, [pc, #28]	@ (8006130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006114:	61bb      	str	r3, [r7, #24]
      break;
 8006116:	bf00      	nop
  }

  return sysclockfreq;
 8006118:	69bb      	ldr	r3, [r7, #24]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3724      	adds	r7, #36	@ 0x24
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	58024400 	.word	0x58024400
 800612c:	03d09000 	.word	0x03d09000
 8006130:	003d0900 	.word	0x003d0900
 8006134:	017d7840 	.word	0x017d7840
 8006138:	46000000 	.word	0x46000000
 800613c:	4c742400 	.word	0x4c742400
 8006140:	4a742400 	.word	0x4a742400
 8006144:	4bbebc20 	.word	0x4bbebc20

08006148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800614e:	f7ff fe81 	bl	8005e54 <HAL_RCC_GetSysClockFreq>
 8006152:	4602      	mov	r2, r0
 8006154:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x50>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	490f      	ldr	r1, [pc, #60]	@ (800619c <HAL_RCC_GetHCLKFreq+0x54>)
 8006160:	5ccb      	ldrb	r3, [r1, r3]
 8006162:	f003 031f 	and.w	r3, r3, #31
 8006166:	fa22 f303 	lsr.w	r3, r2, r3
 800616a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x50>)
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	4a09      	ldr	r2, [pc, #36]	@ (800619c <HAL_RCC_GetHCLKFreq+0x54>)
 8006176:	5cd3      	ldrb	r3, [r2, r3]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	fa22 f303 	lsr.w	r3, r2, r3
 8006182:	4a07      	ldr	r2, [pc, #28]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006184:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006186:	4a07      	ldr	r2, [pc, #28]	@ (80061a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800618c:	4b04      	ldr	r3, [pc, #16]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	58024400 	.word	0x58024400
 800619c:	0800b468 	.word	0x0800b468
 80061a0:	24000008 	.word	0x24000008
 80061a4:	24000004 	.word	0x24000004

080061a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80061ac:	f7ff ffcc 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4904      	ldr	r1, [pc, #16]	@ (80061d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	58024400 	.word	0x58024400
 80061d0:	0800b468 	.word	0x0800b468

080061d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061d8:	f7ff ffb6 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 80061dc:	4602      	mov	r2, r0
 80061de:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	4904      	ldr	r1, [pc, #16]	@ (80061fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ea:	5ccb      	ldrb	r3, [r1, r3]
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	58024400 	.word	0x58024400
 80061fc:	0800b468 	.word	0x0800b468

08006200 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006204:	b0c6      	sub	sp, #280	@ 0x118
 8006206:	af00      	add	r7, sp, #0
 8006208:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800620c:	2300      	movs	r3, #0
 800620e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006212:	2300      	movs	r3, #0
 8006214:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006224:	2500      	movs	r5, #0
 8006226:	ea54 0305 	orrs.w	r3, r4, r5
 800622a:	d049      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800622c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006232:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006236:	d02f      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006238:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800623c:	d828      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800623e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006242:	d01a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006244:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006248:	d822      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800624e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006252:	d007      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006254:	e01c      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006256:	4bab      	ldr	r3, [pc, #684]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4aaa      	ldr	r2, [pc, #680]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800625c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006262:	e01a      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006268:	3308      	adds	r3, #8
 800626a:	2102      	movs	r1, #2
 800626c:	4618      	mov	r0, r3
 800626e:	f001 fc25 	bl	8007abc <RCCEx_PLL2_Config>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006278:	e00f      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627e:	3328      	adds	r3, #40	@ 0x28
 8006280:	2102      	movs	r1, #2
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fccc 	bl	8007c20 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10a      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062a2:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	4a94      	ldr	r2, [pc, #592]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80062cc:	f04f 0900 	mov.w	r9, #0
 80062d0:	ea58 0309 	orrs.w	r3, r8, r9
 80062d4:	d047      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d82a      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80062e0:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80062e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e6:	bf00      	nop
 80062e8:	080062fd 	.word	0x080062fd
 80062ec:	0800630b 	.word	0x0800630b
 80062f0:	08006321 	.word	0x08006321
 80062f4:	0800633f 	.word	0x0800633f
 80062f8:	0800633f 	.word	0x0800633f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062fc:	4b81      	ldr	r3, [pc, #516]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a80      	ldr	r2, [pc, #512]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006308:	e01a      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800630a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630e:	3308      	adds	r3, #8
 8006310:	2100      	movs	r1, #0
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fbd2 	bl	8007abc <RCCEx_PLL2_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800631e:	e00f      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	3328      	adds	r3, #40	@ 0x28
 8006326:	2100      	movs	r1, #0
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fc79 	bl	8007c20 <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006334:	e004      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800633c:	e000      	b.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800633e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006348:	4b6e      	ldr	r3, [pc, #440]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800634a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634c:	f023 0107 	bic.w	r1, r3, #7
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006356:	4a6b      	ldr	r2, [pc, #428]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006358:	430b      	orrs	r3, r1
 800635a:	6513      	str	r3, [r2, #80]	@ 0x50
 800635c:	e003      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006362:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006372:	f04f 0b00 	mov.w	fp, #0
 8006376:	ea5a 030b 	orrs.w	r3, sl, fp
 800637a:	d05b      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006384:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006388:	d03b      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800638a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800638e:	d834      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006390:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006394:	d037      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006396:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800639a:	d82e      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800639c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80063a0:	d033      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80063a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80063a6:	d828      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063ac:	d01a      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80063ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063b2:	d822      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80063b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063bc:	d007      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80063be:	e01c      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c0:	4b50      	ldr	r3, [pc, #320]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4a4f      	ldr	r2, [pc, #316]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063cc:	e01e      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d2:	3308      	adds	r3, #8
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fb70 	bl	8007abc <RCCEx_PLL2_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80063e2:	e013      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e8:	3328      	adds	r3, #40	@ 0x28
 80063ea:	2100      	movs	r1, #0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fc17 	bl	8007c20 <RCCEx_PLL3_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063f8:	e008      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006400:	e004      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006414:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006418:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006424:	4a37      	ldr	r2, [pc, #220]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6593      	str	r3, [r2, #88]	@ 0x58
 800642a:	e003      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006430:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800644a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d05d      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800645c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006460:	d03b      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006462:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006466:	d834      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800646c:	d037      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800646e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006472:	d82e      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006474:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006478:	d033      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800647a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800647e:	d828      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006484:	d01a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800648a:	d822      	bhi.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006496:	e01c      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b1a      	ldr	r3, [pc, #104]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a19      	ldr	r2, [pc, #100]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064a4:	e01e      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064aa:	3308      	adds	r3, #8
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fb04 	bl	8007abc <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80064ba:	e013      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c0:	3328      	adds	r3, #40	@ 0x28
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fbab 	bl	8007c20 <RCCEx_PLL3_Config>
 80064ca:	4603      	mov	r3, r0
 80064cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80064d0:	e008      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064d8:	e004      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80064e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10d      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064ec:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80064f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064fc:	4a01      	ldr	r2, [pc, #4]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80064fe:	430b      	orrs	r3, r1
 8006500:	6593      	str	r3, [r2, #88]	@ 0x58
 8006502:	e005      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006504:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800651c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006526:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800652a:	460b      	mov	r3, r1
 800652c:	4313      	orrs	r3, r2
 800652e:	d03a      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006536:	2b30      	cmp	r3, #48	@ 0x30
 8006538:	d01f      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800653a:	2b30      	cmp	r3, #48	@ 0x30
 800653c:	d819      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800653e:	2b20      	cmp	r3, #32
 8006540:	d00c      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006542:	2b20      	cmp	r3, #32
 8006544:	d815      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006546:	2b00      	cmp	r3, #0
 8006548:	d019      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800654a:	2b10      	cmp	r3, #16
 800654c:	d111      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654e:	4baa      	ldr	r3, [pc, #680]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4aa9      	ldr	r2, [pc, #676]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800655a:	e011      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006560:	3308      	adds	r3, #8
 8006562:	2102      	movs	r1, #2
 8006564:	4618      	mov	r0, r3
 8006566:	f001 faa9 	bl	8007abc <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006570:	e006      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006578:	e002      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800657a:	bf00      	nop
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800657e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006588:	4b9b      	ldr	r3, [pc, #620]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800658a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006596:	4a98      	ldr	r2, [pc, #608]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006598:	430b      	orrs	r3, r1
 800659a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800659c:	e003      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80065b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065b6:	2300      	movs	r3, #0
 80065b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80065bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80065c0:	460b      	mov	r3, r1
 80065c2:	4313      	orrs	r3, r2
 80065c4:	d051      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d0:	d035      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80065d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065d6:	d82e      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065dc:	d031      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80065de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e2:	d828      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065e8:	d01a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ee:	d822      	bhi.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80065f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f8:	d007      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80065fa:	e01c      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065fc:	4b7e      	ldr	r3, [pc, #504]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	4a7d      	ldr	r2, [pc, #500]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006608:	e01c      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800660a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660e:	3308      	adds	r3, #8
 8006610:	2100      	movs	r1, #0
 8006612:	4618      	mov	r0, r3
 8006614:	f001 fa52 	bl	8007abc <RCCEx_PLL2_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800661e:	e011      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	3328      	adds	r3, #40	@ 0x28
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f001 faf9 	bl	8007c20 <RCCEx_PLL3_Config>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800663c:	e002      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800664c:	4b6a      	ldr	r3, [pc, #424]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800664e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006650:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665a:	4a67      	ldr	r2, [pc, #412]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800665c:	430b      	orrs	r3, r1
 800665e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006666:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006676:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800667a:	2300      	movs	r3, #0
 800667c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006680:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d053      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006694:	d033      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006696:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800669a:	d82c      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800669c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a0:	d02f      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80066a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066a6:	d826      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ac:	d02b      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80066ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066b2:	d820      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066b8:	d012      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80066ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066be:	d81a      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d022      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c8:	d115      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ce:	3308      	adds	r3, #8
 80066d0:	2101      	movs	r1, #1
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 f9f2 	bl	8007abc <RCCEx_PLL2_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066de:	e015      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e4:	3328      	adds	r3, #40	@ 0x28
 80066e6:	2101      	movs	r1, #1
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 fa99 	bl	8007c20 <RCCEx_PLL3_Config>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80066f4:	e00a      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066fc:	e006      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80066fe:	bf00      	nop
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006702:	bf00      	nop
 8006704:	e002      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006706:	bf00      	nop
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800670a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006714:	4b38      	ldr	r3, [pc, #224]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006718:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800671c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006722:	4a35      	ldr	r2, [pc, #212]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006724:	430b      	orrs	r3, r1
 8006726:	6513      	str	r3, [r2, #80]	@ 0x50
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800672e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800673e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006748:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d058      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800675a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800675e:	d033      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006764:	d82c      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006770:	d826      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006776:	d02b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006778:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800677c:	d820      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006782:	d012      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006788:	d81a      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d022      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800678e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006792:	d115      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	3308      	adds	r3, #8
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f98d 	bl	8007abc <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067a8:	e015      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ae:	3328      	adds	r3, #40	@ 0x28
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fa34 	bl	8007c20 <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067be:	e00a      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067c8:	bf00      	nop
 80067ca:	e004      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10e      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067de:	4b06      	ldr	r3, [pc, #24]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067ee:	4a02      	ldr	r2, [pc, #8]	@ (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800681a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d037      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800682e:	d00e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006834:	d816      	bhi.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d018      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800683a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800683e:	d111      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4bc4      	ldr	r3, [pc, #784]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	4ac3      	ldr	r2, [pc, #780]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800684c:	e00f      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	3308      	adds	r3, #8
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f001 f930 	bl	8007abc <RCCEx_PLL2_Config>
 800685c:	4603      	mov	r3, r0
 800685e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006862:	e004      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800686a:	e000      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800686c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006876:	4bb7      	ldr	r3, [pc, #732]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800687a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006884:	4ab3      	ldr	r2, [pc, #716]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006886:	430b      	orrs	r3, r1
 8006888:	6513      	str	r3, [r2, #80]	@ 0x50
 800688a:	e003      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80068a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80068aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80068ae:	460b      	mov	r3, r1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d039      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80068b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d81c      	bhi.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80068be:	a201      	add	r2, pc, #4	@ (adr r2, 80068c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	08006901 	.word	0x08006901
 80068c8:	080068d5 	.word	0x080068d5
 80068cc:	080068e3 	.word	0x080068e3
 80068d0:	08006901 	.word	0x08006901
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4b9f      	ldr	r3, [pc, #636]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d8:	4a9e      	ldr	r2, [pc, #632]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068e0:	e00f      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	3308      	adds	r3, #8
 80068e8:	2102      	movs	r1, #2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 f8e6 	bl	8007abc <RCCEx_PLL2_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80068f6:	e004      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068fe:	e000      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800690a:	4b92      	ldr	r3, [pc, #584]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800690c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690e:	f023 0103 	bic.w	r1, r3, #3
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006918:	4a8e      	ldr	r2, [pc, #568]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800691a:	430b      	orrs	r3, r1
 800691c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800691e:	e003      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800693e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006942:	460b      	mov	r3, r1
 8006944:	4313      	orrs	r3, r2
 8006946:	f000 8099 	beq.w	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800694a:	4b83      	ldr	r3, [pc, #524]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a82      	ldr	r2, [pc, #520]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006956:	f7fb f8c7 	bl	8001ae8 <HAL_GetTick>
 800695a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800695e:	e00b      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006960:	f7fb f8c2 	bl	8001ae8 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b64      	cmp	r3, #100	@ 0x64
 800696e:	d903      	bls.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006976:	e005      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006978:	4b77      	ldr	r3, [pc, #476]	@ (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ed      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006988:	2b00      	cmp	r3, #0
 800698a:	d173      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800698c:	4b71      	ldr	r3, [pc, #452]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800698e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006998:	4053      	eors	r3, r2
 800699a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ae:	4b69      	ldr	r3, [pc, #420]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b2:	4a68      	ldr	r2, [pc, #416]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069ba:	4b66      	ldr	r3, [pc, #408]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	4a65      	ldr	r2, [pc, #404]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80069c6:	4a63      	ldr	r2, [pc, #396]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80069c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80069cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069da:	d118      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fb f884 	bl	8001ae8 <HAL_GetTick>
 80069e0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e4:	e00d      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e6:	f7fb f87f 	bl	8001ae8 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d903      	bls.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006a00:	e005      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a02:	4b54      	ldr	r3, [pc, #336]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0eb      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006a0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d129      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a26:	d10e      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006a28:	4b4a      	ldr	r3, [pc, #296]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a38:	091a      	lsrs	r2, r3, #4
 8006a3a:	4b48      	ldr	r3, [pc, #288]	@ (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	4a45      	ldr	r2, [pc, #276]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6113      	str	r3, [r2, #16]
 8006a44:	e005      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006a46:	4b43      	ldr	r3, [pc, #268]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	4a42      	ldr	r2, [pc, #264]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a50:	6113      	str	r3, [r2, #16]
 8006a52:	4b40      	ldr	r3, [pc, #256]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a54:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a62:	4a3c      	ldr	r2, [pc, #240]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a68:	e008      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f002 0301 	and.w	r3, r2, #1
 8006a88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006a92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006a96:	460b      	mov	r3, r1
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f000 808f 	beq.w	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006aa4:	2b28      	cmp	r3, #40	@ 0x28
 8006aa6:	d871      	bhi.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006b95 	.word	0x08006b95
 8006ab4:	08006b8d 	.word	0x08006b8d
 8006ab8:	08006b8d 	.word	0x08006b8d
 8006abc:	08006b8d 	.word	0x08006b8d
 8006ac0:	08006b8d 	.word	0x08006b8d
 8006ac4:	08006b8d 	.word	0x08006b8d
 8006ac8:	08006b8d 	.word	0x08006b8d
 8006acc:	08006b8d 	.word	0x08006b8d
 8006ad0:	08006b61 	.word	0x08006b61
 8006ad4:	08006b8d 	.word	0x08006b8d
 8006ad8:	08006b8d 	.word	0x08006b8d
 8006adc:	08006b8d 	.word	0x08006b8d
 8006ae0:	08006b8d 	.word	0x08006b8d
 8006ae4:	08006b8d 	.word	0x08006b8d
 8006ae8:	08006b8d 	.word	0x08006b8d
 8006aec:	08006b8d 	.word	0x08006b8d
 8006af0:	08006b77 	.word	0x08006b77
 8006af4:	08006b8d 	.word	0x08006b8d
 8006af8:	08006b8d 	.word	0x08006b8d
 8006afc:	08006b8d 	.word	0x08006b8d
 8006b00:	08006b8d 	.word	0x08006b8d
 8006b04:	08006b8d 	.word	0x08006b8d
 8006b08:	08006b8d 	.word	0x08006b8d
 8006b0c:	08006b8d 	.word	0x08006b8d
 8006b10:	08006b95 	.word	0x08006b95
 8006b14:	08006b8d 	.word	0x08006b8d
 8006b18:	08006b8d 	.word	0x08006b8d
 8006b1c:	08006b8d 	.word	0x08006b8d
 8006b20:	08006b8d 	.word	0x08006b8d
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006b8d 	.word	0x08006b8d
 8006b2c:	08006b8d 	.word	0x08006b8d
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006b8d 	.word	0x08006b8d
 8006b38:	08006b8d 	.word	0x08006b8d
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	08006b8d 	.word	0x08006b8d
 8006b44:	08006b8d 	.word	0x08006b8d
 8006b48:	08006b8d 	.word	0x08006b8d
 8006b4c:	08006b8d 	.word	0x08006b8d
 8006b50:	08006b95 	.word	0x08006b95
 8006b54:	58024400 	.word	0x58024400
 8006b58:	58024800 	.word	0x58024800
 8006b5c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	3308      	adds	r3, #8
 8006b66:	2101      	movs	r1, #1
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 ffa7 	bl	8007abc <RCCEx_PLL2_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b74:	e00f      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7a:	3328      	adds	r3, #40	@ 0x28
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f84e 	bl	8007c20 <RCCEx_PLL3_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006b8a:	e004      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b92:	e000      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b9e:	4bbf      	ldr	r3, [pc, #764]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006bac:	4abb      	ldr	r2, [pc, #748]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bb2:	e003      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	f002 0302 	and.w	r3, r2, #2
 8006bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	d041      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d824      	bhi.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c39 	.word	0x08006c39
 8006bf0:	08006c05 	.word	0x08006c05
 8006bf4:	08006c1b 	.word	0x08006c1b
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c39 	.word	0x08006c39
 8006c00:	08006c39 	.word	0x08006c39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	3308      	adds	r3, #8
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 ff55 	bl	8007abc <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c18:	e00f      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c1e:	3328      	adds	r3, #40	@ 0x28
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fffc 	bl	8007c20 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006c2e:	e004      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c42:	4b96      	ldr	r3, [pc, #600]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c46:	f023 0107 	bic.w	r1, r3, #7
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c50:	4a92      	ldr	r2, [pc, #584]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c52:	430b      	orrs	r3, r1
 8006c54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006c56:	e003      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f002 0304 	and.w	r3, r2, #4
 8006c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d044      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d825      	bhi.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c94 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006ce1 	.word	0x08006ce1
 8006c98:	08006cad 	.word	0x08006cad
 8006c9c:	08006cc3 	.word	0x08006cc3
 8006ca0:	08006ce1 	.word	0x08006ce1
 8006ca4:	08006ce1 	.word	0x08006ce1
 8006ca8:	08006ce1 	.word	0x08006ce1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 ff01 	bl	8007abc <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cc0:	e00f      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	3328      	adds	r3, #40	@ 0x28
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 ffa8 	bl	8007c20 <RCCEx_PLL3_Config>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006cd6:	e004      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cde:	e000      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cea:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f023 0107 	bic.w	r1, r3, #7
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfa:	4a68      	ldr	r2, [pc, #416]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d00:	e003      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f002 0320 	and.w	r3, r2, #32
 8006d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006d20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4313      	orrs	r3, r2
 8006d28:	d055      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d36:	d033      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d3c:	d82c      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d42:	d02f      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d48:	d826      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d4e:	d02b      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d54:	d820      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d5a:	d012      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d60:	d81a      	bhi.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d022      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d6a:	d115      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d70:	3308      	adds	r3, #8
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fea1 	bl	8007abc <RCCEx_PLL2_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d80:	e015      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d86:	3328      	adds	r3, #40	@ 0x28
 8006d88:	2102      	movs	r1, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 ff48 	bl	8007c20 <RCCEx_PLL3_Config>
 8006d90:	4603      	mov	r3, r0
 8006d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006d96:	e00a      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d9e:	e006      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006da0:	bf00      	nop
 8006da2:	e004      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006da4:	bf00      	nop
 8006da6:	e002      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006db6:	4b39      	ldr	r3, [pc, #228]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dc6:	4a35      	ldr	r2, [pc, #212]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6553      	str	r3, [r2, #84]	@ 0x54
 8006dcc:	e003      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006de2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006de6:	2300      	movs	r3, #0
 8006de8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006dec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d058      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006dfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e02:	d033      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006e04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006e08:	d82c      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e0e:	d02f      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e14:	d826      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e1a:	d02b      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e20:	d820      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e26:	d012      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e2c:	d81a      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d022      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e36:	d115      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fe3b 	bl	8007abc <RCCEx_PLL2_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e015      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	3328      	adds	r3, #40	@ 0x28
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fee2 	bl	8007c20 <RCCEx_PLL3_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006e62:	e00a      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e6a:	e006      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e6c:	bf00      	nop
 8006e6e:	e004      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e70:	bf00      	nop
 8006e72:	e002      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10e      	bne.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e82:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e92:	4a02      	ldr	r2, [pc, #8]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e98:	e006      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006eb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ebe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	d055      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ed0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006ed4:	d033      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006ed6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006eda:	d82c      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee0:	d02f      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ee6:	d826      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ee8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006eec:	d02b      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006eee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006ef2:	d820      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ef8:	d012      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006efe:	d81a      	bhi.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d022      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f08:	d115      	bne.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0e:	3308      	adds	r3, #8
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fdd2 	bl	8007abc <RCCEx_PLL2_Config>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f1e:	e015      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	3328      	adds	r3, #40	@ 0x28
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fe79 	bl	8007c20 <RCCEx_PLL3_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006f34:	e00a      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f3c:	e006      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f3e:	bf00      	nop
 8006f40:	e004      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f42:	bf00      	nop
 8006f44:	e002      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f46:	bf00      	nop
 8006f48:	e000      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f54:	4ba0      	ldr	r3, [pc, #640]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f64:	4a9c      	ldr	r2, [pc, #624]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f6a:	e003      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	f002 0308 	and.w	r3, r2, #8
 8006f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4313      	orrs	r3, r2
 8006f92:	d01e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa6:	3328      	adds	r3, #40	@ 0x28
 8006fa8:	2102      	movs	r1, #2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fe38 	bl	8007c20 <RCCEx_PLL3_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006fbc:	4b86      	ldr	r3, [pc, #536]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fcc:	4a82      	ldr	r2, [pc, #520]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f002 0310 	and.w	r3, r2, #16
 8006fde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fe8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d01e      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffe:	d10c      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	3328      	adds	r3, #40	@ 0x28
 8007006:	2102      	movs	r1, #2
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fe09 	bl	8007c20 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800701a:	4b6f      	ldr	r3, [pc, #444]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800701c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702a:	4a6b      	ldr	r2, [pc, #428]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800703c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800703e:	2300      	movs	r3, #0
 8007040:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007042:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007046:	460b      	mov	r3, r1
 8007048:	4313      	orrs	r3, r2
 800704a:	d03e      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007058:	d022      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800705a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800705e:	d81b      	bhi.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007068:	d00b      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800706a:	e015      	b.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800706c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007070:	3308      	adds	r3, #8
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fd21 	bl	8007abc <RCCEx_PLL2_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007080:	e00f      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007086:	3328      	adds	r3, #40	@ 0x28
 8007088:	2102      	movs	r1, #2
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fdc8 	bl	8007c20 <RCCEx_PLL3_Config>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007096:	e004      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80070a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070aa:	4b4b      	ldr	r3, [pc, #300]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80070ba:	4a47      	ldr	r2, [pc, #284]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80070bc:	430b      	orrs	r3, r1
 80070be:	6593      	str	r3, [r2, #88]	@ 0x58
 80070c0:	e003      	b.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80070d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80070d8:	2300      	movs	r3, #0
 80070da:	677b      	str	r3, [r7, #116]	@ 0x74
 80070dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070e0:	460b      	mov	r3, r1
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d03b      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80070e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070f2:	d01f      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070f8:	d818      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80070fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070fe:	d003      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007104:	d007      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007106:	e011      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007108:	4b33      	ldr	r3, [pc, #204]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	4a32      	ldr	r2, [pc, #200]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800710e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007114:	e00f      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800711a:	3328      	adds	r3, #40	@ 0x28
 800711c:	2101      	movs	r1, #1
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fd7e 	bl	8007c20 <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800712a:	e004      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10b      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800713e:	4b26      	ldr	r3, [pc, #152]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007142:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714e:	4a22      	ldr	r2, [pc, #136]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007150:	430b      	orrs	r3, r1
 8007152:	6553      	str	r3, [r2, #84]	@ 0x54
 8007154:	e003      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800715a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800716a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800716c:	2300      	movs	r3, #0
 800716e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007170:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007174:	460b      	mov	r3, r1
 8007176:	4313      	orrs	r3, r2
 8007178:	d034      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007188:	d007      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800718a:	e011      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800718c:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007198:	e00e      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800719a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719e:	3308      	adds	r3, #8
 80071a0:	2102      	movs	r1, #2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fc8a 	bl	8007abc <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80071ae:	e003      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10d      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071c0:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ce:	4a02      	ldr	r2, [pc, #8]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80071d6:	bf00      	nop
 80071d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80071f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071f2:	2300      	movs	r3, #0
 80071f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80071f6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80071fa:	460b      	mov	r3, r1
 80071fc:	4313      	orrs	r3, r2
 80071fe:	d00c      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007204:	3328      	adds	r3, #40	@ 0x28
 8007206:	2102      	movs	r1, #2
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fd09 	bl	8007c20 <RCCEx_PLL3_Config>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007222:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007226:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007228:	2300      	movs	r3, #0
 800722a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007230:	460b      	mov	r3, r1
 8007232:	4313      	orrs	r3, r2
 8007234:	d036      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800723c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007240:	d018      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007246:	d811      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724c:	d014      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800724e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007252:	d80b      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d011      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725c:	d106      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725e:	4bb7      	ldr	r3, [pc, #732]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	4ab6      	ldr	r2, [pc, #728]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800726a:	e008      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007272:	e004      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007274:	bf00      	nop
 8007276:	e002      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007278:	bf00      	nop
 800727a:	e000      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800727c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007286:	4bad      	ldr	r3, [pc, #692]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007292:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007294:	4aa9      	ldr	r2, [pc, #676]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007296:	430b      	orrs	r3, r1
 8007298:	6553      	str	r3, [r2, #84]	@ 0x54
 800729a:	e003      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80072b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80072b2:	2300      	movs	r3, #0
 80072b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80072b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80072ba:	460b      	mov	r3, r1
 80072bc:	4313      	orrs	r3, r2
 80072be:	d009      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072c0:	4b9e      	ldr	r3, [pc, #632]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ce:	4a9b      	ldr	r2, [pc, #620]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072e2:	2300      	movs	r3, #0
 80072e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80072ea:	460b      	mov	r3, r1
 80072ec:	4313      	orrs	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072f0:	4b92      	ldr	r3, [pc, #584]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80072f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fe:	4a8f      	ldr	r2, [pc, #572]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007300:	430b      	orrs	r3, r1
 8007302:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007310:	643b      	str	r3, [r7, #64]	@ 0x40
 8007312:	2300      	movs	r3, #0
 8007314:	647b      	str	r3, [r7, #68]	@ 0x44
 8007316:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d00e      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007320:	4b86      	ldr	r3, [pc, #536]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	4a85      	ldr	r2, [pc, #532]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007326:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800732a:	6113      	str	r3, [r2, #16]
 800732c:	4b83      	ldr	r3, [pc, #524]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800732e:	6919      	ldr	r1, [r3, #16]
 8007330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007334:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007338:	4a80      	ldr	r2, [pc, #512]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800733a:	430b      	orrs	r3, r1
 800733c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800733e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800734a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800734c:	2300      	movs	r3, #0
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007350:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007354:	460b      	mov	r3, r1
 8007356:	4313      	orrs	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800735a:	4b78      	ldr	r3, [pc, #480]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800735c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800735e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007368:	4a74      	ldr	r2, [pc, #464]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800736a:	430b      	orrs	r3, r1
 800736c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
 800737c:	2300      	movs	r3, #0
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800738a:	4b6c      	ldr	r3, [pc, #432]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800738c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800738e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	4a68      	ldr	r2, [pc, #416]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800739c:	430b      	orrs	r3, r1
 800739e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	2100      	movs	r1, #0
 80073aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073b6:	460b      	mov	r3, r1
 80073b8:	4313      	orrs	r3, r2
 80073ba:	d011      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c0:	3308      	adds	r3, #8
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fb79 	bl	8007abc <RCCEx_PLL2_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80073d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	2100      	movs	r1, #0
 80073ea:	6239      	str	r1, [r7, #32]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80073f6:	460b      	mov	r3, r1
 80073f8:	4313      	orrs	r3, r2
 80073fa:	d011      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007400:	3308      	adds	r3, #8
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fb59 	bl	8007abc <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800741c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	2100      	movs	r1, #0
 800742a:	61b9      	str	r1, [r7, #24]
 800742c:	f003 0304 	and.w	r3, r3, #4
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007436:	460b      	mov	r3, r1
 8007438:	4313      	orrs	r3, r2
 800743a:	d011      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	3308      	adds	r3, #8
 8007442:	2102      	movs	r1, #2
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb39 	bl	8007abc <RCCEx_PLL2_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800745c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	2100      	movs	r1, #0
 800746a:	6139      	str	r1, [r7, #16]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	d011      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800747c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007480:	3328      	adds	r3, #40	@ 0x28
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fbcb 	bl	8007c20 <RCCEx_PLL3_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007490:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800749c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	2100      	movs	r1, #0
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	f003 0310 	and.w	r3, r3, #16
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80074b6:	460b      	mov	r3, r1
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d011      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fbab 	bl	8007c20 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80074d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	2100      	movs	r1, #0
 80074ea:	6039      	str	r1, [r7, #0]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80074f6:	460b      	mov	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	d011      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	3328      	adds	r3, #40	@ 0x28
 8007502:	2102      	movs	r1, #2
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fb8b 	bl	8007c20 <RCCEx_PLL3_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800751c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007520:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
}
 800752e:	4618      	mov	r0, r3
 8007530:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007534:	46bd      	mov	sp, r7
 8007536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800753a:	bf00      	nop
 800753c:	58024400 	.word	0x58024400

08007540 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007544:	f7fe fe00 	bl	8006148 <HAL_RCC_GetHCLKFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	091b      	lsrs	r3, r3, #4
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	4904      	ldr	r1, [pc, #16]	@ (8007568 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	58024400 	.word	0x58024400
 8007568:	0800b468 	.word	0x0800b468

0800756c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800756c:	b480      	push	{r7}
 800756e:	b089      	sub	sp, #36	@ 0x24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007574:	4ba1      	ldr	r3, [pc, #644]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	f003 0303 	and.w	r3, r3, #3
 800757c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800757e:	4b9f      	ldr	r3, [pc, #636]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	0b1b      	lsrs	r3, r3, #12
 8007584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007588:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800758a:	4b9c      	ldr	r3, [pc, #624]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800758c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800758e:	091b      	lsrs	r3, r3, #4
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007596:	4b99      	ldr	r3, [pc, #612]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	fb02 f303 	mul.w	r3, r2, r3
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8111 	beq.w	80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	f000 8083 	beq.w	80076c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f200 80a1 	bhi.w	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d056      	beq.n	8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075d6:	e099      	b.n	800770c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075d8:	4b88      	ldr	r3, [pc, #544]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d02d      	beq.n	8007640 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075e4:	4b85      	ldr	r3, [pc, #532]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	08db      	lsrs	r3, r3, #3
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	4a84      	ldr	r2, [pc, #528]	@ (8007800 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760e:	4b7b      	ldr	r3, [pc, #492]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007622:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800763e:	e087      	b.n	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800764e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007652:	4b6a      	ldr	r3, [pc, #424]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	ed97 6a03 	vldr	s12, [r7, #12]
 8007666:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800766a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007682:	e065      	b.n	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007696:	4b59      	ldr	r3, [pc, #356]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c6:	e043      	b.n	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	4b48      	ldr	r3, [pc, #288]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770a:	e021      	b.n	8007750 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007716:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800771a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771e:	4b37      	ldr	r3, [pc, #220]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800772e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007732:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800773a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800773e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800774a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800774e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007750:	4b2a      	ldr	r3, [pc, #168]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800776a:	edd7 6a07 	vldr	s13, [r7, #28]
 800776e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007776:	ee17 2a90 	vmov	r2, s15
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800777e:	4b1f      	ldr	r3, [pc, #124]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007794:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007798:	edd7 6a07 	vldr	s13, [r7, #28]
 800779c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a4:	ee17 2a90 	vmov	r2, s15
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077ac:	4b13      	ldr	r3, [pc, #76]	@ (80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	0e1b      	lsrs	r3, r3, #24
 80077b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80077ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d2:	ee17 2a90 	vmov	r2, s15
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077da:	e008      	b.n	80077ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	609a      	str	r2, [r3, #8]
}
 80077ee:	bf00      	nop
 80077f0:	3724      	adds	r7, #36	@ 0x24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	58024400 	.word	0x58024400
 8007800:	03d09000 	.word	0x03d09000
 8007804:	46000000 	.word	0x46000000
 8007808:	4c742400 	.word	0x4c742400
 800780c:	4a742400 	.word	0x4a742400
 8007810:	4bbebc20 	.word	0x4bbebc20

08007814 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007814:	b480      	push	{r7}
 8007816:	b089      	sub	sp, #36	@ 0x24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800781c:	4ba1      	ldr	r3, [pc, #644]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007826:	4b9f      	ldr	r3, [pc, #636]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	0d1b      	lsrs	r3, r3, #20
 800782c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007830:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007832:	4b9c      	ldr	r3, [pc, #624]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800783e:	4b99      	ldr	r3, [pc, #612]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	08db      	lsrs	r3, r3, #3
 8007844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	fb02 f303 	mul.w	r3, r2, r3
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 8111 	beq.w	8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b02      	cmp	r3, #2
 8007866:	f000 8083 	beq.w	8007970 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b02      	cmp	r3, #2
 800786e:	f200 80a1 	bhi.w	80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d056      	beq.n	800792c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800787e:	e099      	b.n	80079b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007880:	4b88      	ldr	r3, [pc, #544]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0320 	and.w	r3, r3, #32
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02d      	beq.n	80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800788c:	4b85      	ldr	r3, [pc, #532]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	08db      	lsrs	r3, r3, #3
 8007892:	f003 0303 	and.w	r3, r3, #3
 8007896:	4a84      	ldr	r2, [pc, #528]	@ (8007aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007898:	fa22 f303 	lsr.w	r3, r2, r3
 800789c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b6:	4b7b      	ldr	r3, [pc, #492]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80078e6:	e087      	b.n	80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fa:	4b6a      	ldr	r3, [pc, #424]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	ed97 6a03 	vldr	s12, [r7, #12]
 800790e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792a:	e065      	b.n	80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007936:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800793a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793e:	4b59      	ldr	r3, [pc, #356]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007952:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800796e:	e043      	b.n	80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	4b48      	ldr	r3, [pc, #288]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007992:	ed97 6a03 	vldr	s12, [r7, #12]
 8007996:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800799a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079b2:	e021      	b.n	80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c6:	4b37      	ldr	r3, [pc, #220]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80079f8:	4b2a      	ldr	r3, [pc, #168]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	0a5b      	lsrs	r3, r3, #9
 80079fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a02:	ee07 3a90 	vmov	s15, r3
 8007a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a12:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1e:	ee17 2a90 	vmov	r2, s15
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a26:	4b1f      	ldr	r3, [pc, #124]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2a:	0c1b      	lsrs	r3, r3, #16
 8007a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a30:	ee07 3a90 	vmov	s15, r3
 8007a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a4c:	ee17 2a90 	vmov	r2, s15
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a54:	4b13      	ldr	r3, [pc, #76]	@ (8007aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a58:	0e1b      	lsrs	r3, r3, #24
 8007a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a5e:	ee07 3a90 	vmov	s15, r3
 8007a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a7a:	ee17 2a90 	vmov	r2, s15
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a82:	e008      	b.n	8007a96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	609a      	str	r2, [r3, #8]
}
 8007a96:	bf00      	nop
 8007a98:	3724      	adds	r7, #36	@ 0x24
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	58024400 	.word	0x58024400
 8007aa8:	03d09000 	.word	0x03d09000
 8007aac:	46000000 	.word	0x46000000
 8007ab0:	4c742400 	.word	0x4c742400
 8007ab4:	4a742400 	.word	0x4a742400
 8007ab8:	4bbebc20 	.word	0x4bbebc20

08007abc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aca:	4b53      	ldr	r3, [pc, #332]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d101      	bne.n	8007ada <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e099      	b.n	8007c0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ada:	4b4f      	ldr	r3, [pc, #316]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a4e      	ldr	r2, [pc, #312]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae6:	f7f9 ffff 	bl	8001ae8 <HAL_GetTick>
 8007aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007aec:	e008      	b.n	8007b00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aee:	f7f9 fffb 	bl	8001ae8 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e086      	b.n	8007c0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b00:	4b45      	ldr	r3, [pc, #276]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f0      	bne.n	8007aee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b0c:	4b42      	ldr	r3, [pc, #264]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	031b      	lsls	r3, r3, #12
 8007b1a:	493f      	ldr	r1, [pc, #252]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	025b      	lsls	r3, r3, #9
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	041b      	lsls	r3, r3, #16
 8007b3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	061b      	lsls	r3, r3, #24
 8007b4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007b50:	4931      	ldr	r1, [pc, #196]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b56:	4b30      	ldr	r3, [pc, #192]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	492d      	ldr	r1, [pc, #180]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b68:	4b2b      	ldr	r3, [pc, #172]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	f023 0220 	bic.w	r2, r3, #32
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	4928      	ldr	r1, [pc, #160]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b7a:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	4a26      	ldr	r2, [pc, #152]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b80:	f023 0310 	bic.w	r3, r3, #16
 8007b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b86:	4b24      	ldr	r3, [pc, #144]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b8a:	4b24      	ldr	r3, [pc, #144]	@ (8007c1c <RCCEx_PLL2_Config+0x160>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	69d2      	ldr	r2, [r2, #28]
 8007b92:	00d2      	lsls	r2, r2, #3
 8007b94:	4920      	ldr	r1, [pc, #128]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	f043 0310 	orr.w	r3, r3, #16
 8007ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d106      	bne.n	8007bba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bac:	4b1a      	ldr	r3, [pc, #104]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb0:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bb8:	e00f      	b.n	8007bda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d106      	bne.n	8007bce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bc0:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	4a14      	ldr	r2, [pc, #80]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007bcc:	e005      	b.n	8007bda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bce:	4b12      	ldr	r3, [pc, #72]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	4a11      	ldr	r2, [pc, #68]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bda:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a0e      	ldr	r2, [pc, #56]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007be0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be6:	f7f9 ff7f 	bl	8001ae8 <HAL_GetTick>
 8007bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bec:	e008      	b.n	8007c00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bee:	f7f9 ff7b 	bl	8001ae8 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e006      	b.n	8007c0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c00:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <RCCEx_PLL2_Config+0x15c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0f0      	beq.n	8007bee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	58024400 	.word	0x58024400
 8007c1c:	ffff0007 	.word	0xffff0007

08007c20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c2e:	4b53      	ldr	r3, [pc, #332]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c32:	f003 0303 	and.w	r3, r3, #3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d101      	bne.n	8007c3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e099      	b.n	8007d72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c3e:	4b4f      	ldr	r3, [pc, #316]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a4e      	ldr	r2, [pc, #312]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c4a:	f7f9 ff4d 	bl	8001ae8 <HAL_GetTick>
 8007c4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c50:	e008      	b.n	8007c64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c52:	f7f9 ff49 	bl	8001ae8 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e086      	b.n	8007d72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c64:	4b45      	ldr	r3, [pc, #276]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f0      	bne.n	8007c52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c70:	4b42      	ldr	r3, [pc, #264]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	051b      	lsls	r3, r3, #20
 8007c7e:	493f      	ldr	r1, [pc, #252]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	025b      	lsls	r3, r3, #9
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	061b      	lsls	r3, r3, #24
 8007cb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007cb4:	4931      	ldr	r1, [pc, #196]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cba:	4b30      	ldr	r3, [pc, #192]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	492d      	ldr	r1, [pc, #180]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	4928      	ldr	r1, [pc, #160]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cde:	4b27      	ldr	r3, [pc, #156]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce2:	4a26      	ldr	r2, [pc, #152]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cea:	4b24      	ldr	r3, [pc, #144]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cee:	4b24      	ldr	r3, [pc, #144]	@ (8007d80 <RCCEx_PLL3_Config+0x160>)
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	69d2      	ldr	r2, [r2, #28]
 8007cf6:	00d2      	lsls	r2, r2, #3
 8007cf8:	4920      	ldr	r1, [pc, #128]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d02:	4a1e      	ldr	r2, [pc, #120]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d10:	4b1a      	ldr	r3, [pc, #104]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d14:	4a19      	ldr	r2, [pc, #100]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d1c:	e00f      	b.n	8007d3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d106      	bne.n	8007d32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d24:	4b15      	ldr	r3, [pc, #84]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	4a14      	ldr	r2, [pc, #80]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007d30:	e005      	b.n	8007d3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d32:	4b12      	ldr	r3, [pc, #72]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d36:	4a11      	ldr	r2, [pc, #68]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a0e      	ldr	r2, [pc, #56]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d4a:	f7f9 fecd 	bl	8001ae8 <HAL_GetTick>
 8007d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d50:	e008      	b.n	8007d64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d52:	f7f9 fec9 	bl	8001ae8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e006      	b.n	8007d72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d64:	4b05      	ldr	r3, [pc, #20]	@ (8007d7c <RCCEx_PLL3_Config+0x15c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0f0      	beq.n	8007d52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	ffff0007 	.word	0xffff0007

08007d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e049      	b.n	8007e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7f9 fb40 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f000 fc58 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d001      	beq.n	8007e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e05e      	b.n	8007f0a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a2b      	ldr	r2, [pc, #172]	@ (8007f18 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d02c      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e76:	d027      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a27      	ldr	r2, [pc, #156]	@ (8007f1c <HAL_TIM_Base_Start_IT+0xe8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d022      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a26      	ldr	r2, [pc, #152]	@ (8007f20 <HAL_TIM_Base_Start_IT+0xec>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d01d      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a24      	ldr	r2, [pc, #144]	@ (8007f24 <HAL_TIM_Base_Start_IT+0xf0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d018      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a23      	ldr	r2, [pc, #140]	@ (8007f28 <HAL_TIM_Base_Start_IT+0xf4>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d013      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a21      	ldr	r2, [pc, #132]	@ (8007f2c <HAL_TIM_Base_Start_IT+0xf8>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00e      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a20      	ldr	r2, [pc, #128]	@ (8007f30 <HAL_TIM_Base_Start_IT+0xfc>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d009      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f34 <HAL_TIM_Base_Start_IT+0x100>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d004      	beq.n	8007ec8 <HAL_TIM_Base_Start_IT+0x94>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <HAL_TIM_Base_Start_IT+0x104>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d115      	bne.n	8007ef4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	4b1b      	ldr	r3, [pc, #108]	@ (8007f3c <HAL_TIM_Base_Start_IT+0x108>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b06      	cmp	r3, #6
 8007ed8:	d015      	beq.n	8007f06 <HAL_TIM_Base_Start_IT+0xd2>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ee0:	d011      	beq.n	8007f06 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0201 	orr.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	e008      	b.n	8007f06 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	e000      	b.n	8007f08 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	40001800 	.word	0x40001800
 8007f30:	40014000 	.word	0x40014000
 8007f34:	4000e000 	.word	0x4000e000
 8007f38:	4000e400 	.word	0x4000e400
 8007f3c:	00010007 	.word	0x00010007

08007f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e049      	b.n	8007fe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f841 	bl	8007fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f000 fb7a 	bl	8008678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01b      	beq.n	8008066 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f06f 0202 	mvn.w	r2, #2
 8008036:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 faf5 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 8008052:	e005      	b.n	8008060 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fae7 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 faf8 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d020      	beq.n	80080b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d01b      	beq.n	80080b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f06f 0204 	mvn.w	r2, #4
 8008082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 facf 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 800809e:	e005      	b.n	80080ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fac1 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fad2 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d020      	beq.n	80080fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d01b      	beq.n	80080fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f06f 0208 	mvn.w	r2, #8
 80080ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2204      	movs	r2, #4
 80080d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 faa9 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 80080ea:	e005      	b.n	80080f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fa9b 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 faac 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f003 0310 	and.w	r3, r3, #16
 8008104:	2b00      	cmp	r3, #0
 8008106:	d020      	beq.n	800814a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b00      	cmp	r3, #0
 8008110:	d01b      	beq.n	800814a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f06f 0210 	mvn.w	r2, #16
 800811a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2208      	movs	r2, #8
 8008120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fa83 	bl	800863c <HAL_TIM_IC_CaptureCallback>
 8008136:	e005      	b.n	8008144 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa75 	bl	8008628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa86 	bl	8008650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00c      	beq.n	800816e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f06f 0201 	mvn.w	r2, #1
 8008166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7f9 f801 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00c      	beq.n	800819c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008188:	2b00      	cmp	r3, #0
 800818a:	d007      	beq.n	800819c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 ff3a 	bl	8009010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 ff32 	bl	8009024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00c      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa40 	bl	8008664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0220 	mvn.w	r2, #32
 8008200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fefa 	bl	8008ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008208:	bf00      	nop
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800822a:	2302      	movs	r3, #2
 800822c:	e0ff      	b.n	800842e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b14      	cmp	r3, #20
 800823a:	f200 80f0 	bhi.w	800841e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800823e:	a201      	add	r2, pc, #4	@ (adr r2, 8008244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008299 	.word	0x08008299
 8008248:	0800841f 	.word	0x0800841f
 800824c:	0800841f 	.word	0x0800841f
 8008250:	0800841f 	.word	0x0800841f
 8008254:	080082d9 	.word	0x080082d9
 8008258:	0800841f 	.word	0x0800841f
 800825c:	0800841f 	.word	0x0800841f
 8008260:	0800841f 	.word	0x0800841f
 8008264:	0800831b 	.word	0x0800831b
 8008268:	0800841f 	.word	0x0800841f
 800826c:	0800841f 	.word	0x0800841f
 8008270:	0800841f 	.word	0x0800841f
 8008274:	0800835b 	.word	0x0800835b
 8008278:	0800841f 	.word	0x0800841f
 800827c:	0800841f 	.word	0x0800841f
 8008280:	0800841f 	.word	0x0800841f
 8008284:	0800839d 	.word	0x0800839d
 8008288:	0800841f 	.word	0x0800841f
 800828c:	0800841f 	.word	0x0800841f
 8008290:	0800841f 	.word	0x0800841f
 8008294:	080083dd 	.word	0x080083dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fa9c 	bl	80087dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0208 	orr.w	r2, r2, #8
 80082b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0204 	bic.w	r2, r2, #4
 80082c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6999      	ldr	r1, [r3, #24]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	619a      	str	r2, [r3, #24]
      break;
 80082d6:	e0a5      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fb0c 	bl	80088fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	021a      	lsls	r2, r3, #8
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	619a      	str	r2, [r3, #24]
      break;
 8008318:	e084      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fb75 	bl	8008a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0208 	orr.w	r2, r2, #8
 8008334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0204 	bic.w	r2, r2, #4
 8008344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69d9      	ldr	r1, [r3, #28]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	61da      	str	r2, [r3, #28]
      break;
 8008358:	e064      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fbdd 	bl	8008b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	021a      	lsls	r2, r3, #8
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	61da      	str	r2, [r3, #28]
      break;
 800839a:	e043      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fc26 	bl	8008bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0208 	orr.w	r2, r2, #8
 80083b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0204 	bic.w	r2, r2, #4
 80083c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	691a      	ldr	r2, [r3, #16]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80083da:	e023      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fc6a 	bl	8008cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	021a      	lsls	r2, r3, #8
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800841c:	e002      	b.n	8008424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	75fb      	strb	r3, [r7, #23]
      break;
 8008422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_TIM_ConfigClockSource+0x1c>
 8008450:	2302      	movs	r3, #2
 8008452:	e0dc      	b.n	800860e <HAL_TIM_ConfigClockSource+0x1d6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	4b6a      	ldr	r3, [pc, #424]	@ (8008618 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008470:	4013      	ands	r3, r2
 8008472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800847a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a64      	ldr	r2, [pc, #400]	@ (800861c <HAL_TIM_ConfigClockSource+0x1e4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	f000 80a9 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008490:	4a62      	ldr	r2, [pc, #392]	@ (800861c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	f200 80ae 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008498:	4a61      	ldr	r2, [pc, #388]	@ (8008620 <HAL_TIM_ConfigClockSource+0x1e8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	f000 80a1 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80084a0:	4a5f      	ldr	r2, [pc, #380]	@ (8008620 <HAL_TIM_ConfigClockSource+0x1e8>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	f200 80a6 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084a8:	4a5e      	ldr	r2, [pc, #376]	@ (8008624 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	f000 8099 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80084b0:	4a5c      	ldr	r2, [pc, #368]	@ (8008624 <HAL_TIM_ConfigClockSource+0x1ec>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	f200 809e 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084bc:	f000 8091 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80084c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084c4:	f200 8096 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084cc:	f000 8089 	beq.w	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 80084d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084d4:	f200 808e 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084dc:	d03e      	beq.n	800855c <HAL_TIM_ConfigClockSource+0x124>
 80084de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e2:	f200 8087 	bhi.w	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ea:	f000 8086 	beq.w	80085fa <HAL_TIM_ConfigClockSource+0x1c2>
 80084ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f2:	d87f      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084f4:	2b70      	cmp	r3, #112	@ 0x70
 80084f6:	d01a      	beq.n	800852e <HAL_TIM_ConfigClockSource+0xf6>
 80084f8:	2b70      	cmp	r3, #112	@ 0x70
 80084fa:	d87b      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 80084fc:	2b60      	cmp	r3, #96	@ 0x60
 80084fe:	d050      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x16a>
 8008500:	2b60      	cmp	r3, #96	@ 0x60
 8008502:	d877      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008504:	2b50      	cmp	r3, #80	@ 0x50
 8008506:	d03c      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x14a>
 8008508:	2b50      	cmp	r3, #80	@ 0x50
 800850a:	d873      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	d058      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x18a>
 8008510:	2b40      	cmp	r3, #64	@ 0x40
 8008512:	d86f      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008514:	2b30      	cmp	r3, #48	@ 0x30
 8008516:	d064      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008518:	2b30      	cmp	r3, #48	@ 0x30
 800851a:	d86b      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 800851c:	2b20      	cmp	r3, #32
 800851e:	d060      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008520:	2b20      	cmp	r3, #32
 8008522:	d867      	bhi.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d05c      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008528:	2b10      	cmp	r3, #16
 800852a:	d05a      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x1aa>
 800852c:	e062      	b.n	80085f4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800853e:	f000 fca1 	bl	8008e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008550:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	609a      	str	r2, [r3, #8]
      break;
 800855a:	e04f      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800856c:	f000 fc8a 	bl	8008e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689a      	ldr	r2, [r3, #8]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800857e:	609a      	str	r2, [r3, #8]
      break;
 8008580:	e03c      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	461a      	mov	r2, r3
 8008590:	f000 fbfa 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2150      	movs	r1, #80	@ 0x50
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fc54 	bl	8008e48 <TIM_ITRx_SetConfig>
      break;
 80085a0:	e02c      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ae:	461a      	mov	r2, r3
 80085b0:	f000 fc19 	bl	8008de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2160      	movs	r1, #96	@ 0x60
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fc44 	bl	8008e48 <TIM_ITRx_SetConfig>
      break;
 80085c0:	e01c      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ce:	461a      	mov	r2, r3
 80085d0:	f000 fbda 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2140      	movs	r1, #64	@ 0x40
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fc34 	bl	8008e48 <TIM_ITRx_SetConfig>
      break;
 80085e0:	e00c      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f000 fc2b 	bl	8008e48 <TIM_ITRx_SetConfig>
      break;
 80085f2:	e003      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	73fb      	strb	r3, [r7, #15]
      break;
 80085f8:	e000      	b.n	80085fc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80085fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	ffceff88 	.word	0xffceff88
 800861c:	00100040 	.word	0x00100040
 8008620:	00100030 	.word	0x00100030
 8008624:	00100020 	.word	0x00100020

08008628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a4a      	ldr	r2, [pc, #296]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008696:	d00f      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a47      	ldr	r2, [pc, #284]	@ (80087b8 <TIM_Base_SetConfig+0x140>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d00b      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a46      	ldr	r2, [pc, #280]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a45      	ldr	r2, [pc, #276]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d003      	beq.n	80086b8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a44      	ldr	r2, [pc, #272]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a39      	ldr	r2, [pc, #228]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d027      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d8:	d023      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a36      	ldr	r2, [pc, #216]	@ (80087b8 <TIM_Base_SetConfig+0x140>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d01f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a35      	ldr	r2, [pc, #212]	@ (80087bc <TIM_Base_SetConfig+0x144>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a34      	ldr	r2, [pc, #208]	@ (80087c0 <TIM_Base_SetConfig+0x148>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d017      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a33      	ldr	r2, [pc, #204]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d013      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a32      	ldr	r2, [pc, #200]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00f      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a31      	ldr	r2, [pc, #196]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00b      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a30      	ldr	r2, [pc, #192]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d007      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a2f      	ldr	r2, [pc, #188]	@ (80087d4 <TIM_Base_SetConfig+0x15c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d003      	beq.n	8008722 <TIM_Base_SetConfig+0xaa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2e      	ldr	r2, [pc, #184]	@ (80087d8 <TIM_Base_SetConfig+0x160>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d108      	bne.n	8008734 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a16      	ldr	r2, [pc, #88]	@ (80087b4 <TIM_Base_SetConfig+0x13c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00f      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a18      	ldr	r2, [pc, #96]	@ (80087c4 <TIM_Base_SetConfig+0x14c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d00b      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a17      	ldr	r2, [pc, #92]	@ (80087c8 <TIM_Base_SetConfig+0x150>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d007      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a16      	ldr	r2, [pc, #88]	@ (80087cc <TIM_Base_SetConfig+0x154>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0x108>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <TIM_Base_SetConfig+0x158>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d103      	bne.n	8008788 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b01      	cmp	r3, #1
 8008798:	d105      	bne.n	80087a6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f023 0201 	bic.w	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	611a      	str	r2, [r3, #16]
  }
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40000400 	.word	0x40000400
 80087bc:	40000800 	.word	0x40000800
 80087c0:	40000c00 	.word	0x40000c00
 80087c4:	40010400 	.word	0x40010400
 80087c8:	40014000 	.word	0x40014000
 80087cc:	40014400 	.word	0x40014400
 80087d0:	40014800 	.word	0x40014800
 80087d4:	4000e000 	.word	0x4000e000
 80087d8:	4000e400 	.word	0x4000e400

080087dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f023 0201 	bic.w	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4b37      	ldr	r3, [pc, #220]	@ (80088e4 <TIM_OC1_SetConfig+0x108>)
 8008808:	4013      	ands	r3, r2
 800880a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 0303 	bic.w	r3, r3, #3
 8008812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f023 0302 	bic.w	r3, r3, #2
 8008824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a2d      	ldr	r2, [pc, #180]	@ (80088e8 <TIM_OC1_SetConfig+0x10c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00f      	beq.n	8008858 <TIM_OC1_SetConfig+0x7c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a2c      	ldr	r2, [pc, #176]	@ (80088ec <TIM_OC1_SetConfig+0x110>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00b      	beq.n	8008858 <TIM_OC1_SetConfig+0x7c>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a2b      	ldr	r2, [pc, #172]	@ (80088f0 <TIM_OC1_SetConfig+0x114>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d007      	beq.n	8008858 <TIM_OC1_SetConfig+0x7c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a2a      	ldr	r2, [pc, #168]	@ (80088f4 <TIM_OC1_SetConfig+0x118>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC1_SetConfig+0x7c>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a29      	ldr	r2, [pc, #164]	@ (80088f8 <TIM_OC1_SetConfig+0x11c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d10c      	bne.n	8008872 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0308 	bic.w	r3, r3, #8
 800885e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f023 0304 	bic.w	r3, r3, #4
 8008870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1c      	ldr	r2, [pc, #112]	@ (80088e8 <TIM_OC1_SetConfig+0x10c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d00f      	beq.n	800889a <TIM_OC1_SetConfig+0xbe>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a1b      	ldr	r2, [pc, #108]	@ (80088ec <TIM_OC1_SetConfig+0x110>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00b      	beq.n	800889a <TIM_OC1_SetConfig+0xbe>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a1a      	ldr	r2, [pc, #104]	@ (80088f0 <TIM_OC1_SetConfig+0x114>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d007      	beq.n	800889a <TIM_OC1_SetConfig+0xbe>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a19      	ldr	r2, [pc, #100]	@ (80088f4 <TIM_OC1_SetConfig+0x118>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_OC1_SetConfig+0xbe>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a18      	ldr	r2, [pc, #96]	@ (80088f8 <TIM_OC1_SetConfig+0x11c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d111      	bne.n	80088be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	621a      	str	r2, [r3, #32]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	fffeff8f 	.word	0xfffeff8f
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400
 80088f0:	40014000 	.word	0x40014000
 80088f4:	40014400 	.word	0x40014400
 80088f8:	40014800 	.word	0x40014800

080088fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	f023 0210 	bic.w	r2, r3, #16
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4b34      	ldr	r3, [pc, #208]	@ (80089f8 <TIM_OC2_SetConfig+0xfc>)
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	021b      	lsls	r3, r3, #8
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f023 0320 	bic.w	r3, r3, #32
 8008946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a29      	ldr	r2, [pc, #164]	@ (80089fc <TIM_OC2_SetConfig+0x100>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d003      	beq.n	8008964 <TIM_OC2_SetConfig+0x68>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a28      	ldr	r2, [pc, #160]	@ (8008a00 <TIM_OC2_SetConfig+0x104>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d10d      	bne.n	8008980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	4313      	orrs	r3, r2
 8008976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800897e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a1e      	ldr	r2, [pc, #120]	@ (80089fc <TIM_OC2_SetConfig+0x100>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00f      	beq.n	80089a8 <TIM_OC2_SetConfig+0xac>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a1d      	ldr	r2, [pc, #116]	@ (8008a00 <TIM_OC2_SetConfig+0x104>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00b      	beq.n	80089a8 <TIM_OC2_SetConfig+0xac>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a1c      	ldr	r2, [pc, #112]	@ (8008a04 <TIM_OC2_SetConfig+0x108>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d007      	beq.n	80089a8 <TIM_OC2_SetConfig+0xac>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a1b      	ldr	r2, [pc, #108]	@ (8008a08 <TIM_OC2_SetConfig+0x10c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC2_SetConfig+0xac>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a0c <TIM_OC2_SetConfig+0x110>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d113      	bne.n	80089d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	feff8fff 	.word	0xfeff8fff
 80089fc:	40010000 	.word	0x40010000
 8008a00:	40010400 	.word	0x40010400
 8008a04:	40014000 	.word	0x40014000
 8008a08:	40014400 	.word	0x40014400
 8008a0c:	40014800 	.word	0x40014800

08008a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4b33      	ldr	r3, [pc, #204]	@ (8008b08 <TIM_OC3_SetConfig+0xf8>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a28      	ldr	r2, [pc, #160]	@ (8008b0c <TIM_OC3_SetConfig+0xfc>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_OC3_SetConfig+0x66>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a27      	ldr	r2, [pc, #156]	@ (8008b10 <TIM_OC3_SetConfig+0x100>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10d      	bne.n	8008a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1d      	ldr	r2, [pc, #116]	@ (8008b0c <TIM_OC3_SetConfig+0xfc>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00f      	beq.n	8008aba <TIM_OC3_SetConfig+0xaa>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8008b10 <TIM_OC3_SetConfig+0x100>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00b      	beq.n	8008aba <TIM_OC3_SetConfig+0xaa>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8008b14 <TIM_OC3_SetConfig+0x104>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d007      	beq.n	8008aba <TIM_OC3_SetConfig+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a1a      	ldr	r2, [pc, #104]	@ (8008b18 <TIM_OC3_SetConfig+0x108>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <TIM_OC3_SetConfig+0xaa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a19      	ldr	r2, [pc, #100]	@ (8008b1c <TIM_OC3_SetConfig+0x10c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d113      	bne.n	8008ae2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	621a      	str	r2, [r3, #32]
}
 8008afc:	bf00      	nop
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	fffeff8f 	.word	0xfffeff8f
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4b24      	ldr	r3, [pc, #144]	@ (8008bdc <TIM_OC4_SetConfig+0xbc>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	021b      	lsls	r3, r3, #8
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	031b      	lsls	r3, r3, #12
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a19      	ldr	r2, [pc, #100]	@ (8008be0 <TIM_OC4_SetConfig+0xc0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00f      	beq.n	8008ba0 <TIM_OC4_SetConfig+0x80>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a18      	ldr	r2, [pc, #96]	@ (8008be4 <TIM_OC4_SetConfig+0xc4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00b      	beq.n	8008ba0 <TIM_OC4_SetConfig+0x80>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a17      	ldr	r2, [pc, #92]	@ (8008be8 <TIM_OC4_SetConfig+0xc8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d007      	beq.n	8008ba0 <TIM_OC4_SetConfig+0x80>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a16      	ldr	r2, [pc, #88]	@ (8008bec <TIM_OC4_SetConfig+0xcc>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC4_SetConfig+0x80>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a15      	ldr	r2, [pc, #84]	@ (8008bf0 <TIM_OC4_SetConfig+0xd0>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d109      	bne.n	8008bb4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	019b      	lsls	r3, r3, #6
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	621a      	str	r2, [r3, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	feff8fff 	.word	0xfeff8fff
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40010400 	.word	0x40010400
 8008be8:	40014000 	.word	0x40014000
 8008bec:	40014400 	.word	0x40014400
 8008bf0:	40014800 	.word	0x40014800

08008bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4b21      	ldr	r3, [pc, #132]	@ (8008ca4 <TIM_OC5_SetConfig+0xb0>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a18      	ldr	r2, [pc, #96]	@ (8008ca8 <TIM_OC5_SetConfig+0xb4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00f      	beq.n	8008c6a <TIM_OC5_SetConfig+0x76>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a17      	ldr	r2, [pc, #92]	@ (8008cac <TIM_OC5_SetConfig+0xb8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00b      	beq.n	8008c6a <TIM_OC5_SetConfig+0x76>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a16      	ldr	r2, [pc, #88]	@ (8008cb0 <TIM_OC5_SetConfig+0xbc>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d007      	beq.n	8008c6a <TIM_OC5_SetConfig+0x76>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a15      	ldr	r2, [pc, #84]	@ (8008cb4 <TIM_OC5_SetConfig+0xc0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d003      	beq.n	8008c6a <TIM_OC5_SetConfig+0x76>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a14      	ldr	r2, [pc, #80]	@ (8008cb8 <TIM_OC5_SetConfig+0xc4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d109      	bne.n	8008c7e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	021b      	lsls	r3, r3, #8
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	621a      	str	r2, [r3, #32]
}
 8008c98:	bf00      	nop
 8008c9a:	371c      	adds	r7, #28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	fffeff8f 	.word	0xfffeff8f
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	40010400 	.word	0x40010400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4b22      	ldr	r3, [pc, #136]	@ (8008d70 <TIM_OC6_SetConfig+0xb4>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	051b      	lsls	r3, r3, #20
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a19      	ldr	r2, [pc, #100]	@ (8008d74 <TIM_OC6_SetConfig+0xb8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00f      	beq.n	8008d34 <TIM_OC6_SetConfig+0x78>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a18      	ldr	r2, [pc, #96]	@ (8008d78 <TIM_OC6_SetConfig+0xbc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00b      	beq.n	8008d34 <TIM_OC6_SetConfig+0x78>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	@ (8008d7c <TIM_OC6_SetConfig+0xc0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_OC6_SetConfig+0x78>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a16      	ldr	r2, [pc, #88]	@ (8008d80 <TIM_OC6_SetConfig+0xc4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_OC6_SetConfig+0x78>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <TIM_OC6_SetConfig+0xc8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d109      	bne.n	8008d48 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	029b      	lsls	r3, r3, #10
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	feff8fff 	.word	0xfeff8fff
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40014400 	.word	0x40014400
 8008d84:	40014800 	.word	0x40014800

08008d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f023 0201 	bic.w	r2, r3, #1
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 030a 	bic.w	r3, r3, #10
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	f023 0210 	bic.w	r2, r3, #16
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	031b      	lsls	r3, r3, #12
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	621a      	str	r2, [r3, #32]
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
	...

08008e48 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4b09      	ldr	r3, [pc, #36]	@ (8008e80 <TIM_ITRx_SetConfig+0x38>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	f043 0307 	orr.w	r3, r3, #7
 8008e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	609a      	str	r2, [r3, #8]
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	ffcfff8f 	.word	0xffcfff8f

08008e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	021a      	lsls	r2, r3, #8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	609a      	str	r2, [r3, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e077      	b.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a35      	ldr	r2, [pc, #212]	@ (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a34      	ldr	r2, [pc, #208]	@ (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d108      	bne.n	8008f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a25      	ldr	r2, [pc, #148]	@ (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d02c      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4e:	d027      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a22      	ldr	r2, [pc, #136]	@ (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d022      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a21      	ldr	r2, [pc, #132]	@ (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d01d      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d018      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a1a      	ldr	r2, [pc, #104]	@ (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d013      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00e      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a18      	ldr	r2, [pc, #96]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d004      	beq.n	8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a17      	ldr	r2, [pc, #92]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10c      	bne.n	8008fba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40010400 	.word	0x40010400
 8008fe0:	40000400 	.word	0x40000400
 8008fe4:	40000800 	.word	0x40000800
 8008fe8:	40000c00 	.word	0x40000c00
 8008fec:	40001800 	.word	0x40001800
 8008ff0:	40014000 	.word	0x40014000
 8008ff4:	4000e000 	.word	0x4000e000
 8008ff8:	4000e400 	.word	0x4000e400

08008ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e04a      	b.n	80090e0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7f8 fa0d 	bl	800147c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2224      	movs	r2, #36	@ 0x24
 8009066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0201 	bic.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 fba6 	bl	800a7d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fd37 	bl	8009afc <UART_SetConfig>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e023      	b.n	80090e0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80090b6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0208 	orr.w	r2, r2, #8
 80090c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fc1d 	bl	800a918 <UART_CheckIdleState>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	@ 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d167      	bne.n	80091d0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_UART_Transmit_DMA+0x24>
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e060      	b.n	80091d2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	88fa      	ldrh	r2, [r7, #6]
 800911a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	88fa      	ldrh	r2, [r7, #6]
 8009122:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2221      	movs	r2, #33	@ 0x21
 8009132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d028      	beq.n	8009190 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009142:	4a26      	ldr	r2, [pc, #152]	@ (80091dc <HAL_UART_Transmit_DMA+0xf4>)
 8009144:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800914a:	4a25      	ldr	r2, [pc, #148]	@ (80091e0 <HAL_UART_Transmit_DMA+0xf8>)
 800914c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009152:	4a24      	ldr	r2, [pc, #144]	@ (80091e4 <HAL_UART_Transmit_DMA+0xfc>)
 8009154:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800915a:	2200      	movs	r2, #0
 800915c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009166:	4619      	mov	r1, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3328      	adds	r3, #40	@ 0x28
 800916e:	461a      	mov	r2, r3
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	f7f9 fbcf 	bl	8002914 <HAL_DMA_Start_IT>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d009      	beq.n	8009190 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2210      	movs	r2, #16
 8009180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e020      	b.n	80091d2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2240      	movs	r2, #64	@ 0x40
 8009196:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	e853 3f00 	ldrex	r3, [r3]
 80091a6:	613b      	str	r3, [r7, #16]
   return(result);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b8:	623a      	str	r2, [r7, #32]
 80091ba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091bc:	69f9      	ldr	r1, [r7, #28]
 80091be:	6a3a      	ldr	r2, [r7, #32]
 80091c0:	e841 2300 	strex	r3, r2, [r1]
 80091c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e5      	bne.n	8009198 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	e000      	b.n	80091d2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
  }
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3728      	adds	r7, #40	@ 0x28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	0800ade5 	.word	0x0800ade5
 80091e0:	0800ae7b 	.word	0x0800ae7b
 80091e4:	0800affd 	.word	0x0800affd

080091e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b0ba      	sub	sp, #232	@ 0xe8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69db      	ldr	r3, [r3, #28]
 80091f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800920e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009212:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009216:	4013      	ands	r3, r2
 8009218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800921c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d11b      	bne.n	800925c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d015      	beq.n	800925c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009234:	f003 0320 	and.w	r3, r3, #32
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800923c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 8377 	beq.w	8009940 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	4798      	blx	r3
      }
      return;
 800925a:	e371      	b.n	8009940 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800925c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 8123 	beq.w	80094ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009266:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800926a:	4b8d      	ldr	r3, [pc, #564]	@ (80094a0 <HAL_UART_IRQHandler+0x2b8>)
 800926c:	4013      	ands	r3, r2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009272:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009276:	4b8b      	ldr	r3, [pc, #556]	@ (80094a4 <HAL_UART_IRQHandler+0x2bc>)
 8009278:	4013      	ands	r3, r2
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8116 	beq.w	80094ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d011      	beq.n	80092b0 <HAL_UART_IRQHandler+0xc8>
 800928c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2201      	movs	r2, #1
 800929e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a6:	f043 0201 	orr.w	r2, r3, #1
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d011      	beq.n	80092e0 <HAL_UART_IRQHandler+0xf8>
 80092bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2202      	movs	r2, #2
 80092ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d6:	f043 0204 	orr.w	r2, r3, #4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d011      	beq.n	8009310 <HAL_UART_IRQHandler+0x128>
 80092ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2204      	movs	r2, #4
 80092fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009306:	f043 0202 	orr.w	r2, r3, #2
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009314:	f003 0308 	and.w	r3, r3, #8
 8009318:	2b00      	cmp	r3, #0
 800931a:	d017      	beq.n	800934c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800931c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009328:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800932c:	4b5c      	ldr	r3, [pc, #368]	@ (80094a0 <HAL_UART_IRQHandler+0x2b8>)
 800932e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00b      	beq.n	800934c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2208      	movs	r2, #8
 800933a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009342:	f043 0208 	orr.w	r2, r3, #8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800934c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009354:	2b00      	cmp	r3, #0
 8009356:	d012      	beq.n	800937e <HAL_UART_IRQHandler+0x196>
 8009358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800935c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00c      	beq.n	800937e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800936c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009374:	f043 0220 	orr.w	r2, r3, #32
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 82dd 	beq.w	8009944 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800938a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800938e:	f003 0320 	and.w	r3, r3, #32
 8009392:	2b00      	cmp	r3, #0
 8009394:	d013      	beq.n	80093be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d105      	bne.n	80093ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d2:	2b40      	cmp	r3, #64	@ 0x40
 80093d4:	d005      	beq.n	80093e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80093da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d054      	beq.n	800948c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 fc98 	bl	800ad18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f2:	2b40      	cmp	r3, #64	@ 0x40
 80093f4:	d146      	bne.n	8009484 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3308      	adds	r3, #8
 80093fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800940c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3308      	adds	r3, #8
 800941e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009422:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800942e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009432:	e841 2300 	strex	r3, r2, [r1]
 8009436:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800943a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1d9      	bne.n	80093f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009448:	2b00      	cmp	r3, #0
 800944a:	d017      	beq.n	800947c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009452:	4a15      	ldr	r2, [pc, #84]	@ (80094a8 <HAL_UART_IRQHandler+0x2c0>)
 8009454:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800945c:	4618      	mov	r0, r3
 800945e:	f7f9 ffe1 	bl	8003424 <HAL_DMA_Abort_IT>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d019      	beq.n	800949c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800946e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009476:	4610      	mov	r0, r2
 8009478:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800947a:	e00f      	b.n	800949c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa8b 	bl	8009998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009482:	e00b      	b.n	800949c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa87 	bl	8009998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800948a:	e007      	b.n	800949c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fa83 	bl	8009998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800949a:	e253      	b.n	8009944 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949c:	bf00      	nop
    return;
 800949e:	e251      	b.n	8009944 <HAL_UART_IRQHandler+0x75c>
 80094a0:	10000001 	.word	0x10000001
 80094a4:	04000120 	.word	0x04000120
 80094a8:	0800b07d 	.word	0x0800b07d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	f040 81e7 	bne.w	8009884 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 81e0 	beq.w	8009884 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c8:	f003 0310 	and.w	r3, r3, #16
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 81d9 	beq.w	8009884 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2210      	movs	r2, #16
 80094d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e4:	2b40      	cmp	r3, #64	@ 0x40
 80094e6:	f040 8151 	bne.w	800978c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a96      	ldr	r2, [pc, #600]	@ (800974c <HAL_UART_IRQHandler+0x564>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d068      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a93      	ldr	r2, [pc, #588]	@ (8009750 <HAL_UART_IRQHandler+0x568>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d061      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a91      	ldr	r2, [pc, #580]	@ (8009754 <HAL_UART_IRQHandler+0x56c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d05a      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a8e      	ldr	r2, [pc, #568]	@ (8009758 <HAL_UART_IRQHandler+0x570>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d053      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a8c      	ldr	r2, [pc, #560]	@ (800975c <HAL_UART_IRQHandler+0x574>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d04c      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a89      	ldr	r2, [pc, #548]	@ (8009760 <HAL_UART_IRQHandler+0x578>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d045      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a87      	ldr	r2, [pc, #540]	@ (8009764 <HAL_UART_IRQHandler+0x57c>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d03e      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a84      	ldr	r2, [pc, #528]	@ (8009768 <HAL_UART_IRQHandler+0x580>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d037      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a82      	ldr	r2, [pc, #520]	@ (800976c <HAL_UART_IRQHandler+0x584>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d030      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a7f      	ldr	r2, [pc, #508]	@ (8009770 <HAL_UART_IRQHandler+0x588>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d029      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a7d      	ldr	r2, [pc, #500]	@ (8009774 <HAL_UART_IRQHandler+0x58c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d022      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a7a      	ldr	r2, [pc, #488]	@ (8009778 <HAL_UART_IRQHandler+0x590>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01b      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a78      	ldr	r2, [pc, #480]	@ (800977c <HAL_UART_IRQHandler+0x594>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d014      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a75      	ldr	r2, [pc, #468]	@ (8009780 <HAL_UART_IRQHandler+0x598>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00d      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a73      	ldr	r2, [pc, #460]	@ (8009784 <HAL_UART_IRQHandler+0x59c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d006      	beq.n	80095ca <HAL_UART_IRQHandler+0x3e2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a70      	ldr	r2, [pc, #448]	@ (8009788 <HAL_UART_IRQHandler+0x5a0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d106      	bne.n	80095d8 <HAL_UART_IRQHandler+0x3f0>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	e005      	b.n	80095e4 <HAL_UART_IRQHandler+0x3fc>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 81ab 	beq.w	8009948 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095fc:	429a      	cmp	r2, r3
 80095fe:	f080 81a3 	bcs.w	8009948 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009608:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009618:	f000 8087 	beq.w	800972a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800964a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800965e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1da      	bne.n	800961c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3308      	adds	r3, #8
 800966c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009670:	e853 3f00 	ldrex	r3, [r3]
 8009674:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009678:	f023 0301 	bic.w	r3, r3, #1
 800967c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3308      	adds	r3, #8
 8009686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800968a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800968e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009692:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009696:	e841 2300 	strex	r3, r2, [r1]
 800969a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800969c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1e1      	bne.n	8009666 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3308      	adds	r3, #8
 80096c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80096c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80096c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80096cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e3      	bne.n	80096a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2220      	movs	r2, #32
 80096de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096f0:	e853 3f00 	ldrex	r3, [r3]
 80096f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096f8:	f023 0310 	bic.w	r3, r3, #16
 80096fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800970a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800970c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009712:	e841 2300 	strex	r3, r2, [r1]
 8009716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e4      	bne.n	80096e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009724:	4618      	mov	r0, r3
 8009726:	f7f9 fb5f 	bl	8002de8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2202      	movs	r2, #2
 800972e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800973c:	b29b      	uxth	r3, r3
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	b29b      	uxth	r3, r3
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7f7 fda3 	bl	8001290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800974a:	e0fd      	b.n	8009948 <HAL_UART_IRQHandler+0x760>
 800974c:	40020010 	.word	0x40020010
 8009750:	40020028 	.word	0x40020028
 8009754:	40020040 	.word	0x40020040
 8009758:	40020058 	.word	0x40020058
 800975c:	40020070 	.word	0x40020070
 8009760:	40020088 	.word	0x40020088
 8009764:	400200a0 	.word	0x400200a0
 8009768:	400200b8 	.word	0x400200b8
 800976c:	40020410 	.word	0x40020410
 8009770:	40020428 	.word	0x40020428
 8009774:	40020440 	.word	0x40020440
 8009778:	40020458 	.word	0x40020458
 800977c:	40020470 	.word	0x40020470
 8009780:	40020488 	.word	0x40020488
 8009784:	400204a0 	.word	0x400204a0
 8009788:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009798:	b29b      	uxth	r3, r3
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80cf 	beq.w	800994c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80097ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80ca 	beq.w	800994c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097da:	647b      	str	r3, [r7, #68]	@ 0x44
 80097dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e4      	bne.n	80097b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	623b      	str	r3, [r7, #32]
   return(result);
 80097fe:	6a3a      	ldr	r2, [r7, #32]
 8009800:	4b55      	ldr	r3, [pc, #340]	@ (8009958 <HAL_UART_IRQHandler+0x770>)
 8009802:	4013      	ands	r3, r2
 8009804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009812:	633a      	str	r2, [r7, #48]	@ 0x30
 8009814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e3      	bne.n	80097ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2220      	movs	r2, #32
 800982a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	60fb      	str	r3, [r7, #12]
   return(result);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0310 	bic.w	r3, r3, #16
 800984e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	461a      	mov	r2, r3
 8009858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	69b9      	ldr	r1, [r7, #24]
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	617b      	str	r3, [r7, #20]
   return(result);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e4      	bne.n	800983a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2202      	movs	r2, #2
 8009874:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7f7 fd07 	bl	8001290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009882:	e063      	b.n	800994c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <HAL_UART_IRQHandler+0x6c6>
 8009890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009894:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 fc29 	bl	800b0fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ac:	e051      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d014      	beq.n	80098e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d008      	beq.n	80098e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d03a      	beq.n	8009950 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	4798      	blx	r3
    }
    return;
 80098e2:	e035      	b.n	8009950 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <HAL_UART_IRQHandler+0x71c>
 80098f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 fbd3 	bl	800b0a8 <UART_EndTransmit_IT>
    return;
 8009902:	e026      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d009      	beq.n	8009924 <HAL_UART_IRQHandler+0x73c>
 8009910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009914:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fc02 	bl	800b126 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009922:	e016      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009928:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d010      	beq.n	8009952 <HAL_UART_IRQHandler+0x76a>
 8009930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009934:	2b00      	cmp	r3, #0
 8009936:	da0c      	bge.n	8009952 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fbea 	bl	800b112 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800993e:	e008      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
      return;
 8009940:	bf00      	nop
 8009942:	e006      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
    return;
 8009944:	bf00      	nop
 8009946:	e004      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
      return;
 8009948:	bf00      	nop
 800994a:	e002      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
      return;
 800994c:	bf00      	nop
 800994e:	e000      	b.n	8009952 <HAL_UART_IRQHandler+0x76a>
    return;
 8009950:	bf00      	nop
  }
}
 8009952:	37e8      	adds	r7, #232	@ 0xe8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	effffffe 	.word	0xeffffffe

0800995c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b08f      	sub	sp, #60	@ 0x3c
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_HalfDuplex_EnableTransmitter+0x16>
 80099be:	2302      	movs	r3, #2
 80099c0:	e042      	b.n	8009a48 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2224      	movs	r2, #36	@ 0x24
 80099ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f023 030c 	bic.w	r3, r3, #12
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f043 0308 	orr.w	r3, r3, #8
 8009a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e6      	bne.n	8009a04 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	373c      	adds	r7, #60	@ 0x3c
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b08f      	sub	sp, #60	@ 0x3c
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <HAL_HalfDuplex_EnableReceiver+0x16>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e042      	b.n	8009af0 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2224      	movs	r2, #36	@ 0x24
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f023 030c 	bic.w	r3, r3, #12
 8009a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	461a      	mov	r2, r3
 8009a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aa0:	e841 2300 	strex	r3, r2, [r1]
 8009aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1e6      	bne.n	8009a7a <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	f043 0304 	orr.w	r3, r3, #4
 8009ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	61bb      	str	r3, [r7, #24]
 8009acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6979      	ldr	r1, [r7, #20]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e6      	bne.n	8009aac <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	373c      	adds	r7, #60	@ 0x3c
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b00:	b092      	sub	sp, #72	@ 0x48
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	431a      	orrs	r2, r3
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	4bbe      	ldr	r3, [pc, #760]	@ (8009e24 <UART_SetConfig+0x328>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	6812      	ldr	r2, [r2, #0]
 8009b32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b34:	430b      	orrs	r3, r1
 8009b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4ab3      	ldr	r2, [pc, #716]	@ (8009e28 <UART_SetConfig+0x32c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d004      	beq.n	8009b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b64:	4313      	orrs	r3, r2
 8009b66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	689a      	ldr	r2, [r3, #8]
 8009b6e:	4baf      	ldr	r3, [pc, #700]	@ (8009e2c <UART_SetConfig+0x330>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	6812      	ldr	r2, [r2, #0]
 8009b76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	f023 010f 	bic.w	r1, r3, #15
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4aa6      	ldr	r2, [pc, #664]	@ (8009e30 <UART_SetConfig+0x334>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d177      	bne.n	8009c8c <UART_SetConfig+0x190>
 8009b9c:	4ba5      	ldr	r3, [pc, #660]	@ (8009e34 <UART_SetConfig+0x338>)
 8009b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ba4:	2b28      	cmp	r3, #40	@ 0x28
 8009ba6:	d86d      	bhi.n	8009c84 <UART_SetConfig+0x188>
 8009ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb0 <UART_SetConfig+0xb4>)
 8009baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bae:	bf00      	nop
 8009bb0:	08009c55 	.word	0x08009c55
 8009bb4:	08009c85 	.word	0x08009c85
 8009bb8:	08009c85 	.word	0x08009c85
 8009bbc:	08009c85 	.word	0x08009c85
 8009bc0:	08009c85 	.word	0x08009c85
 8009bc4:	08009c85 	.word	0x08009c85
 8009bc8:	08009c85 	.word	0x08009c85
 8009bcc:	08009c85 	.word	0x08009c85
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c85 	.word	0x08009c85
 8009bd8:	08009c85 	.word	0x08009c85
 8009bdc:	08009c85 	.word	0x08009c85
 8009be0:	08009c85 	.word	0x08009c85
 8009be4:	08009c85 	.word	0x08009c85
 8009be8:	08009c85 	.word	0x08009c85
 8009bec:	08009c85 	.word	0x08009c85
 8009bf0:	08009c65 	.word	0x08009c65
 8009bf4:	08009c85 	.word	0x08009c85
 8009bf8:	08009c85 	.word	0x08009c85
 8009bfc:	08009c85 	.word	0x08009c85
 8009c00:	08009c85 	.word	0x08009c85
 8009c04:	08009c85 	.word	0x08009c85
 8009c08:	08009c85 	.word	0x08009c85
 8009c0c:	08009c85 	.word	0x08009c85
 8009c10:	08009c6d 	.word	0x08009c6d
 8009c14:	08009c85 	.word	0x08009c85
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009c85 	.word	0x08009c85
 8009c24:	08009c85 	.word	0x08009c85
 8009c28:	08009c85 	.word	0x08009c85
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c75 	.word	0x08009c75
 8009c34:	08009c85 	.word	0x08009c85
 8009c38:	08009c85 	.word	0x08009c85
 8009c3c:	08009c85 	.word	0x08009c85
 8009c40:	08009c85 	.word	0x08009c85
 8009c44:	08009c85 	.word	0x08009c85
 8009c48:	08009c85 	.word	0x08009c85
 8009c4c:	08009c85 	.word	0x08009c85
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e326      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e322      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c64:	2308      	movs	r3, #8
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e31e      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c72:	e31a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c74:	2320      	movs	r3, #32
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c7a:	e316      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c7c:	2340      	movs	r3, #64	@ 0x40
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c82:	e312      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c84:	2380      	movs	r3, #128	@ 0x80
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8a:	e30e      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a69      	ldr	r2, [pc, #420]	@ (8009e38 <UART_SetConfig+0x33c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d130      	bne.n	8009cf8 <UART_SetConfig+0x1fc>
 8009c96:	4b67      	ldr	r3, [pc, #412]	@ (8009e34 <UART_SetConfig+0x338>)
 8009c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b05      	cmp	r3, #5
 8009ca0:	d826      	bhi.n	8009cf0 <UART_SetConfig+0x1f4>
 8009ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca8 <UART_SetConfig+0x1ac>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cc1 	.word	0x08009cc1
 8009cac:	08009cc9 	.word	0x08009cc9
 8009cb0:	08009cd1 	.word	0x08009cd1
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009ce1 	.word	0x08009ce1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e2f0      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e2ec      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e2e8      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cde:	e2e4      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ce6:	e2e0      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009ce8:	2340      	movs	r3, #64	@ 0x40
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cee:	e2dc      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009cf0:	2380      	movs	r3, #128	@ 0x80
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cf6:	e2d8      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8009e3c <UART_SetConfig+0x340>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d130      	bne.n	8009d64 <UART_SetConfig+0x268>
 8009d02:	4b4c      	ldr	r3, [pc, #304]	@ (8009e34 <UART_SetConfig+0x338>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	d826      	bhi.n	8009d5c <UART_SetConfig+0x260>
 8009d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d14 <UART_SetConfig+0x218>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d2d 	.word	0x08009d2d
 8009d18:	08009d35 	.word	0x08009d35
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	08009d45 	.word	0x08009d45
 8009d24:	08009d4d 	.word	0x08009d4d
 8009d28:	08009d55 	.word	0x08009d55
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e2ba      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d34:	2304      	movs	r3, #4
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e2b6      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e2b2      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d44:	2310      	movs	r3, #16
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d4a:	e2ae      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d4c:	2320      	movs	r3, #32
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d52:	e2aa      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d54:	2340      	movs	r3, #64	@ 0x40
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d5a:	e2a6      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d5c:	2380      	movs	r3, #128	@ 0x80
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d62:	e2a2      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a35      	ldr	r2, [pc, #212]	@ (8009e40 <UART_SetConfig+0x344>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d130      	bne.n	8009dd0 <UART_SetConfig+0x2d4>
 8009d6e:	4b31      	ldr	r3, [pc, #196]	@ (8009e34 <UART_SetConfig+0x338>)
 8009d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d826      	bhi.n	8009dc8 <UART_SetConfig+0x2cc>
 8009d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <UART_SetConfig+0x284>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009da1 	.word	0x08009da1
 8009d88:	08009da9 	.word	0x08009da9
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e284      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e280      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e27c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009db6:	e278      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009db8:	2320      	movs	r3, #32
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dbe:	e274      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009dc0:	2340      	movs	r3, #64	@ 0x40
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dc6:	e270      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009dc8:	2380      	movs	r3, #128	@ 0x80
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dce:	e26c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e44 <UART_SetConfig+0x348>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d142      	bne.n	8009e60 <UART_SetConfig+0x364>
 8009dda:	4b16      	ldr	r3, [pc, #88]	@ (8009e34 <UART_SetConfig+0x338>)
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	2b05      	cmp	r3, #5
 8009de4:	d838      	bhi.n	8009e58 <UART_SetConfig+0x35c>
 8009de6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dec <UART_SetConfig+0x2f0>)
 8009de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e0d 	.word	0x08009e0d
 8009df4:	08009e15 	.word	0x08009e15
 8009df8:	08009e1d 	.word	0x08009e1d
 8009dfc:	08009e49 	.word	0x08009e49
 8009e00:	08009e51 	.word	0x08009e51
 8009e04:	2300      	movs	r3, #0
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e0a:	e24e      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e12:	e24a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e14:	2308      	movs	r3, #8
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e1a:	e246      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e1c:	2310      	movs	r3, #16
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e22:	e242      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e24:	cfff69f3 	.word	0xcfff69f3
 8009e28:	58000c00 	.word	0x58000c00
 8009e2c:	11fff4ff 	.word	0x11fff4ff
 8009e30:	40011000 	.word	0x40011000
 8009e34:	58024400 	.word	0x58024400
 8009e38:	40004400 	.word	0x40004400
 8009e3c:	40004800 	.word	0x40004800
 8009e40:	40004c00 	.word	0x40004c00
 8009e44:	40005000 	.word	0x40005000
 8009e48:	2320      	movs	r3, #32
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e4e:	e22c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e50:	2340      	movs	r3, #64	@ 0x40
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e56:	e228      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e58:	2380      	movs	r3, #128	@ 0x80
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e5e:	e224      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4ab1      	ldr	r2, [pc, #708]	@ (800a12c <UART_SetConfig+0x630>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d176      	bne.n	8009f58 <UART_SetConfig+0x45c>
 8009e6a:	4bb1      	ldr	r3, [pc, #708]	@ (800a130 <UART_SetConfig+0x634>)
 8009e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e72:	2b28      	cmp	r3, #40	@ 0x28
 8009e74:	d86c      	bhi.n	8009f50 <UART_SetConfig+0x454>
 8009e76:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <UART_SetConfig+0x380>)
 8009e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7c:	08009f21 	.word	0x08009f21
 8009e80:	08009f51 	.word	0x08009f51
 8009e84:	08009f51 	.word	0x08009f51
 8009e88:	08009f51 	.word	0x08009f51
 8009e8c:	08009f51 	.word	0x08009f51
 8009e90:	08009f51 	.word	0x08009f51
 8009e94:	08009f51 	.word	0x08009f51
 8009e98:	08009f51 	.word	0x08009f51
 8009e9c:	08009f29 	.word	0x08009f29
 8009ea0:	08009f51 	.word	0x08009f51
 8009ea4:	08009f51 	.word	0x08009f51
 8009ea8:	08009f51 	.word	0x08009f51
 8009eac:	08009f51 	.word	0x08009f51
 8009eb0:	08009f51 	.word	0x08009f51
 8009eb4:	08009f51 	.word	0x08009f51
 8009eb8:	08009f51 	.word	0x08009f51
 8009ebc:	08009f31 	.word	0x08009f31
 8009ec0:	08009f51 	.word	0x08009f51
 8009ec4:	08009f51 	.word	0x08009f51
 8009ec8:	08009f51 	.word	0x08009f51
 8009ecc:	08009f51 	.word	0x08009f51
 8009ed0:	08009f51 	.word	0x08009f51
 8009ed4:	08009f51 	.word	0x08009f51
 8009ed8:	08009f51 	.word	0x08009f51
 8009edc:	08009f39 	.word	0x08009f39
 8009ee0:	08009f51 	.word	0x08009f51
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	08009f51 	.word	0x08009f51
 8009eec:	08009f51 	.word	0x08009f51
 8009ef0:	08009f51 	.word	0x08009f51
 8009ef4:	08009f51 	.word	0x08009f51
 8009ef8:	08009f51 	.word	0x08009f51
 8009efc:	08009f41 	.word	0x08009f41
 8009f00:	08009f51 	.word	0x08009f51
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f51 	.word	0x08009f51
 8009f0c:	08009f51 	.word	0x08009f51
 8009f10:	08009f51 	.word	0x08009f51
 8009f14:	08009f51 	.word	0x08009f51
 8009f18:	08009f51 	.word	0x08009f51
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e1c0      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e1bc      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e1b8      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	e1b4      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f40:	2320      	movs	r3, #32
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f46:	e1b0      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f48:	2340      	movs	r3, #64	@ 0x40
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f4e:	e1ac      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f50:	2380      	movs	r3, #128	@ 0x80
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f56:	e1a8      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a75      	ldr	r2, [pc, #468]	@ (800a134 <UART_SetConfig+0x638>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d130      	bne.n	8009fc4 <UART_SetConfig+0x4c8>
 8009f62:	4b73      	ldr	r3, [pc, #460]	@ (800a130 <UART_SetConfig+0x634>)
 8009f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f66:	f003 0307 	and.w	r3, r3, #7
 8009f6a:	2b05      	cmp	r3, #5
 8009f6c:	d826      	bhi.n	8009fbc <UART_SetConfig+0x4c0>
 8009f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f74 <UART_SetConfig+0x478>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009f8d 	.word	0x08009f8d
 8009f78:	08009f95 	.word	0x08009f95
 8009f7c:	08009f9d 	.word	0x08009f9d
 8009f80:	08009fa5 	.word	0x08009fa5
 8009f84:	08009fad 	.word	0x08009fad
 8009f88:	08009fb5 	.word	0x08009fb5
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e18a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f94:	2304      	movs	r3, #4
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e186      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e182      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009fa4:	2310      	movs	r3, #16
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009faa:	e17e      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009fac:	2320      	movs	r3, #32
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fb2:	e17a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009fb4:	2340      	movs	r3, #64	@ 0x40
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fba:	e176      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009fbc:	2380      	movs	r3, #128	@ 0x80
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fc2:	e172      	b.n	800a2aa <UART_SetConfig+0x7ae>
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a5b      	ldr	r2, [pc, #364]	@ (800a138 <UART_SetConfig+0x63c>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d130      	bne.n	800a030 <UART_SetConfig+0x534>
 8009fce:	4b58      	ldr	r3, [pc, #352]	@ (800a130 <UART_SetConfig+0x634>)
 8009fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	d826      	bhi.n	800a028 <UART_SetConfig+0x52c>
 8009fda:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe0 <UART_SetConfig+0x4e4>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	08009ff9 	.word	0x08009ff9
 8009fe4:	0800a001 	.word	0x0800a001
 8009fe8:	0800a009 	.word	0x0800a009
 8009fec:	0800a011 	.word	0x0800a011
 8009ff0:	0800a019 	.word	0x0800a019
 8009ff4:	0800a021 	.word	0x0800a021
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e154      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a000:	2304      	movs	r3, #4
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e150      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a008:	2308      	movs	r3, #8
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e14c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a010:	2310      	movs	r3, #16
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a016:	e148      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a018:	2320      	movs	r3, #32
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01e:	e144      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a020:	2340      	movs	r3, #64	@ 0x40
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a026:	e140      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a028:	2380      	movs	r3, #128	@ 0x80
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a02e:	e13c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a41      	ldr	r2, [pc, #260]	@ (800a13c <UART_SetConfig+0x640>)
 800a036:	4293      	cmp	r3, r2
 800a038:	f040 8082 	bne.w	800a140 <UART_SetConfig+0x644>
 800a03c:	4b3c      	ldr	r3, [pc, #240]	@ (800a130 <UART_SetConfig+0x634>)
 800a03e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a040:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a044:	2b28      	cmp	r3, #40	@ 0x28
 800a046:	d86d      	bhi.n	800a124 <UART_SetConfig+0x628>
 800a048:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <UART_SetConfig+0x554>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a0f5 	.word	0x0800a0f5
 800a054:	0800a125 	.word	0x0800a125
 800a058:	0800a125 	.word	0x0800a125
 800a05c:	0800a125 	.word	0x0800a125
 800a060:	0800a125 	.word	0x0800a125
 800a064:	0800a125 	.word	0x0800a125
 800a068:	0800a125 	.word	0x0800a125
 800a06c:	0800a125 	.word	0x0800a125
 800a070:	0800a0fd 	.word	0x0800a0fd
 800a074:	0800a125 	.word	0x0800a125
 800a078:	0800a125 	.word	0x0800a125
 800a07c:	0800a125 	.word	0x0800a125
 800a080:	0800a125 	.word	0x0800a125
 800a084:	0800a125 	.word	0x0800a125
 800a088:	0800a125 	.word	0x0800a125
 800a08c:	0800a125 	.word	0x0800a125
 800a090:	0800a105 	.word	0x0800a105
 800a094:	0800a125 	.word	0x0800a125
 800a098:	0800a125 	.word	0x0800a125
 800a09c:	0800a125 	.word	0x0800a125
 800a0a0:	0800a125 	.word	0x0800a125
 800a0a4:	0800a125 	.word	0x0800a125
 800a0a8:	0800a125 	.word	0x0800a125
 800a0ac:	0800a125 	.word	0x0800a125
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a125 	.word	0x0800a125
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a125 	.word	0x0800a125
 800a0c0:	0800a125 	.word	0x0800a125
 800a0c4:	0800a125 	.word	0x0800a125
 800a0c8:	0800a125 	.word	0x0800a125
 800a0cc:	0800a125 	.word	0x0800a125
 800a0d0:	0800a115 	.word	0x0800a115
 800a0d4:	0800a125 	.word	0x0800a125
 800a0d8:	0800a125 	.word	0x0800a125
 800a0dc:	0800a125 	.word	0x0800a125
 800a0e0:	0800a125 	.word	0x0800a125
 800a0e4:	0800a125 	.word	0x0800a125
 800a0e8:	0800a125 	.word	0x0800a125
 800a0ec:	0800a125 	.word	0x0800a125
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0fa:	e0d6      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a102:	e0d2      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a104:	2308      	movs	r3, #8
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a10a:	e0ce      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a10c:	2310      	movs	r3, #16
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a112:	e0ca      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a114:	2320      	movs	r3, #32
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a11a:	e0c6      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a11c:	2340      	movs	r3, #64	@ 0x40
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a122:	e0c2      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a124:	2380      	movs	r3, #128	@ 0x80
 800a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12a:	e0be      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a12c:	40011400 	.word	0x40011400
 800a130:	58024400 	.word	0x58024400
 800a134:	40007800 	.word	0x40007800
 800a138:	40007c00 	.word	0x40007c00
 800a13c:	40011800 	.word	0x40011800
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4aad      	ldr	r2, [pc, #692]	@ (800a3fc <UART_SetConfig+0x900>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d176      	bne.n	800a238 <UART_SetConfig+0x73c>
 800a14a:	4bad      	ldr	r3, [pc, #692]	@ (800a400 <UART_SetConfig+0x904>)
 800a14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a152:	2b28      	cmp	r3, #40	@ 0x28
 800a154:	d86c      	bhi.n	800a230 <UART_SetConfig+0x734>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <UART_SetConfig+0x660>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a201 	.word	0x0800a201
 800a160:	0800a231 	.word	0x0800a231
 800a164:	0800a231 	.word	0x0800a231
 800a168:	0800a231 	.word	0x0800a231
 800a16c:	0800a231 	.word	0x0800a231
 800a170:	0800a231 	.word	0x0800a231
 800a174:	0800a231 	.word	0x0800a231
 800a178:	0800a231 	.word	0x0800a231
 800a17c:	0800a209 	.word	0x0800a209
 800a180:	0800a231 	.word	0x0800a231
 800a184:	0800a231 	.word	0x0800a231
 800a188:	0800a231 	.word	0x0800a231
 800a18c:	0800a231 	.word	0x0800a231
 800a190:	0800a231 	.word	0x0800a231
 800a194:	0800a231 	.word	0x0800a231
 800a198:	0800a231 	.word	0x0800a231
 800a19c:	0800a211 	.word	0x0800a211
 800a1a0:	0800a231 	.word	0x0800a231
 800a1a4:	0800a231 	.word	0x0800a231
 800a1a8:	0800a231 	.word	0x0800a231
 800a1ac:	0800a231 	.word	0x0800a231
 800a1b0:	0800a231 	.word	0x0800a231
 800a1b4:	0800a231 	.word	0x0800a231
 800a1b8:	0800a231 	.word	0x0800a231
 800a1bc:	0800a219 	.word	0x0800a219
 800a1c0:	0800a231 	.word	0x0800a231
 800a1c4:	0800a231 	.word	0x0800a231
 800a1c8:	0800a231 	.word	0x0800a231
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a231 	.word	0x0800a231
 800a1d4:	0800a231 	.word	0x0800a231
 800a1d8:	0800a231 	.word	0x0800a231
 800a1dc:	0800a221 	.word	0x0800a221
 800a1e0:	0800a231 	.word	0x0800a231
 800a1e4:	0800a231 	.word	0x0800a231
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a231 	.word	0x0800a231
 800a1f0:	0800a231 	.word	0x0800a231
 800a1f4:	0800a231 	.word	0x0800a231
 800a1f8:	0800a231 	.word	0x0800a231
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e050      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a208:	2304      	movs	r3, #4
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e04c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a210:	2308      	movs	r3, #8
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e048      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a218:	2310      	movs	r3, #16
 800a21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21e:	e044      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a220:	2320      	movs	r3, #32
 800a222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a226:	e040      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a228:	2340      	movs	r3, #64	@ 0x40
 800a22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22e:	e03c      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a230:	2380      	movs	r3, #128	@ 0x80
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a236:	e038      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a71      	ldr	r2, [pc, #452]	@ (800a404 <UART_SetConfig+0x908>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d130      	bne.n	800a2a4 <UART_SetConfig+0x7a8>
 800a242:	4b6f      	ldr	r3, [pc, #444]	@ (800a400 <UART_SetConfig+0x904>)
 800a244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b05      	cmp	r3, #5
 800a24c:	d826      	bhi.n	800a29c <UART_SetConfig+0x7a0>
 800a24e:	a201      	add	r2, pc, #4	@ (adr r2, 800a254 <UART_SetConfig+0x758>)
 800a250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a254:	0800a26d 	.word	0x0800a26d
 800a258:	0800a275 	.word	0x0800a275
 800a25c:	0800a27d 	.word	0x0800a27d
 800a260:	0800a285 	.word	0x0800a285
 800a264:	0800a28d 	.word	0x0800a28d
 800a268:	0800a295 	.word	0x0800a295
 800a26c:	2302      	movs	r3, #2
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e01a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a274:	2304      	movs	r3, #4
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e016      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a27c:	2308      	movs	r3, #8
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e012      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a284:	2310      	movs	r3, #16
 800a286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28a:	e00e      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a28c:	2320      	movs	r3, #32
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a292:	e00a      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a294:	2340      	movs	r3, #64	@ 0x40
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29a:	e006      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a29c:	2380      	movs	r3, #128	@ 0x80
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a2:	e002      	b.n	800a2aa <UART_SetConfig+0x7ae>
 800a2a4:	2380      	movs	r3, #128	@ 0x80
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a55      	ldr	r2, [pc, #340]	@ (800a404 <UART_SetConfig+0x908>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	f040 80f8 	bne.w	800a4a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	dc46      	bgt.n	800a34c <UART_SetConfig+0x850>
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	db75      	blt.n	800a3ae <UART_SetConfig+0x8b2>
 800a2c2:	3b02      	subs	r3, #2
 800a2c4:	2b1e      	cmp	r3, #30
 800a2c6:	d872      	bhi.n	800a3ae <UART_SetConfig+0x8b2>
 800a2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d0 <UART_SetConfig+0x7d4>)
 800a2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ce:	bf00      	nop
 800a2d0:	0800a353 	.word	0x0800a353
 800a2d4:	0800a3af 	.word	0x0800a3af
 800a2d8:	0800a35b 	.word	0x0800a35b
 800a2dc:	0800a3af 	.word	0x0800a3af
 800a2e0:	0800a3af 	.word	0x0800a3af
 800a2e4:	0800a3af 	.word	0x0800a3af
 800a2e8:	0800a36b 	.word	0x0800a36b
 800a2ec:	0800a3af 	.word	0x0800a3af
 800a2f0:	0800a3af 	.word	0x0800a3af
 800a2f4:	0800a3af 	.word	0x0800a3af
 800a2f8:	0800a3af 	.word	0x0800a3af
 800a2fc:	0800a3af 	.word	0x0800a3af
 800a300:	0800a3af 	.word	0x0800a3af
 800a304:	0800a3af 	.word	0x0800a3af
 800a308:	0800a37b 	.word	0x0800a37b
 800a30c:	0800a3af 	.word	0x0800a3af
 800a310:	0800a3af 	.word	0x0800a3af
 800a314:	0800a3af 	.word	0x0800a3af
 800a318:	0800a3af 	.word	0x0800a3af
 800a31c:	0800a3af 	.word	0x0800a3af
 800a320:	0800a3af 	.word	0x0800a3af
 800a324:	0800a3af 	.word	0x0800a3af
 800a328:	0800a3af 	.word	0x0800a3af
 800a32c:	0800a3af 	.word	0x0800a3af
 800a330:	0800a3af 	.word	0x0800a3af
 800a334:	0800a3af 	.word	0x0800a3af
 800a338:	0800a3af 	.word	0x0800a3af
 800a33c:	0800a3af 	.word	0x0800a3af
 800a340:	0800a3af 	.word	0x0800a3af
 800a344:	0800a3af 	.word	0x0800a3af
 800a348:	0800a3a1 	.word	0x0800a3a1
 800a34c:	2b40      	cmp	r3, #64	@ 0x40
 800a34e:	d02a      	beq.n	800a3a6 <UART_SetConfig+0x8aa>
 800a350:	e02d      	b.n	800a3ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a352:	f7fd f8f5 	bl	8007540 <HAL_RCCEx_GetD3PCLK1Freq>
 800a356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a358:	e02f      	b.n	800a3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a35a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a35e:	4618      	mov	r0, r3
 800a360:	f7fd f904 	bl	800756c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a368:	e027      	b.n	800a3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36a:	f107 0318 	add.w	r3, r7, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fd fa50 	bl	8007814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a378:	e01f      	b.n	800a3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a37a:	4b21      	ldr	r3, [pc, #132]	@ (800a400 <UART_SetConfig+0x904>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0320 	and.w	r3, r3, #32
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a386:	4b1e      	ldr	r3, [pc, #120]	@ (800a400 <UART_SetConfig+0x904>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	08db      	lsrs	r3, r3, #3
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	4a1d      	ldr	r2, [pc, #116]	@ (800a408 <UART_SetConfig+0x90c>)
 800a392:	fa22 f303 	lsr.w	r3, r2, r3
 800a396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a398:	e00f      	b.n	800a3ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a39a:	4b1b      	ldr	r3, [pc, #108]	@ (800a408 <UART_SetConfig+0x90c>)
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a39e:	e00c      	b.n	800a3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <UART_SetConfig+0x910>)
 800a3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a4:	e009      	b.n	800a3ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ac:	e005      	b.n	800a3ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a3b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 81ee 	beq.w	800a79e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	4a12      	ldr	r2, [pc, #72]	@ (800a410 <UART_SetConfig+0x914>)
 800a3c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	4413      	add	r3, r2
 800a3e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d305      	bcc.n	800a3f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d910      	bls.n	800a414 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a3f8:	e1d1      	b.n	800a79e <UART_SetConfig+0xca2>
 800a3fa:	bf00      	nop
 800a3fc:	40011c00 	.word	0x40011c00
 800a400:	58024400 	.word	0x58024400
 800a404:	58000c00 	.word	0x58000c00
 800a408:	03d09000 	.word	0x03d09000
 800a40c:	003d0900 	.word	0x003d0900
 800a410:	0800b480 	.word	0x0800b480
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a416:	2200      	movs	r2, #0
 800a418:	60bb      	str	r3, [r7, #8]
 800a41a:	60fa      	str	r2, [r7, #12]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a420:	4ac0      	ldr	r2, [pc, #768]	@ (800a724 <UART_SetConfig+0xc28>)
 800a422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a426:	b29b      	uxth	r3, r3
 800a428:	2200      	movs	r2, #0
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	607a      	str	r2, [r7, #4]
 800a42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a436:	f7f5 ff69 	bl	800030c <__aeabi_uldivmod>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4610      	mov	r0, r2
 800a440:	4619      	mov	r1, r3
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	f04f 0300 	mov.w	r3, #0
 800a44a:	020b      	lsls	r3, r1, #8
 800a44c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a450:	0202      	lsls	r2, r0, #8
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	6849      	ldr	r1, [r1, #4]
 800a456:	0849      	lsrs	r1, r1, #1
 800a458:	2000      	movs	r0, #0
 800a45a:	460c      	mov	r4, r1
 800a45c:	4605      	mov	r5, r0
 800a45e:	eb12 0804 	adds.w	r8, r2, r4
 800a462:	eb43 0905 	adc.w	r9, r3, r5
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	469a      	mov	sl, r3
 800a46e:	4693      	mov	fp, r2
 800a470:	4652      	mov	r2, sl
 800a472:	465b      	mov	r3, fp
 800a474:	4640      	mov	r0, r8
 800a476:	4649      	mov	r1, r9
 800a478:	f7f5 ff48 	bl	800030c <__aeabi_uldivmod>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4613      	mov	r3, r2
 800a482:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a486:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a48a:	d308      	bcc.n	800a49e <UART_SetConfig+0x9a2>
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a492:	d204      	bcs.n	800a49e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a49a:	60da      	str	r2, [r3, #12]
 800a49c:	e17f      	b.n	800a79e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a4a4:	e17b      	b.n	800a79e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ae:	f040 80bd 	bne.w	800a62c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a4b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	dc48      	bgt.n	800a54c <UART_SetConfig+0xa50>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	db7b      	blt.n	800a5b6 <UART_SetConfig+0xaba>
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	d879      	bhi.n	800a5b6 <UART_SetConfig+0xaba>
 800a4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c8 <UART_SetConfig+0x9cc>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a553 	.word	0x0800a553
 800a4cc:	0800a55b 	.word	0x0800a55b
 800a4d0:	0800a5b7 	.word	0x0800a5b7
 800a4d4:	0800a5b7 	.word	0x0800a5b7
 800a4d8:	0800a563 	.word	0x0800a563
 800a4dc:	0800a5b7 	.word	0x0800a5b7
 800a4e0:	0800a5b7 	.word	0x0800a5b7
 800a4e4:	0800a5b7 	.word	0x0800a5b7
 800a4e8:	0800a573 	.word	0x0800a573
 800a4ec:	0800a5b7 	.word	0x0800a5b7
 800a4f0:	0800a5b7 	.word	0x0800a5b7
 800a4f4:	0800a5b7 	.word	0x0800a5b7
 800a4f8:	0800a5b7 	.word	0x0800a5b7
 800a4fc:	0800a5b7 	.word	0x0800a5b7
 800a500:	0800a5b7 	.word	0x0800a5b7
 800a504:	0800a5b7 	.word	0x0800a5b7
 800a508:	0800a583 	.word	0x0800a583
 800a50c:	0800a5b7 	.word	0x0800a5b7
 800a510:	0800a5b7 	.word	0x0800a5b7
 800a514:	0800a5b7 	.word	0x0800a5b7
 800a518:	0800a5b7 	.word	0x0800a5b7
 800a51c:	0800a5b7 	.word	0x0800a5b7
 800a520:	0800a5b7 	.word	0x0800a5b7
 800a524:	0800a5b7 	.word	0x0800a5b7
 800a528:	0800a5b7 	.word	0x0800a5b7
 800a52c:	0800a5b7 	.word	0x0800a5b7
 800a530:	0800a5b7 	.word	0x0800a5b7
 800a534:	0800a5b7 	.word	0x0800a5b7
 800a538:	0800a5b7 	.word	0x0800a5b7
 800a53c:	0800a5b7 	.word	0x0800a5b7
 800a540:	0800a5b7 	.word	0x0800a5b7
 800a544:	0800a5b7 	.word	0x0800a5b7
 800a548:	0800a5a9 	.word	0x0800a5a9
 800a54c:	2b40      	cmp	r3, #64	@ 0x40
 800a54e:	d02e      	beq.n	800a5ae <UART_SetConfig+0xab2>
 800a550:	e031      	b.n	800a5b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a552:	f7fb fe29 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 800a556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a558:	e033      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a55a:	f7fb fe3b 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 800a55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a560:	e02f      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a566:	4618      	mov	r0, r3
 800a568:	f7fd f800 	bl	800756c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a570:	e027      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a572:	f107 0318 	add.w	r3, r7, #24
 800a576:	4618      	mov	r0, r3
 800a578:	f7fd f94c 	bl	8007814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a580:	e01f      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a582:	4b69      	ldr	r3, [pc, #420]	@ (800a728 <UART_SetConfig+0xc2c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a58e:	4b66      	ldr	r3, [pc, #408]	@ (800a728 <UART_SetConfig+0xc2c>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	4a64      	ldr	r2, [pc, #400]	@ (800a72c <UART_SetConfig+0xc30>)
 800a59a:	fa22 f303 	lsr.w	r3, r2, r3
 800a59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5a0:	e00f      	b.n	800a5c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a5a2:	4b62      	ldr	r3, [pc, #392]	@ (800a72c <UART_SetConfig+0xc30>)
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a6:	e00c      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5a8:	4b61      	ldr	r3, [pc, #388]	@ (800a730 <UART_SetConfig+0xc34>)
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ac:	e009      	b.n	800a5c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b4:	e005      	b.n	800a5c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a5c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 80ea 	beq.w	800a79e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ce:	4a55      	ldr	r2, [pc, #340]	@ (800a724 <UART_SetConfig+0xc28>)
 800a5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5dc:	005a      	lsls	r2, r3, #1
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	441a      	add	r2, r3
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f2:	2b0f      	cmp	r3, #15
 800a5f4:	d916      	bls.n	800a624 <UART_SetConfig+0xb28>
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5fc:	d212      	bcs.n	800a624 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a600:	b29b      	uxth	r3, r3
 800a602:	f023 030f 	bic.w	r3, r3, #15
 800a606:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	b29a      	uxth	r2, r3
 800a614:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a616:	4313      	orrs	r3, r2
 800a618:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e0bc      	b.n	800a79e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a62a:	e0b8      	b.n	800a79e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a62c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a630:	2b20      	cmp	r3, #32
 800a632:	dc4b      	bgt.n	800a6cc <UART_SetConfig+0xbd0>
 800a634:	2b00      	cmp	r3, #0
 800a636:	f2c0 8087 	blt.w	800a748 <UART_SetConfig+0xc4c>
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f200 8084 	bhi.w	800a748 <UART_SetConfig+0xc4c>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <UART_SetConfig+0xb4c>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a6d3 	.word	0x0800a6d3
 800a64c:	0800a6db 	.word	0x0800a6db
 800a650:	0800a749 	.word	0x0800a749
 800a654:	0800a749 	.word	0x0800a749
 800a658:	0800a6e3 	.word	0x0800a6e3
 800a65c:	0800a749 	.word	0x0800a749
 800a660:	0800a749 	.word	0x0800a749
 800a664:	0800a749 	.word	0x0800a749
 800a668:	0800a6f3 	.word	0x0800a6f3
 800a66c:	0800a749 	.word	0x0800a749
 800a670:	0800a749 	.word	0x0800a749
 800a674:	0800a749 	.word	0x0800a749
 800a678:	0800a749 	.word	0x0800a749
 800a67c:	0800a749 	.word	0x0800a749
 800a680:	0800a749 	.word	0x0800a749
 800a684:	0800a749 	.word	0x0800a749
 800a688:	0800a703 	.word	0x0800a703
 800a68c:	0800a749 	.word	0x0800a749
 800a690:	0800a749 	.word	0x0800a749
 800a694:	0800a749 	.word	0x0800a749
 800a698:	0800a749 	.word	0x0800a749
 800a69c:	0800a749 	.word	0x0800a749
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a749 	.word	0x0800a749
 800a6a8:	0800a749 	.word	0x0800a749
 800a6ac:	0800a749 	.word	0x0800a749
 800a6b0:	0800a749 	.word	0x0800a749
 800a6b4:	0800a749 	.word	0x0800a749
 800a6b8:	0800a749 	.word	0x0800a749
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a749 	.word	0x0800a749
 800a6c4:	0800a749 	.word	0x0800a749
 800a6c8:	0800a73b 	.word	0x0800a73b
 800a6cc:	2b40      	cmp	r3, #64	@ 0x40
 800a6ce:	d037      	beq.n	800a740 <UART_SetConfig+0xc44>
 800a6d0:	e03a      	b.n	800a748 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d2:	f7fb fd69 	bl	80061a8 <HAL_RCC_GetPCLK1Freq>
 800a6d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6d8:	e03c      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6da:	f7fb fd7b 	bl	80061d4 <HAL_RCC_GetPCLK2Freq>
 800a6de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e0:	e038      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fc ff40 	bl	800756c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f0:	e030      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6f2:	f107 0318 	add.w	r3, r7, #24
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fd f88c 	bl	8007814 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e028      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a702:	4b09      	ldr	r3, [pc, #36]	@ (800a728 <UART_SetConfig+0xc2c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d012      	beq.n	800a734 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a70e:	4b06      	ldr	r3, [pc, #24]	@ (800a728 <UART_SetConfig+0xc2c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	08db      	lsrs	r3, r3, #3
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	4a04      	ldr	r2, [pc, #16]	@ (800a72c <UART_SetConfig+0xc30>)
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a720:	e018      	b.n	800a754 <UART_SetConfig+0xc58>
 800a722:	bf00      	nop
 800a724:	0800b480 	.word	0x0800b480
 800a728:	58024400 	.word	0x58024400
 800a72c:	03d09000 	.word	0x03d09000
 800a730:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a734:	4b24      	ldr	r3, [pc, #144]	@ (800a7c8 <UART_SetConfig+0xccc>)
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	e00c      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a73a:	4b24      	ldr	r3, [pc, #144]	@ (800a7cc <UART_SetConfig+0xcd0>)
 800a73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73e:	e009      	b.n	800a754 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a740:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a746:	e005      	b.n	800a754 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a752:	bf00      	nop
    }

    if (pclk != 0U)
 800a754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d021      	beq.n	800a79e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	4a1c      	ldr	r2, [pc, #112]	@ (800a7d0 <UART_SetConfig+0xcd4>)
 800a760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a764:	461a      	mov	r2, r3
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	fbb3 f2f2 	udiv	r2, r3, r2
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	085b      	lsrs	r3, r3, #1
 800a772:	441a      	add	r2, r3
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	fbb2 f3f3 	udiv	r3, r2, r3
 800a77c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	2b0f      	cmp	r3, #15
 800a782:	d909      	bls.n	800a798 <UART_SetConfig+0xc9c>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a78a:	d205      	bcs.n	800a798 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	b29a      	uxth	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	e002      	b.n	800a79e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a7ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3748      	adds	r7, #72	@ 0x48
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7c8:	03d09000 	.word	0x03d09000
 800a7cc:	003d0900 	.word	0x003d0900
 800a7d0:	0800b480 	.word	0x0800b480

0800a7d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e0:	f003 0308 	and.w	r3, r3, #8
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00a      	beq.n	800a7fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00a      	beq.n	800a820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00a      	beq.n	800a842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	430a      	orrs	r2, r1
 800a840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00a      	beq.n	800a886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a88a:	f003 0320 	and.w	r3, r3, #32
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01a      	beq.n	800a8ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8d2:	d10a      	bne.n	800a8ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	605a      	str	r2, [r3, #4]
  }
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b098      	sub	sp, #96	@ 0x60
 800a91c:	af02      	add	r7, sp, #8
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a928:	f7f7 f8de 	bl	8001ae8 <HAL_GetTick>
 800a92c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0308 	and.w	r3, r3, #8
 800a938:	2b08      	cmp	r3, #8
 800a93a:	d12f      	bne.n	800a99c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a93c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a944:	2200      	movs	r2, #0
 800a946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f88e 	bl	800aa6c <UART_WaitOnFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d022      	beq.n	800a99c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95e:	e853 3f00 	ldrex	r3, [r3]
 800a962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a96a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	461a      	mov	r2, r3
 800a972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a974:	647b      	str	r3, [r7, #68]	@ 0x44
 800a976:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a97a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a97c:	e841 2300 	strex	r3, r2, [r1]
 800a980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e6      	bne.n	800a956 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2220      	movs	r2, #32
 800a98c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a998:	2303      	movs	r3, #3
 800a99a:	e063      	b.n	800aa64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d149      	bne.n	800aa3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f857 	bl	800aa6c <UART_WaitOnFlagUntilTimeout>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d03c      	beq.n	800aa3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	623b      	str	r3, [r7, #32]
   return(result);
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e6      	bne.n	800a9c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	e853 3f00 	ldrex	r3, [r3]
 800aa04:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f023 0301 	bic.w	r3, r3, #1
 800aa0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3308      	adds	r3, #8
 800aa14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa16:	61fa      	str	r2, [r7, #28]
 800aa18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	69b9      	ldr	r1, [r7, #24]
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	617b      	str	r3, [r7, #20]
   return(result);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e5      	bne.n	800a9f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e012      	b.n	800aa64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2220      	movs	r2, #32
 800aa42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3758      	adds	r7, #88	@ 0x58
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa7c:	e04f      	b.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa84:	d04b      	beq.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa86:	f7f7 f82f 	bl	8001ae8 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d302      	bcc.n	800aa9c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	e04e      	b.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d037      	beq.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b80      	cmp	r3, #128	@ 0x80
 800aab2:	d034      	beq.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b40      	cmp	r3, #64	@ 0x40
 800aab8:	d031      	beq.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b08      	cmp	r3, #8
 800aac6:	d110      	bne.n	800aaea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2208      	movs	r2, #8
 800aace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 f921 	bl	800ad18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2208      	movs	r2, #8
 800aada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e029      	b.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaf8:	d111      	bne.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f907 	bl	800ad18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e00f      	b.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69da      	ldr	r2, [r3, #28]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4013      	ands	r3, r2
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	bf0c      	ite	eq
 800ab2e:	2301      	moveq	r3, #1
 800ab30:	2300      	movne	r3, #0
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d0a0      	beq.n	800aa7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b096      	sub	sp, #88	@ 0x58
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	88fa      	ldrh	r2, [r7, #6]
 800ab60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2222      	movs	r2, #34	@ 0x22
 800ab70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d02d      	beq.n	800abda <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab84:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <UART_Start_Receive_DMA+0x140>)
 800ab86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab8e:	4a3f      	ldr	r2, [pc, #252]	@ (800ac8c <UART_Start_Receive_DMA+0x144>)
 800ab90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab98:	4a3d      	ldr	r2, [pc, #244]	@ (800ac90 <UART_Start_Receive_DMA+0x148>)
 800ab9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aba2:	2200      	movs	r2, #0
 800aba4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3324      	adds	r3, #36	@ 0x24
 800abb2:	4619      	mov	r1, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abb8:	461a      	mov	r2, r3
 800abba:	88fb      	ldrh	r3, [r7, #6]
 800abbc:	f7f7 feaa 	bl	8002914 <HAL_DMA_Start_IT>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d009      	beq.n	800abda <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2210      	movs	r2, #16
 800abca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e051      	b.n	800ac7e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d018      	beq.n	800ac14 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abea:	e853 3f00 	ldrex	r3, [r3]
 800abee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800abf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abf6:	657b      	str	r3, [r7, #84]	@ 0x54
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac02:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ac0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e6      	bne.n	800abe2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3308      	adds	r3, #8
 800ac1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	f043 0301 	orr.w	r3, r3, #1
 800ac2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3308      	adds	r3, #8
 800ac32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac34:	637a      	str	r2, [r7, #52]	@ 0x34
 800ac36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac3c:	e841 2300 	strex	r3, r2, [r1]
 800ac40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e5      	bne.n	800ac14 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	613b      	str	r3, [r7, #16]
   return(result);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3308      	adds	r3, #8
 800ac66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac68:	623a      	str	r2, [r7, #32]
 800ac6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	69f9      	ldr	r1, [r7, #28]
 800ac6e:	6a3a      	ldr	r2, [r7, #32]
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e5      	bne.n	800ac48 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3758      	adds	r7, #88	@ 0x58
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	0800ae97 	.word	0x0800ae97
 800ac8c:	0800afbf 	.word	0x0800afbf
 800ac90:	0800affd 	.word	0x0800affd

0800ac94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b08f      	sub	sp, #60	@ 0x3c
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	61fb      	str	r3, [r7, #28]
   return(result);
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800acb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e6      	bne.n	800ac9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3308      	adds	r3, #8
 800acd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ace4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acee:	61ba      	str	r2, [r7, #24]
 800acf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6979      	ldr	r1, [r7, #20]
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	613b      	str	r3, [r7, #16]
   return(result);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e5      	bne.n	800acce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ad0a:	bf00      	nop
 800ad0c:	373c      	adds	r7, #60	@ 0x3c
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
	...

0800ad18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b095      	sub	sp, #84	@ 0x54
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e6      	bne.n	800ad20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	4b1e      	ldr	r3, [pc, #120]	@ (800ade0 <UART_EndRxTransfer+0xc8>)
 800ad66:	4013      	ands	r3, r2
 800ad68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d118      	bne.n	800adc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f023 0310 	bic.w	r3, r3, #16
 800ada2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adac:	61bb      	str	r3, [r7, #24]
 800adae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	6979      	ldr	r1, [r7, #20]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	613b      	str	r3, [r7, #16]
   return(result);
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e6      	bne.n	800ad8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2220      	movs	r2, #32
 800adc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800add4:	bf00      	nop
 800add6:	3754      	adds	r7, #84	@ 0x54
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	effffffe 	.word	0xeffffffe

0800ade4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b090      	sub	sp, #64	@ 0x40
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adfa:	d037      	beq.n	800ae6c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800adfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3308      	adds	r3, #8
 800ae0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	e853 3f00 	ldrex	r3, [r3]
 800ae12:	623b      	str	r3, [r7, #32]
   return(result);
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3308      	adds	r3, #8
 800ae22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae24:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae2c:	e841 2300 	strex	r3, r2, [r1]
 800ae30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1e5      	bne.n	800ae04 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	69b9      	ldr	r1, [r7, #24]
 800ae5c:	69fa      	ldr	r2, [r7, #28]
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	617b      	str	r3, [r7, #20]
   return(result);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e6      	bne.n	800ae38 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae6a:	e002      	b.n	800ae72 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ae6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ae6e:	f7f6 f9eb 	bl	8001248 <HAL_UART_TxCpltCallback>
}
 800ae72:	bf00      	nop
 800ae74:	3740      	adds	r7, #64	@ 0x40
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7fe fd67 	bl	800995c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8e:	bf00      	nop
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b09c      	sub	sp, #112	@ 0x70
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	69db      	ldr	r3, [r3, #28]
 800aea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aeac:	d071      	beq.n	800af92 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800aeae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aed4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aed6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aeda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e6      	bne.n	800aeb6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3308      	adds	r3, #8
 800aeee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	f023 0301 	bic.w	r3, r3, #1
 800aefe:	667b      	str	r3, [r7, #100]	@ 0x64
 800af00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3308      	adds	r3, #8
 800af06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800af08:	647a      	str	r2, [r7, #68]	@ 0x44
 800af0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e5      	bne.n	800aee8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3308      	adds	r3, #8
 800af22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	623b      	str	r3, [r7, #32]
   return(result);
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af32:	663b      	str	r3, [r7, #96]	@ 0x60
 800af34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800af3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d118      	bne.n	800af92 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f023 0310 	bic.w	r3, r3, #16
 800af74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	69b9      	ldr	r1, [r7, #24]
 800af84:	69fa      	ldr	r2, [r7, #28]
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	617b      	str	r3, [r7, #20]
   return(result);
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e6      	bne.n	800af60 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af94:	2200      	movs	r2, #0
 800af96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d107      	bne.n	800afb0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afa2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afa6:	4619      	mov	r1, r3
 800afa8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800afaa:	f7f6 f971 	bl	8001290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afae:	e002      	b.n	800afb6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800afb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800afb2:	f7fe fcdd 	bl	8009970 <HAL_UART_RxCpltCallback>
}
 800afb6:	bf00      	nop
 800afb8:	3770      	adds	r7, #112	@ 0x70
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2201      	movs	r2, #1
 800afd0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d109      	bne.n	800afee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800afe0:	085b      	lsrs	r3, r3, #1
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	4619      	mov	r1, r3
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7f6 f952 	bl	8001290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afec:	e002      	b.n	800aff4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7fe fcc8 	bl	8009984 <HAL_UART_RxHalfCpltCallback>
}
 800aff4:	bf00      	nop
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b008:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b010:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b018:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b024:	2b80      	cmp	r3, #128	@ 0x80
 800b026:	d109      	bne.n	800b03c <UART_DMAError+0x40>
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	2b21      	cmp	r3, #33	@ 0x21
 800b02c:	d106      	bne.n	800b03c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2200      	movs	r2, #0
 800b032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b036:	6978      	ldr	r0, [r7, #20]
 800b038:	f7ff fe2c 	bl	800ac94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b046:	2b40      	cmp	r3, #64	@ 0x40
 800b048:	d109      	bne.n	800b05e <UART_DMAError+0x62>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b22      	cmp	r3, #34	@ 0x22
 800b04e:	d106      	bne.n	800b05e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2200      	movs	r2, #0
 800b054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b058:	6978      	ldr	r0, [r7, #20]
 800b05a:	f7ff fe5d 	bl	800ad18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b064:	f043 0210 	orr.w	r2, r3, #16
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b06e:	6978      	ldr	r0, [r7, #20]
 800b070:	f7fe fc92 	bl	8009998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b074:	bf00      	nop
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b088:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2200      	movs	r2, #0
 800b096:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7fe fc7c 	bl	8009998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0c4:	61fb      	str	r3, [r7, #28]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	61bb      	str	r3, [r7, #24]
 800b0d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6979      	ldr	r1, [r7, #20]
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	613b      	str	r3, [r7, #16]
   return(result);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e6      	bne.n	800b0b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2220      	movs	r2, #32
 800b0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7f6 f8a9 	bl	8001248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0f6:	bf00      	nop
 800b0f8:	3720      	adds	r7, #32
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b106:	bf00      	nop
 800b108:	370c      	adds	r7, #12
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b112:	b480      	push	{r7}
 800b114:	b083      	sub	sp, #12
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b12e:	bf00      	nop
 800b130:	370c      	adds	r7, #12
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b085      	sub	sp, #20
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d101      	bne.n	800b150 <HAL_UARTEx_DisableFifoMode+0x16>
 800b14c:	2302      	movs	r3, #2
 800b14e:	e027      	b.n	800b1a0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2224      	movs	r2, #36	@ 0x24
 800b15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0201 	bic.w	r2, r2, #1
 800b176:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b17e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e02d      	b.n	800b220 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2224      	movs	r2, #36	@ 0x24
 800b1d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f022 0201 	bic.w	r2, r2, #1
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f8a3 	bl	800b34c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e02d      	b.n	800b29c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2224      	movs	r2, #36	@ 0x24
 800b24c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 0201 	bic.w	r2, r2, #1
 800b266:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f865 	bl	800b34c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2220      	movs	r2, #32
 800b28e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08c      	sub	sp, #48	@ 0x30
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d142      	bne.n	800b342 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e03b      	b.n	800b344 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b2d8:	88fb      	ldrh	r3, [r7, #6]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fc32 	bl	800ab48 <UART_Start_Receive_DMA>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b2ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d124      	bne.n	800b33c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d11d      	bne.n	800b336 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2210      	movs	r2, #16
 800b300:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	617b      	str	r3, [r7, #20]
   return(result);
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f043 0310 	orr.w	r3, r3, #16
 800b316:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b320:	627b      	str	r3, [r7, #36]	@ 0x24
 800b322:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6a39      	ldr	r1, [r7, #32]
 800b326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e6      	bne.n	800b302 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b334:	e002      	b.n	800b33c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b33c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b340:	e000      	b.n	800b344 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b342:	2302      	movs	r3, #2
  }
}
 800b344:	4618      	mov	r0, r3
 800b346:	3730      	adds	r7, #48	@ 0x30
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d108      	bne.n	800b36e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b36c:	e031      	b.n	800b3d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b36e:	2310      	movs	r3, #16
 800b370:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b372:	2310      	movs	r3, #16
 800b374:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	0e5b      	lsrs	r3, r3, #25
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	0f5b      	lsrs	r3, r3, #29
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	f003 0307 	and.w	r3, r3, #7
 800b394:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	7b3a      	ldrb	r2, [r7, #12]
 800b39a:	4911      	ldr	r1, [pc, #68]	@ (800b3e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b39c:	5c8a      	ldrb	r2, [r1, r2]
 800b39e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3a2:	7b3a      	ldrb	r2, [r7, #12]
 800b3a4:	490f      	ldr	r1, [pc, #60]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	7b7a      	ldrb	r2, [r7, #13]
 800b3b8:	4909      	ldr	r1, [pc, #36]	@ (800b3e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ba:	5c8a      	ldrb	r2, [r1, r2]
 800b3bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3c0:	7b7a      	ldrb	r2, [r7, #13]
 800b3c2:	4908      	ldr	r1, [pc, #32]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3d2:	bf00      	nop
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	0800b498 	.word	0x0800b498
 800b3e4:	0800b4a0 	.word	0x0800b4a0

0800b3e8 <memset>:
 800b3e8:	4402      	add	r2, r0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d100      	bne.n	800b3f2 <memset+0xa>
 800b3f0:	4770      	bx	lr
 800b3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3f6:	e7f9      	b.n	800b3ec <memset+0x4>

0800b3f8 <__libc_init_array>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b430 <__libc_init_array+0x38>)
 800b3fc:	4c0d      	ldr	r4, [pc, #52]	@ (800b434 <__libc_init_array+0x3c>)
 800b3fe:	1b64      	subs	r4, r4, r5
 800b400:	10a4      	asrs	r4, r4, #2
 800b402:	2600      	movs	r6, #0
 800b404:	42a6      	cmp	r6, r4
 800b406:	d109      	bne.n	800b41c <__libc_init_array+0x24>
 800b408:	4d0b      	ldr	r5, [pc, #44]	@ (800b438 <__libc_init_array+0x40>)
 800b40a:	4c0c      	ldr	r4, [pc, #48]	@ (800b43c <__libc_init_array+0x44>)
 800b40c:	f000 f818 	bl	800b440 <_init>
 800b410:	1b64      	subs	r4, r4, r5
 800b412:	10a4      	asrs	r4, r4, #2
 800b414:	2600      	movs	r6, #0
 800b416:	42a6      	cmp	r6, r4
 800b418:	d105      	bne.n	800b426 <__libc_init_array+0x2e>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b420:	4798      	blx	r3
 800b422:	3601      	adds	r6, #1
 800b424:	e7ee      	b.n	800b404 <__libc_init_array+0xc>
 800b426:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42a:	4798      	blx	r3
 800b42c:	3601      	adds	r6, #1
 800b42e:	e7f2      	b.n	800b416 <__libc_init_array+0x1e>
 800b430:	0800b4b0 	.word	0x0800b4b0
 800b434:	0800b4b0 	.word	0x0800b4b0
 800b438:	0800b4b0 	.word	0x0800b4b0
 800b43c:	0800b4b8 	.word	0x0800b4b8

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
