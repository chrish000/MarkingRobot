
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac14  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800aee0  0800aee0  0000bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af28  0800af28  0000bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af30  0800af30  0000bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af34  0800af34  0000bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800af38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d8  24000014  0800af4c  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003ec  0800af4c  0000c3ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016adb  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a76  00000000  00000000  00022b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00025598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dd6  00000000  00000000  00026748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000034df  00000000  00000000  0002751e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000190c8  00000000  00000000  0002a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cd5e  00000000  00000000  00043ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00190823  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004adc  00000000  00000000  00190868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  00195344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000014 	.word	0x24000014
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800aec8 	.word	0x0800aec8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000018 	.word	0x24000018
 8000308:	0800aec8 	.word	0x0800aec8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000602:	f000 fbc1 	bl	8000d88 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 ff2d 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f881 	bl	8000710 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fa75 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 8000612:	f000 fa3b 	bl	8000a8c <MX_DMA_Init>
  MX_UART8_Init();
 8000616:	f000 f9a1 	bl	800095c <MX_UART8_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f9eb 	bl	80009f4 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800061e:	f000 f8e7 	bl	80007f0 <MX_CRC_Init>
  MX_TIM2_Init();
 8000622:	f000 f925 	bl	8000870 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	/* CLK Konfiguration */
	HAL_TIM_Base_Start_IT(&htim2);
 8000626:	4830      	ldr	r0, [pc, #192]	@ (80006e8 <main+0xec>)
 8000628:	f007 f948 	bl	80078bc <HAL_TIM_Base_Start_IT>

	/* GPIO Konfiguration */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	@ 0x40
 8000630:	482e      	ldr	r0, [pc, #184]	@ (80006ec <main+0xf0>)
 8000632:	f004 fb3b 	bl	8004cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_RESET); //Treiber aktivieren
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <main+0xf4>)
 800063c:	f004 fb36 	bl	8004cac <HAL_GPIO_WritePin>

	/* UART Konfiguration */
	HAL_HalfDuplex_EnableReceiver(&huart2);
 8000640:	482c      	ldr	r0, [pc, #176]	@ (80006f4 <main+0xf8>)
 8000642:	f008 ff4b 	bl	80094dc <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000646:	2220      	movs	r2, #32
 8000648:	492b      	ldr	r1, [pc, #172]	@ (80006f8 <main+0xfc>)
 800064a:	482a      	ldr	r0, [pc, #168]	@ (80006f4 <main+0xf8>)
 800064c:	f00a fb6e 	bl	800ad2c <HAL_UARTEx_ReceiveToIdle_DMA>

	//########################### Uart X (Uart2)
	uint8_t write[8] = { 0x05, 0x0, 0xA2, 0, 0, 0x0F, 0xFF, 0xE9 }; //Schreiben von VACTUAL
 8000650:	4a2a      	ldr	r2, [pc, #168]	@ (80006fc <main+0x100>)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t read[4] = { 0x05, 0x0, 0x2, 0x8F };	//Auslesen von IFCNT
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <main+0x104>)
 8000660:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <main+0x108>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d007      	beq.n	800067c <main+0x80>
			//TODO gebe leeren Batteriestand auf Display aus
			//TODO Code in Interrupt stecken
			if (Move_To_Pos(HomePos))
 800066c:	4826      	ldr	r0, [pc, #152]	@ (8000708 <main+0x10c>)
 800066e:	f000 fbc7 	bl	8000e00 <Move_To_Pos>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <main+0x80>
				Error_Handler();
 8000678:	f000 fbb2 	bl	8000de0 <Error_Handler>
		}
		//*********************************************************************************************
		write[7] = HAL_CRC_Calculate(&hcrc, (uint32_t *)write, sizeof(write)-1);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	2207      	movs	r2, #7
 8000682:	4619      	mov	r1, r3
 8000684:	4821      	ldr	r0, [pc, #132]	@ (800070c <main+0x110>)
 8000686:	f001 f98f 	bl	80019a8 <HAL_CRC_Calculate>
 800068a:	4603      	mov	r3, r0
 800068c:	b2db      	uxtb	r3, r3
 800068e:	73fb      	strb	r3, [r7, #15]
		read[3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)read, sizeof(read)-1);
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2203      	movs	r2, #3
 8000694:	4619      	mov	r1, r3
 8000696:	481d      	ldr	r0, [pc, #116]	@ (800070c <main+0x110>)
 8000698:	f001 f986 	bl	80019a8 <HAL_CRC_Calculate>
 800069c:	4603      	mov	r3, r0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	71fb      	strb	r3, [r7, #7]
		//*********************************************************************************************
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 80006a2:	4814      	ldr	r0, [pc, #80]	@ (80006f4 <main+0xf8>)
 80006a4:	f008 fec6 	bl	8009434 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, write, 8);
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2208      	movs	r2, #8
 80006ae:	4619      	mov	r1, r3
 80006b0:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <main+0xf8>)
 80006b2:	f008 fa5d 	bl	8008b70 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 80006b6:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <main+0xf8>)
 80006b8:	f008 ff10 	bl	80094dc <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 80006bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c0:	f000 ff62 	bl	8001588 <HAL_Delay>
		HAL_HalfDuplex_EnableTransmitter(&huart2);
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <main+0xf8>)
 80006c6:	f008 feb5 	bl	8009434 <HAL_HalfDuplex_EnableTransmitter>
		HAL_UART_Transmit_DMA(&huart2, read, 4);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2204      	movs	r2, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <main+0xf8>)
 80006d2:	f008 fa4d 	bl	8008b70 <HAL_UART_Transmit_DMA>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 80006d6:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <main+0xf8>)
 80006d8:	f008 ff00 	bl	80094dc <HAL_HalfDuplex_EnableReceiver>
		HAL_Delay(1000);
 80006dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e0:	f000 ff52 	bl	8001588 <HAL_Delay>
		if (BatteryAlarm) {
 80006e4:	e7bd      	b.n	8000662 <main+0x66>
 80006e6:	bf00      	nop
 80006e8:	24000054 	.word	0x24000054
 80006ec:	58020c00 	.word	0x58020c00
 80006f0:	58021000 	.word	0x58021000
 80006f4:	24000134 	.word	0x24000134
 80006f8:	240003a8 	.word	0x240003a8
 80006fc:	0800aee0 	.word	0x0800aee0
 8000700:	8f020005 	.word	0x8f020005
 8000704:	240003c8 	.word	0x240003c8
 8000708:	240003cc 	.word	0x240003cc
 800070c:	24000030 	.word	0x24000030

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	@ 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071a:	224c      	movs	r2, #76	@ 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a fba6 	bl	800ae70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f00a fba0 	bl	800ae70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f004 fb09 	bl	8004d48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <SystemClock_Config+0xdc>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemClock_Config+0xdc>)
 8000740:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <SystemClock_Config+0xdc>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000752:	bf00      	nop
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <SystemClock_Config+0xdc>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000760:	d1f8      	bne.n	8000754 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	2302      	movs	r3, #2
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800076a:	2340      	movs	r3, #64	@ 0x40
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000772:	2300      	movs	r3, #0
 8000774:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800077a:	2322      	movs	r3, #34	@ 0x22
 800077c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000782:	2303      	movs	r3, #3
 8000784:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078a:	230c      	movs	r3, #12
 800078c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078e:	2300      	movs	r3, #0
 8000790:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000792:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000796:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fb0d 	bl	8004dbc <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a8:	f000 fb1a 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	233f      	movs	r3, #63	@ 0x3f
 80007ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2303      	movs	r3, #3
 80007b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007b8:	2308      	movs	r3, #8
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007bc:	2340      	movs	r3, #64	@ 0x40
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2103      	movs	r1, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fecc 	bl	8005570 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007de:	f000 faff 	bl	8000de0 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3770      	adds	r7, #112	@ 0x70
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	58024800 	.word	0x58024800

080007f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_CRC_Init+0x74>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fc:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <MX_CRC_Init+0x74>)
 80007fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_CRC_Init+0x74>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_CRC_Init+0x78>)
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <MX_CRC_Init+0x7c>)
 8000818:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_CRC_Init+0x78>)
 800081c:	2201      	movs	r2, #1
 800081e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_CRC_Init+0x78>)
 8000822:	2201      	movs	r2, #1
 8000824:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 7;
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <MX_CRC_Init+0x78>)
 8000828:	2207      	movs	r2, #7
 800082a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_CRC_Init+0x78>)
 800082e:	2210      	movs	r2, #16
 8000830:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0;
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <MX_CRC_Init+0x78>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_CRC_Init+0x78>)
 800083a:	2220      	movs	r2, #32
 800083c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_CRC_Init+0x78>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_CRC_Init+0x78>)
 8000846:	2201      	movs	r2, #1
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800084a:	4807      	ldr	r0, [pc, #28]	@ (8000868 <MX_CRC_Init+0x78>)
 800084c:	f001 f848 	bl	80018e0 <HAL_CRC_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_CRC_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 fac3 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	24000030 	.word	0x24000030
 800086c:	58024c00 	.word	0x58024c00

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	@ 0x38
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 80008aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008ac:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80008b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b25      	ldr	r3, [pc, #148]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008cc:	4822      	ldr	r0, [pc, #136]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008ce:	f006 ff9d 	bl	800780c <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80008d8:	f000 fa82 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	4619      	mov	r1, r3
 80008e8:	481b      	ldr	r0, [pc, #108]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008ea:	f007 fae9 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008f4:	f000 fa74 	bl	8000de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f8:	4817      	ldr	r0, [pc, #92]	@ (8000958 <MX_TIM2_Init+0xe8>)
 80008fa:	f007 f865 	bl	80079c8 <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000904:	f000 fa6c 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4810      	ldr	r0, [pc, #64]	@ (8000958 <MX_TIM2_Init+0xe8>)
 8000918:	f008 f818 	bl	800894c <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000922:	f000 fa5d 	bl	8000de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2360      	movs	r3, #96	@ 0x60
 8000928:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800092a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800092e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	@ (8000958 <MX_TIM2_Init+0xe8>)
 8000940:	f007 f9aa 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 800094a:	f000 fa49 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3738      	adds	r7, #56	@ 0x38
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000054 	.word	0x24000054

0800095c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_UART8_Init+0x90>)
 8000962:	4a23      	ldr	r2, [pc, #140]	@ (80009f0 <MX_UART8_Init+0x94>)
 8000964:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_UART8_Init+0x90>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_UART8_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_UART8_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_UART8_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_UART8_Init+0x90>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_UART8_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_UART8_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_UART8_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_UART8_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099e:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <MX_UART8_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart8) != HAL_OK)
 80009a4:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_UART8_Init+0x90>)
 80009a6:	f008 f88b 	bl	8008ac0 <HAL_HalfDuplex_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80009b0:	f000 fa16 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_UART8_Init+0x90>)
 80009b8:	f00a f93c 	bl	800ac34 <HAL_UARTEx_SetTxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80009c2:	f000 fa0d 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c6:	2100      	movs	r1, #0
 80009c8:	4808      	ldr	r0, [pc, #32]	@ (80009ec <MX_UART8_Init+0x90>)
 80009ca:	f00a f971 	bl	800acb0 <HAL_UARTEx_SetRxFifoThreshold>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80009d4:	f000 fa04 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_UART8_Init+0x90>)
 80009da:	f00a f8f2 	bl	800abc2 <HAL_UARTEx_DisableFifoMode>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80009e4:	f000 f9fc 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	240000a0 	.word	0x240000a0
 80009f0:	40007c00 	.word	0x40007c00

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	@ (8000a88 <MX_USART2_UART_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a3e:	f008 f83f 	bl	8008ac0 <HAL_HalfDuplex_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f9ca 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a50:	f00a f8f0 	bl	800ac34 <HAL_UARTEx_SetTxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 f9c1 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a62:	f00a f925 	bl	800acb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f9b8 	bl	8000de0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a72:	f00a f8a6 	bl	800abc2 <HAL_UARTEx_DisableFifoMode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 f9b0 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000134 	.word	0x24000134
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_DMA_Init+0x6c>)
 8000a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <MX_DMA_Init+0x6c>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_DMA_Init+0x6c>)
 8000aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	200b      	movs	r0, #11
 8000ab6:	f000 fe66 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aba:	200b      	movs	r0, #11
 8000abc:	f000 fe7d 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	200c      	movs	r0, #12
 8000ac6:	f000 fe5e 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aca:	200c      	movs	r0, #12
 8000acc:	f000 fe75 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f000 fe56 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ada:	200d      	movs	r0, #13
 8000adc:	f000 fe6d 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	f000 fe4e 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000aea:	200e      	movs	r0, #14
 8000aec:	f000 fe65 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b12:	4b52      	ldr	r3, [pc, #328]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a50      	ldr	r2, [pc, #320]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b4e      	ldr	r3, [pc, #312]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b4a      	ldr	r3, [pc, #296]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a49      	ldr	r2, [pc, #292]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b46      	ldr	r3, [pc, #280]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a41      	ldr	r2, [pc, #260]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a3a      	ldr	r2, [pc, #232]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <MX_GPIO_Init+0x160>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin|Z_DIR_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210c      	movs	r1, #12
 8000b8e:	4834      	ldr	r0, [pc, #208]	@ (8000c60 <MX_GPIO_Init+0x164>)
 8000b90:	f004 f88c 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2118      	movs	r1, #24
 8000b98:	4832      	ldr	r0, [pc, #200]	@ (8000c64 <MX_GPIO_Init+0x168>)
 8000b9a:	f004 f887 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2140      	movs	r1, #64	@ 0x40
 8000ba2:	4830      	ldr	r0, [pc, #192]	@ (8000c64 <MX_GPIO_Init+0x168>)
 8000ba4:	f004 f882 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	482e      	ldr	r0, [pc, #184]	@ (8000c68 <MX_GPIO_Init+0x16c>)
 8000bae:	f004 f87d 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	482a      	ldr	r0, [pc, #168]	@ (8000c60 <MX_GPIO_Init+0x164>)
 8000bb8:	f004 f878 	bl	8004cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
  GPIO_InitStruct.Pin = Z_STEP_Pin|Z_DIR_Pin|Z_EN_Pin;
 8000bbc:	230d      	movs	r3, #13
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4823      	ldr	r0, [pc, #140]	@ (8000c60 <MX_GPIO_Init+0x164>)
 8000bd4:	f003 fec2 	bl	800495c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRDET_Pin */
  GPIO_InitStruct.Pin = PWRDET_Pin;
 8000bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bde:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <MX_GPIO_Init+0x170>)
 8000bf0:	f003 feb4 	bl	800495c <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
  GPIO_InitStruct.Pin = Z_MIN_Pin|X_MIN_Pin;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4819      	ldr	r0, [pc, #100]	@ (8000c6c <MX_GPIO_Init+0x170>)
 8000c08:	f003 fea8 	bl	800495c <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000c0c:	2358      	movs	r3, #88	@ 0x58
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4810      	ldr	r0, [pc, #64]	@ (8000c64 <MX_GPIO_Init+0x168>)
 8000c24:	f003 fe9a 	bl	800495c <HAL_GPIO_Init>

  /*Configure GPIO pin : HE0_PWM_Pin */
  GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <MX_GPIO_Init+0x16c>)
 8000c40:	f003 fe8c 	bl	800495c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	2028      	movs	r0, #40	@ 0x28
 8000c4a:	f000 fd9c 	bl	8001786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c4e:	2028      	movs	r0, #40	@ 0x28
 8000c50:	f000 fdb3 	bl	80017ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58021000 	.word	0x58021000
 8000c64:	58020c00 	.word	0x58020c00
 8000c68:	58020400 	.word	0x58020400
 8000c6c:	58020800 	.word	0x58020800

08000c70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c80:	d102      	bne.n	8000c88 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
	}
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	240003c8 	.word	0x240003c8

08000c98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca8:	d13d      	bne.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x8e>
		if (PWMEnabledX) {
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d038      	beq.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x8e>
			PWMCounterX++;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cc0:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d307      	bcc.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x4a>
				PWMCounterX = 0;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ce0:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d205      	bcs.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x66>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4813      	ldr	r0, [pc, #76]	@ (8000d44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cf8:	f003 ffd8 	bl	8004cac <HAL_GPIO_WritePin>
 8000cfc:	e004      	b.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x70>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2110      	movs	r1, #16
 8000d02:	4810      	ldr	r0, [pc, #64]	@ (8000d44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d04:	f003 ffd2 	bl	8004cac <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d307      	bcc.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x8e>
				PWMEnabledX = false;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d22:	f003 ffc3 	bl	8004cac <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240003e4 	.word	0x240003e4
 8000d34:	240003dc 	.word	0x240003dc
 8000d38:	24000000 	.word	0x24000000
 8000d3c:	240003d8 	.word	0x240003d8
 8000d40:	24000002 	.word	0x24000002
 8000d44:	58020c00 	.word	0x58020c00
 8000d48:	240003e0 	.word	0x240003e0

08000d4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {

	}
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxDatagram, 32);
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	4904      	ldr	r1, [pc, #16]	@ (8000d80 <HAL_UARTEx_RxEventCallback+0x20>)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <HAL_UARTEx_RxEventCallback+0x24>)
 8000d72:	f009 ffdb 	bl	800ad2c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	240003a8 	.word	0x240003a8
 8000d84:	24000134 	.word	0x24000134

08000d88 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d9a:	f000 fd29 	bl	80017f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000daa:	231f      	movs	r3, #31
 8000dac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dae:	2387      	movs	r3, #135	@ 0x87
 8000db0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000db6:	2300      	movs	r3, #0
 8000db8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fd47 	bl	8001860 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f000 fd24 	bl	8001820 <HAL_MPU_Enable>

}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000de8:	2108      	movs	r1, #8
 8000dea:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <Error_Handler+0x1c>)
 8000dec:	f003 ff77 	bl	8004cde <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f000 fbc9 	bl	8001588 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000df6:	bf00      	nop
 8000df8:	e7f6      	b.n	8000de8 <Error_Handler+0x8>
 8000dfa:	bf00      	nop
 8000dfc:	58020400 	.word	0x58020400

08000e00 <Move_To_Pos>:
	HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, (Dir == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	PWMEnabledX = true; // Start Bewegung
}

uint8_t Move_To_Pos(uint16_t NextPosition[2])
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if(NextPosition[0] != PosX && NextPosition[1] != PosY)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <Move_To_Pos+0x38>)
 8000e16:	edd3 7a00 	vldr	s15, [r3]
 8000e1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e22:	d001      	beq.n	8000e28 <Move_To_Pos+0x28>
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <Move_To_Pos+0x3c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
	{
		//TODO Logik für Bewegung zu nächstem Punkt
	}
	return true;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	240003d0 	.word	0x240003d0
 8000e3c:	240003d4 	.word	0x240003d4

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_MspInit+0x30>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e4c:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <HAL_MspInit+0x30>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_MspInit+0x30>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	58024400 	.word	0x58024400

08000e74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb0 <HAL_CRC_MspInit+0x3c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10e      	bne.n	8000ea4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024c00 	.word	0x58024c00
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec8:	d116      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_TIM_Base_MspInit+0x48>)
 8000edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	201c      	movs	r0, #28
 8000eee:	f000 fc4a 	bl	8001786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef2:	201c      	movs	r0, #28
 8000ef4:	f000 fc61 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0ba      	sub	sp, #232	@ 0xe8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0318 	add.w	r3, r7, #24
 8000f20:	22b8      	movs	r2, #184	@ 0xb8
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f009 ffa3 	bl	800ae70 <memset>
  if(huart->Instance==UART8)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4ab0      	ldr	r2, [pc, #704]	@ (80011f0 <HAL_UART_MspInit+0x2ec>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	f040 80aa 	bne.w	800108a <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8000f36:	f04f 0202 	mov.w	r2, #2
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fe9b 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000f58:	f7ff ff42 	bl	8000de0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8000f5c:	4ba5      	ldr	r3, [pc, #660]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f62:	4aa4      	ldr	r2, [pc, #656]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f68:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6c:	4ba1      	ldr	r3, [pc, #644]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	4b9e      	ldr	r3, [pc, #632]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a9c      	ldr	r2, [pc, #624]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b9a      	ldr	r3, [pc, #616]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	488e      	ldr	r0, [pc, #568]	@ (80011f8 <HAL_UART_MspInit+0x2f4>)
 8000fbe:	f003 fccd 	bl	800495c <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 8000fc2:	4b8e      	ldr	r3, [pc, #568]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fc4:	4a8e      	ldr	r2, [pc, #568]	@ (8001200 <HAL_UART_MspInit+0x2fc>)
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fca:	2252      	movs	r2, #82	@ 0x52
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b8b      	ldr	r3, [pc, #556]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fd0:	2240      	movs	r2, #64	@ 0x40
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b89      	ldr	r3, [pc, #548]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b88      	ldr	r3, [pc, #544]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe2:	4b86      	ldr	r3, [pc, #536]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe8:	4b84      	ldr	r3, [pc, #528]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8000fee:	4b83      	ldr	r3, [pc, #524]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ff4:	4b81      	ldr	r3, [pc, #516]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffa:	4b80      	ldr	r3, [pc, #512]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001000:	487e      	ldr	r0, [pc, #504]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8001002:	f000 fe73 	bl	8001cec <HAL_DMA_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800100c:	f7ff fee8 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a7a      	ldr	r2, [pc, #488]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8001014:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001016:	4a79      	ldr	r2, [pc, #484]	@ (80011fc <HAL_UART_MspInit+0x2f8>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 800101c:	4b79      	ldr	r3, [pc, #484]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800101e:	4a7a      	ldr	r2, [pc, #488]	@ (8001208 <HAL_UART_MspInit+0x304>)
 8001020:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001022:	4b78      	ldr	r3, [pc, #480]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001024:	2251      	movs	r2, #81	@ 0x51
 8001026:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001028:	4b76      	ldr	r3, [pc, #472]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b75      	ldr	r3, [pc, #468]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b73      	ldr	r3, [pc, #460]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800103a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b71      	ldr	r3, [pc, #452]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b70      	ldr	r3, [pc, #448]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001048:	4b6e      	ldr	r3, [pc, #440]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b6d      	ldr	r3, [pc, #436]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b6b      	ldr	r3, [pc, #428]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800105a:	486a      	ldr	r0, [pc, #424]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800105c:	f000 fe46 	bl	8001cec <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001066:	f7ff febb 	bl	8000de0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a65      	ldr	r2, [pc, #404]	@ (8001204 <HAL_UART_MspInit+0x300>)
 800106e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001072:	4a64      	ldr	r2, [pc, #400]	@ (8001204 <HAL_UART_MspInit+0x300>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	2053      	movs	r0, #83	@ 0x53
 800107e:	f000 fb82 	bl	8001786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001082:	2053      	movs	r0, #83	@ 0x53
 8001084:	f000 fb99 	bl	80017ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001088:	e0ae      	b.n	80011e8 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a5f      	ldr	r2, [pc, #380]	@ (800120c <HAL_UART_MspInit+0x308>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 80a9 	bne.w	80011e8 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001096:	f04f 0202 	mov.w	r2, #2
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fdeb 	bl	8005c88 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80010b8:	f7ff fe92 	bl	8000de0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c2:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010cc:	4b49      	ldr	r3, [pc, #292]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010da:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a44      	ldr	r2, [pc, #272]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b42      	ldr	r3, [pc, #264]	@ (80011f4 <HAL_UART_MspInit+0x2f0>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 80010f8:	2320      	movs	r3, #32
 80010fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001110:	2307      	movs	r3, #7
 8001112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800111a:	4619      	mov	r1, r3
 800111c:	483c      	ldr	r0, [pc, #240]	@ (8001210 <HAL_UART_MspInit+0x30c>)
 800111e:	f003 fc1d 	bl	800495c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001124:	4a3c      	ldr	r2, [pc, #240]	@ (8001218 <HAL_UART_MspInit+0x314>)
 8001126:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <HAL_UART_MspInit+0x310>)
 800112a:	222c      	movs	r2, #44	@ 0x2c
 800112c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112e:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001130:	2240      	movs	r2, #64	@ 0x40
 8001132:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001134:	4b37      	ldr	r3, [pc, #220]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113a:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_UART_MspInit+0x310>)
 800113c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b34      	ldr	r3, [pc, #208]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b32      	ldr	r3, [pc, #200]	@ (8001214 <HAL_UART_MspInit+0x310>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_UART_MspInit+0x310>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001160:	482c      	ldr	r0, [pc, #176]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001162:	f000 fdc3 	bl	8001cec <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800116c:	f7ff fe38 	bl	8000de0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001174:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001176:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <HAL_UART_MspInit+0x310>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 800117c:	4b27      	ldr	r3, [pc, #156]	@ (800121c <HAL_UART_MspInit+0x318>)
 800117e:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <HAL_UART_MspInit+0x31c>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001182:	4b26      	ldr	r3, [pc, #152]	@ (800121c <HAL_UART_MspInit+0x318>)
 8001184:	222b      	movs	r2, #43	@ 0x2b
 8001186:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001188:	4b24      	ldr	r3, [pc, #144]	@ (800121c <HAL_UART_MspInit+0x318>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_UART_MspInit+0x318>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <HAL_UART_MspInit+0x318>)
 8001196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <HAL_UART_MspInit+0x318>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011ba:	4818      	ldr	r0, [pc, #96]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011bc:	f000 fd96 	bl	8001cec <HAL_DMA_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80011c6:	f7ff fe0b 	bl	8000de0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <HAL_UART_MspInit+0x318>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2026      	movs	r0, #38	@ 0x26
 80011de:	f000 fad2 	bl	8001786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011e2:	2026      	movs	r0, #38	@ 0x26
 80011e4:	f000 fae9 	bl	80017ba <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	37e8      	adds	r7, #232	@ 0xe8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40007c00 	.word	0x40007c00
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58021000 	.word	0x58021000
 80011fc:	240001c8 	.word	0x240001c8
 8001200:	40020040 	.word	0x40020040
 8001204:	24000240 	.word	0x24000240
 8001208:	40020058 	.word	0x40020058
 800120c:	40004400 	.word	0x40004400
 8001210:	58020c00 	.word	0x58020c00
 8001214:	240002b8 	.word	0x240002b8
 8001218:	40020010 	.word	0x40020010
 800121c:	24000330 	.word	0x24000330
 8001220:	40020028 	.word	0x40020028

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f965 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Stream0_IRQHandler+0x10>)
 800128a:	f002 f855 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	240002b8 	.word	0x240002b8

08001298 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <DMA1_Stream1_IRQHandler+0x10>)
 800129e:	f002 f84b 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000330 	.word	0x24000330

080012ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <DMA1_Stream2_IRQHandler+0x10>)
 80012b2:	f002 f841 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240001c8 	.word	0x240001c8

080012c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80012c4:	4802      	ldr	r0, [pc, #8]	@ (80012d0 <DMA1_Stream3_IRQHandler+0x10>)
 80012c6:	f002 f837 	bl	8003338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000240 	.word	0x24000240

080012d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <TIM2_IRQHandler+0x10>)
 80012da:	f006 fbd6 	bl	8007a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000054 	.word	0x24000054

080012e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <USART2_IRQHandler+0x10>)
 80012ee:	f007 fcbf 	bl	8008c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	24000134 	.word	0x24000134

080012fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001300:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001304:	f003 fd05 	bl	8004d12 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <UART8_IRQHandler+0x10>)
 8001312:	f007 fcad 	bl	8008c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	240000a0 	.word	0x240000a0

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001324:	4b32      	ldr	r3, [pc, #200]	@ (80013f0 <SystemInit+0xd0>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a31      	ldr	r2, [pc, #196]	@ (80013f0 <SystemInit+0xd0>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <SystemInit+0xd4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	2b06      	cmp	r3, #6
 800133e:	d807      	bhi.n	8001350 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001340:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <SystemInit+0xd4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 030f 	bic.w	r3, r3, #15
 8001348:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <SystemInit+0xd4>)
 800134a:	f043 0307 	orr.w	r3, r3, #7
 800134e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001350:	4b29      	ldr	r3, [pc, #164]	@ (80013f8 <SystemInit+0xd8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a28      	ldr	r2, [pc, #160]	@ (80013f8 <SystemInit+0xd8>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800135c:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <SystemInit+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001362:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <SystemInit+0xd8>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4924      	ldr	r1, [pc, #144]	@ (80013f8 <SystemInit+0xd8>)
 8001368:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <SystemInit+0xdc>)
 800136a:	4013      	ands	r3, r2
 800136c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800136e:	4b21      	ldr	r3, [pc, #132]	@ (80013f4 <SystemInit+0xd4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800137a:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <SystemInit+0xd4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 030f 	bic.w	r3, r3, #15
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <SystemInit+0xd4>)
 8001384:	f043 0307 	orr.w	r3, r3, #7
 8001388:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <SystemInit+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <SystemInit+0xd8>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <SystemInit+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <SystemInit+0xd8>)
 800139e:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <SystemInit+0xe0>)
 80013a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <SystemInit+0xd8>)
 80013a4:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <SystemInit+0xe4>)
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <SystemInit+0xd8>)
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <SystemInit+0xe8>)
 80013ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <SystemInit+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b4:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <SystemInit+0xd8>)
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <SystemInit+0xe8>)
 80013b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <SystemInit+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <SystemInit+0xd8>)
 80013c2:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <SystemInit+0xe8>)
 80013c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <SystemInit+0xd8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <SystemInit+0xd8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <SystemInit+0xd8>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d8:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <SystemInit+0xd8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <SystemInit+0xec>)
 80013e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00
 80013f4:	52002000 	.word	0x52002000
 80013f8:	58024400 	.word	0x58024400
 80013fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001400:	02020200 	.word	0x02020200
 8001404:	01ff0000 	.word	0x01ff0000
 8001408:	01010280 	.word	0x01010280
 800140c:	52004000 	.word	0x52004000

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001448 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001414:	f7ff ff84 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f009 fd1f 	bl	800ae80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff f8db 	bl	80005fc <main>
  bx  lr
 8001446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001448:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800144c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001450:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001454:	0800af38 	.word	0x0800af38
  ldr r2, =_sbss
 8001458:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 800145c:	240003ec 	.word	0x240003ec

08001460 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC3_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146a:	2003      	movs	r0, #3
 800146c:	f000 f980 	bl	8001770 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001470:	f004 fa34 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 8001474:	4602      	mov	r2, r0
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_Init+0x68>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	0a1b      	lsrs	r3, r3, #8
 800147c:	f003 030f 	and.w	r3, r3, #15
 8001480:	4913      	ldr	r1, [pc, #76]	@ (80014d0 <HAL_Init+0x6c>)
 8001482:	5ccb      	ldrb	r3, [r1, r3]
 8001484:	f003 031f 	and.w	r3, r3, #31
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <HAL_Init+0x68>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	4a0e      	ldr	r2, [pc, #56]	@ (80014d0 <HAL_Init+0x6c>)
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_Init+0x70>)
 80014a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_Init+0x74>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f814 	bl	80014dc <HAL_InitTick>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e002      	b.n	80014c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014be:	f7ff fcbf 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58024400 	.word	0x58024400
 80014d0:	0800aee8 	.word	0x0800aee8
 80014d4:	24000008 	.word	0x24000008
 80014d8:	24000004 	.word	0x24000004

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014e4:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_InitTick+0x60>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e021      	b.n	8001534 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_InitTick+0x64>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_InitTick+0x60>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f965 	bl	80017d6 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f92f 	bl	8001786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x68>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	24000010 	.word	0x24000010
 8001540:	24000004 	.word	0x24000004
 8001544:	2400000c 	.word	0x2400000c

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	24000010 	.word	0x24000010
 800156c:	240003e8 	.word	0x240003e8

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	240003e8 	.word	0x240003e8

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	24000010 	.word	0x24000010

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	@ (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	@ 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800173c:	d301      	bcc.n	8001742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173e:	2301      	movs	r3, #1
 8001740:	e00f      	b.n	8001762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <SysTick_Config+0x40>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174a:	210f      	movs	r1, #15
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f7ff ff8e 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <SysTick_Config+0x40>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175a:	4b04      	ldr	r3, [pc, #16]	@ (800176c <SysTick_Config+0x40>)
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000e010 	.word	0xe000e010

08001770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff29 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff40 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff33 	bl	8001634 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa4 	bl	800172c <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017f4:	f3bf 8f5f 	dmb	sy
}
 80017f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_MPU_Disable+0x28>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <HAL_MPU_Disable+0x28>)
 8001800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001804:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <HAL_MPU_Disable+0x2c>)
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	e000ed90 	.word	0xe000ed90

08001820 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001828:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <HAL_MPU_Enable+0x38>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_MPU_Enable+0x3c>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_MPU_Enable+0x3c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800183e:	f3bf 8f4f 	dsb	sy
}
 8001842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001844:	f3bf 8f6f 	isb	sy
}
 8001848:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed90 	.word	0xe000ed90
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 800186e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800187c:	4a17      	ldr	r2, [pc, #92]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7b1b      	ldrb	r3, [r3, #12]
 8001888:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7adb      	ldrb	r3, [r3, #11]
 800188e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001890:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7a9b      	ldrb	r3, [r3, #10]
 8001896:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001898:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7b5b      	ldrb	r3, [r3, #13]
 800189e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80018a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7b9b      	ldrb	r3, [r3, #14]
 80018a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80018a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7bdb      	ldrb	r3, [r3, #15]
 80018ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80018b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7a5b      	ldrb	r3, [r3, #9]
 80018b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80018b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80018c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80018ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80018cc:	6113      	str	r3, [r2, #16]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed90 	.word	0xe000ed90

080018e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e054      	b.n	800199c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7f5b      	ldrb	r3, [r3, #29]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fab6 	bl	8000e74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	791b      	ldrb	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a22      	ldr	r2, [pc, #136]	@ (80019a4 <HAL_CRC_Init+0xc4>)
 800191c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0218 	bic.w	r2, r2, #24
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	e00c      	b.n	800194a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6899      	ldr	r1, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	461a      	mov	r2, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f948 	bl	8001bd0 <HAL_CRCEx_Polynomial_Set>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e028      	b.n	800199c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	795b      	ldrb	r3, [r3, #5]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d105      	bne.n	800195e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f04f 32ff 	mov.w	r2, #4294967295
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	e004      	b.n	8001968 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6912      	ldr	r2, [r2, #16]
 8001966:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695a      	ldr	r2, [r3, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	04c11db7 	.word	0x04c11db7

080019a8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2202      	movs	r2, #2
 80019bc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d006      	beq.n	80019e4 <HAL_CRC_Calculate+0x3c>
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d829      	bhi.n	8001a2e <HAL_CRC_Calculate+0x86>
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d019      	beq.n	8001a12 <HAL_CRC_Calculate+0x6a>
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d01e      	beq.n	8001a20 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80019e2:	e024      	b.n	8001a2e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	441a      	add	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3f0      	bcc.n	80019ea <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
      break;
 8001a10:	e00e      	b.n	8001a30 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f812 	bl	8001a40 <CRC_Handle_8>
 8001a1c:	6138      	str	r0, [r7, #16]
      break;
 8001a1e:	e007      	b.n	8001a30 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f899 	bl	8001b5c <CRC_Handle_16>
 8001a2a:	6138      	str	r0, [r7, #16]
      break;
 8001a2c:	e000      	b.n	8001a30 <HAL_CRC_Calculate+0x88>
      break;
 8001a2e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2201      	movs	r2, #1
 8001a34:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001a36:	693b      	ldr	r3, [r7, #16]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	e023      	b.n	8001a9a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	3301      	adds	r3, #1
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	440b      	add	r3, r1
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a6c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	440b      	add	r3, r1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001a7c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3303      	adds	r3, #3
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	440b      	add	r3, r1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001a90:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d3d6      	bcc.n	8001a52 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d04d      	beq.n	8001b4a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	4413      	add	r3, r2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d116      	bne.n	8001b00 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b21a      	sxth	r2, r3
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	8b7a      	ldrh	r2, [r7, #26]
 8001afe:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d11f      	bne.n	8001b4a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	440b      	add	r3, r1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	8b7a      	ldrh	r2, [r7, #26]
 8001b36:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	4413      	add	r3, r2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3724      	adds	r7, #36	@ 0x24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e013      	b.n	8001b96 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	4413      	add	r3, r2
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	440b      	add	r3, r1
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3e6      	bcc.n	8001b6e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001be0:	231f      	movs	r3, #31
 8001be2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	e063      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001bf4:	bf00      	nop
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1e5a      	subs	r2, r3, #1
 8001bfa:	613a      	str	r2, [r7, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_CRCEx_Polynomial_Set+0x44>
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d846      	bhi.n	8001ca8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001caf 	.word	0x08001caf
 8001c24:	08001ca9 	.word	0x08001ca9
 8001c28:	08001ca9 	.word	0x08001ca9
 8001c2c:	08001ca9 	.word	0x08001ca9
 8001c30:	08001ca9 	.word	0x08001ca9
 8001c34:	08001ca9 	.word	0x08001ca9
 8001c38:	08001ca9 	.word	0x08001ca9
 8001c3c:	08001ca9 	.word	0x08001ca9
 8001c40:	08001c9d 	.word	0x08001c9d
 8001c44:	08001ca9 	.word	0x08001ca9
 8001c48:	08001ca9 	.word	0x08001ca9
 8001c4c:	08001ca9 	.word	0x08001ca9
 8001c50:	08001ca9 	.word	0x08001ca9
 8001c54:	08001ca9 	.word	0x08001ca9
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001ca9 	.word	0x08001ca9
 8001c60:	08001c91 	.word	0x08001c91
 8001c64:	08001ca9 	.word	0x08001ca9
 8001c68:	08001ca9 	.word	0x08001ca9
 8001c6c:	08001ca9 	.word	0x08001ca9
 8001c70:	08001ca9 	.word	0x08001ca9
 8001c74:	08001ca9 	.word	0x08001ca9
 8001c78:	08001ca9 	.word	0x08001ca9
 8001c7c:	08001ca9 	.word	0x08001ca9
 8001c80:	08001c85 	.word	0x08001c85
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d913      	bls.n	8001cb2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001c8e:	e010      	b.n	8001cb2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b07      	cmp	r3, #7
 8001c94:	d90f      	bls.n	8001cb6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001c9a:	e00c      	b.n	8001cb6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	d90b      	bls.n	8001cba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001ca6:	e008      	b.n	8001cba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
        break;
 8001cac:	e006      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cae:	bf00      	nop
 8001cb0:	e004      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cb2:	bf00      	nop
 8001cb4:	e002      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001cba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001cbc:	7dfb      	ldrb	r3, [r7, #23]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f023 0118 	bic.w	r1, r3, #24
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fc3c 	bl	8001570 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e312      	b.n	800232a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a66      	ldr	r2, [pc, #408]	@ (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d04a      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a65      	ldr	r2, [pc, #404]	@ (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d045      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a63      	ldr	r2, [pc, #396]	@ (8001eac <HAL_DMA_Init+0x1c0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d040      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a62      	ldr	r2, [pc, #392]	@ (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d03b      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a60      	ldr	r2, [pc, #384]	@ (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d036      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d031      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	@ (8001ebc <HAL_DMA_Init+0x1d0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02c      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d027      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a59      	ldr	r2, [pc, #356]	@ (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d01d      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <HAL_DMA_Init+0x1e0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a56      	ldr	r2, [pc, #344]	@ (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a54      	ldr	r2, [pc, #336]	@ (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a53      	ldr	r2, [pc, #332]	@ (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a51      	ldr	r2, [pc, #324]	@ (8001edc <HAL_DMA_Init+0x1f0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_DMA_Init+0xb8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a50      	ldr	r2, [pc, #320]	@ (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d101      	bne.n	8001da8 <HAL_DMA_Init+0xbc>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <HAL_DMA_Init+0xbe>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 813c 	beq.w	8002028 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a37      	ldr	r2, [pc, #220]	@ (8001ea4 <HAL_DMA_Init+0x1b8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04a      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	@ (8001ea8 <HAL_DMA_Init+0x1bc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d045      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a34      	ldr	r2, [pc, #208]	@ (8001eac <HAL_DMA_Init+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d040      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a33      	ldr	r2, [pc, #204]	@ (8001eb0 <HAL_DMA_Init+0x1c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d03b      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a31      	ldr	r2, [pc, #196]	@ (8001eb4 <HAL_DMA_Init+0x1c8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a30      	ldr	r2, [pc, #192]	@ (8001eb8 <HAL_DMA_Init+0x1cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a2e      	ldr	r2, [pc, #184]	@ (8001ebc <HAL_DMA_Init+0x1d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02c      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ec0 <HAL_DMA_Init+0x1d4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d027      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec4 <HAL_DMA_Init+0x1d8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec8 <HAL_DMA_Init+0x1dc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01d      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	@ (8001ecc <HAL_DMA_Init+0x1e0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_DMA_Init+0x1e4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	@ (8001ed4 <HAL_DMA_Init+0x1e8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a24      	ldr	r2, [pc, #144]	@ (8001ed8 <HAL_DMA_Init+0x1ec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a22      	ldr	r2, [pc, #136]	@ (8001edc <HAL_DMA_Init+0x1f0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Init+0x174>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <HAL_DMA_Init+0x1f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_Init+0x186>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_DMA_Init+0x196>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e82:	e02f      	b.n	8001ee4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e84:	f7ff fb74 	bl	8001570 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b05      	cmp	r3, #5
 8001e90:	d928      	bls.n	8001ee4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e242      	b.n	800232a <HAL_DMA_Init+0x63e>
 8001ea4:	40020010 	.word	0x40020010
 8001ea8:	40020028 	.word	0x40020028
 8001eac:	40020040 	.word	0x40020040
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	40020070 	.word	0x40020070
 8001eb8:	40020088 	.word	0x40020088
 8001ebc:	400200a0 	.word	0x400200a0
 8001ec0:	400200b8 	.word	0x400200b8
 8001ec4:	40020410 	.word	0x40020410
 8001ec8:	40020428 	.word	0x40020428
 8001ecc:	40020440 	.word	0x40020440
 8001ed0:	40020458 	.word	0x40020458
 8001ed4:	40020470 	.word	0x40020470
 8001ed8:	40020488 	.word	0x40020488
 8001edc:	400204a0 	.word	0x400204a0
 8001ee0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1c8      	bne.n	8001e84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4b83      	ldr	r3, [pc, #524]	@ (800210c <HAL_DMA_Init+0x420>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b28      	cmp	r3, #40	@ 0x28
 8001f4e:	d903      	bls.n	8001f58 <HAL_DMA_Init+0x26c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f56:	d91f      	bls.n	8001f98 <HAL_DMA_Init+0x2ac>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f5e:	d903      	bls.n	8001f68 <HAL_DMA_Init+0x27c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b42      	cmp	r3, #66	@ 0x42
 8001f66:	d917      	bls.n	8001f98 <HAL_DMA_Init+0x2ac>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b46      	cmp	r3, #70	@ 0x46
 8001f6e:	d903      	bls.n	8001f78 <HAL_DMA_Init+0x28c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b48      	cmp	r3, #72	@ 0x48
 8001f76:	d90f      	bls.n	8001f98 <HAL_DMA_Init+0x2ac>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001f7e:	d903      	bls.n	8001f88 <HAL_DMA_Init+0x29c>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b52      	cmp	r3, #82	@ 0x52
 8001f86:	d907      	bls.n	8001f98 <HAL_DMA_Init+0x2ac>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b73      	cmp	r3, #115	@ 0x73
 8001f8e:	d905      	bls.n	8001f9c <HAL_DMA_Init+0x2b0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b77      	cmp	r3, #119	@ 0x77
 8001f96:	d801      	bhi.n	8001f9c <HAL_DMA_Init+0x2b0>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_Init+0x2b2>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d117      	bne.n	8002004 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00e      	beq.n	8002004 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f002 fb2e 	bl	8004648 <DMA_CheckFifoParam>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2240      	movs	r2, #64	@ 0x40
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e192      	b.n	800232a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f002 fa69 	bl	80044e4 <DMA_CalcBaseAndBitshift>
 8002012:	4603      	mov	r3, r0
 8002014:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	223f      	movs	r2, #63	@ 0x3f
 8002020:	409a      	lsls	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e0c8      	b.n	80021ba <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a38      	ldr	r2, [pc, #224]	@ (8002110 <HAL_DMA_Init+0x424>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d022      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a37      	ldr	r2, [pc, #220]	@ (8002114 <HAL_DMA_Init+0x428>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d01d      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	@ (8002118 <HAL_DMA_Init+0x42c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d018      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_DMA_Init+0x430>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a32      	ldr	r2, [pc, #200]	@ (8002120 <HAL_DMA_Init+0x434>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_DMA_Init+0x438>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d009      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <HAL_DMA_Init+0x43c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_DMA_Init+0x38c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <HAL_DMA_Init+0x440>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_DMA_Init+0x390>
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_DMA_Init+0x392>
 800207c:	2300      	movs	r3, #0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8092 	beq.w	80021a8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a21      	ldr	r2, [pc, #132]	@ (8002110 <HAL_DMA_Init+0x424>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d021      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a20      	ldr	r2, [pc, #128]	@ (8002114 <HAL_DMA_Init+0x428>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d01c      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_DMA_Init+0x42c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d017      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1d      	ldr	r2, [pc, #116]	@ (800211c <HAL_DMA_Init+0x430>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d012      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002120 <HAL_DMA_Init+0x434>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002124 <HAL_DMA_Init+0x438>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a18      	ldr	r2, [pc, #96]	@ (8002128 <HAL_DMA_Init+0x43c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <HAL_DMA_Init+0x3e6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_DMA_Init+0x440>)
 80020d0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <HAL_DMA_Init+0x444>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b40      	cmp	r3, #64	@ 0x40
 80020f8:	d01c      	beq.n	8002134 <HAL_DMA_Init+0x448>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b80      	cmp	r3, #128	@ 0x80
 8002100:	d102      	bne.n	8002108 <HAL_DMA_Init+0x41c>
 8002102:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002106:	e016      	b.n	8002136 <HAL_DMA_Init+0x44a>
 8002108:	2300      	movs	r3, #0
 800210a:	e014      	b.n	8002136 <HAL_DMA_Init+0x44a>
 800210c:	fe10803f 	.word	0xfe10803f
 8002110:	58025408 	.word	0x58025408
 8002114:	5802541c 	.word	0x5802541c
 8002118:	58025430 	.word	0x58025430
 800211c:	58025444 	.word	0x58025444
 8002120:	58025458 	.word	0x58025458
 8002124:	5802546c 	.word	0x5802546c
 8002128:	58025480 	.word	0x58025480
 800212c:	58025494 	.word	0x58025494
 8002130:	fffe000f 	.word	0xfffe000f
 8002134:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68d2      	ldr	r2, [r2, #12]
 800213a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800213c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800214c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800215c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002164:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <HAL_DMA_Init+0x648>)
 800217c:	4413      	add	r3, r2
 800217e:	4a6e      	ldr	r2, [pc, #440]	@ (8002338 <HAL_DMA_Init+0x64c>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	009a      	lsls	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f002 f9a9 	bl	80044e4 <DMA_CalcBaseAndBitshift>
 8002192:	4603      	mov	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2201      	movs	r2, #1
 80021a0:	409a      	lsls	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e008      	b.n	80021ba <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	@ 0x40
 80021ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0b7      	b.n	800232a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5f      	ldr	r2, [pc, #380]	@ (800233c <HAL_DMA_Init+0x650>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d072      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002340 <HAL_DMA_Init+0x654>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d06d      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002344 <HAL_DMA_Init+0x658>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d068      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002348 <HAL_DMA_Init+0x65c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d063      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a59      	ldr	r2, [pc, #356]	@ (800234c <HAL_DMA_Init+0x660>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d05e      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a57      	ldr	r2, [pc, #348]	@ (8002350 <HAL_DMA_Init+0x664>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d059      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a56      	ldr	r2, [pc, #344]	@ (8002354 <HAL_DMA_Init+0x668>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d054      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a54      	ldr	r2, [pc, #336]	@ (8002358 <HAL_DMA_Init+0x66c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d04f      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a53      	ldr	r2, [pc, #332]	@ (800235c <HAL_DMA_Init+0x670>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04a      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a51      	ldr	r2, [pc, #324]	@ (8002360 <HAL_DMA_Init+0x674>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d045      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a50      	ldr	r2, [pc, #320]	@ (8002364 <HAL_DMA_Init+0x678>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d040      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4e      	ldr	r2, [pc, #312]	@ (8002368 <HAL_DMA_Init+0x67c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d03b      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a4d      	ldr	r2, [pc, #308]	@ (800236c <HAL_DMA_Init+0x680>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d036      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a4b      	ldr	r2, [pc, #300]	@ (8002370 <HAL_DMA_Init+0x684>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d031      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a4a      	ldr	r2, [pc, #296]	@ (8002374 <HAL_DMA_Init+0x688>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d02c      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a48      	ldr	r2, [pc, #288]	@ (8002378 <HAL_DMA_Init+0x68c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d027      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a47      	ldr	r2, [pc, #284]	@ (800237c <HAL_DMA_Init+0x690>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d022      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a45      	ldr	r2, [pc, #276]	@ (8002380 <HAL_DMA_Init+0x694>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01d      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a44      	ldr	r2, [pc, #272]	@ (8002384 <HAL_DMA_Init+0x698>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d018      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <HAL_DMA_Init+0x69c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a41      	ldr	r2, [pc, #260]	@ (800238c <HAL_DMA_Init+0x6a0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d00e      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a3f      	ldr	r2, [pc, #252]	@ (8002390 <HAL_DMA_Init+0x6a4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d009      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a3e      	ldr	r2, [pc, #248]	@ (8002394 <HAL_DMA_Init+0x6a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d004      	beq.n	80022aa <HAL_DMA_Init+0x5be>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002398 <HAL_DMA_Init+0x6ac>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Init+0x5c2>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_DMA_Init+0x5c4>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d032      	beq.n	800231a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f002 fa43 	bl	8004740 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b80      	cmp	r3, #128	@ 0x80
 80022c0:	d102      	bne.n	80022c8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_DMA_Init+0x61c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d80c      	bhi.n	8002308 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f002 fac0 	bl	8004874 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	e008      	b.n	800231a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	a7fdabf8 	.word	0xa7fdabf8
 8002338:	cccccccd 	.word	0xcccccccd
 800233c:	40020010 	.word	0x40020010
 8002340:	40020028 	.word	0x40020028
 8002344:	40020040 	.word	0x40020040
 8002348:	40020058 	.word	0x40020058
 800234c:	40020070 	.word	0x40020070
 8002350:	40020088 	.word	0x40020088
 8002354:	400200a0 	.word	0x400200a0
 8002358:	400200b8 	.word	0x400200b8
 800235c:	40020410 	.word	0x40020410
 8002360:	40020428 	.word	0x40020428
 8002364:	40020440 	.word	0x40020440
 8002368:	40020458 	.word	0x40020458
 800236c:	40020470 	.word	0x40020470
 8002370:	40020488 	.word	0x40020488
 8002374:	400204a0 	.word	0x400204a0
 8002378:	400204b8 	.word	0x400204b8
 800237c:	58025408 	.word	0x58025408
 8002380:	5802541c 	.word	0x5802541c
 8002384:	58025430 	.word	0x58025430
 8002388:	58025444 	.word	0x58025444
 800238c:	58025458 	.word	0x58025458
 8002390:	5802546c 	.word	0x5802546c
 8002394:	58025480 	.word	0x58025480
 8002398:	58025494 	.word	0x58025494

0800239c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e226      	b.n	8002806 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Start_IT+0x2a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e21f      	b.n	8002806 <HAL_DMA_Start_IT+0x46a>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 820a 	bne.w	80027f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a68      	ldr	r2, [pc, #416]	@ (8002590 <HAL_DMA_Start_IT+0x1f4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04a      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a66      	ldr	r2, [pc, #408]	@ (8002594 <HAL_DMA_Start_IT+0x1f8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d045      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a65      	ldr	r2, [pc, #404]	@ (8002598 <HAL_DMA_Start_IT+0x1fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a63      	ldr	r2, [pc, #396]	@ (800259c <HAL_DMA_Start_IT+0x200>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03b      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a62      	ldr	r2, [pc, #392]	@ (80025a0 <HAL_DMA_Start_IT+0x204>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d036      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a60      	ldr	r2, [pc, #384]	@ (80025a4 <HAL_DMA_Start_IT+0x208>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5f      	ldr	r2, [pc, #380]	@ (80025a8 <HAL_DMA_Start_IT+0x20c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d02c      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5d      	ldr	r2, [pc, #372]	@ (80025ac <HAL_DMA_Start_IT+0x210>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5c      	ldr	r2, [pc, #368]	@ (80025b0 <HAL_DMA_Start_IT+0x214>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5a      	ldr	r2, [pc, #360]	@ (80025b4 <HAL_DMA_Start_IT+0x218>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a59      	ldr	r2, [pc, #356]	@ (80025b8 <HAL_DMA_Start_IT+0x21c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a57      	ldr	r2, [pc, #348]	@ (80025bc <HAL_DMA_Start_IT+0x220>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a56      	ldr	r2, [pc, #344]	@ (80025c0 <HAL_DMA_Start_IT+0x224>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a54      	ldr	r2, [pc, #336]	@ (80025c4 <HAL_DMA_Start_IT+0x228>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a53      	ldr	r2, [pc, #332]	@ (80025c8 <HAL_DMA_Start_IT+0x22c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_Start_IT+0xee>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a51      	ldr	r2, [pc, #324]	@ (80025cc <HAL_DMA_Start_IT+0x230>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d108      	bne.n	800249c <HAL_DMA_Start_IT+0x100>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_DMA_Start_IT+0x110>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f001 fe6a 	bl	800418c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a34      	ldr	r2, [pc, #208]	@ (8002590 <HAL_DMA_Start_IT+0x1f4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a33      	ldr	r2, [pc, #204]	@ (8002594 <HAL_DMA_Start_IT+0x1f8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a31      	ldr	r2, [pc, #196]	@ (8002598 <HAL_DMA_Start_IT+0x1fc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a30      	ldr	r2, [pc, #192]	@ (800259c <HAL_DMA_Start_IT+0x200>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2e      	ldr	r2, [pc, #184]	@ (80025a0 <HAL_DMA_Start_IT+0x204>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2d      	ldr	r2, [pc, #180]	@ (80025a4 <HAL_DMA_Start_IT+0x208>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2b      	ldr	r2, [pc, #172]	@ (80025a8 <HAL_DMA_Start_IT+0x20c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2a      	ldr	r2, [pc, #168]	@ (80025ac <HAL_DMA_Start_IT+0x210>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a28      	ldr	r2, [pc, #160]	@ (80025b0 <HAL_DMA_Start_IT+0x214>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a27      	ldr	r2, [pc, #156]	@ (80025b4 <HAL_DMA_Start_IT+0x218>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a25      	ldr	r2, [pc, #148]	@ (80025b8 <HAL_DMA_Start_IT+0x21c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a24      	ldr	r2, [pc, #144]	@ (80025bc <HAL_DMA_Start_IT+0x220>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_DMA_Start_IT+0x224>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <HAL_DMA_Start_IT+0x228>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <HAL_DMA_Start_IT+0x22c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_Start_IT+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <HAL_DMA_Start_IT+0x230>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d101      	bne.n	800255c <HAL_DMA_Start_IT+0x1c0>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_DMA_Start_IT+0x1c2>
 800255c:	2300      	movs	r3, #0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 021e 	bic.w	r2, r3, #30
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0216 	orr.w	r2, r2, #22
 8002574:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d03e      	beq.n	80025fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0208 	orr.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e035      	b.n	80025fc <HAL_DMA_Start_IT+0x260>
 8002590:	40020010 	.word	0x40020010
 8002594:	40020028 	.word	0x40020028
 8002598:	40020040 	.word	0x40020040
 800259c:	40020058 	.word	0x40020058
 80025a0:	40020070 	.word	0x40020070
 80025a4:	40020088 	.word	0x40020088
 80025a8:	400200a0 	.word	0x400200a0
 80025ac:	400200b8 	.word	0x400200b8
 80025b0:	40020410 	.word	0x40020410
 80025b4:	40020428 	.word	0x40020428
 80025b8:	40020440 	.word	0x40020440
 80025bc:	40020458 	.word	0x40020458
 80025c0:	40020470 	.word	0x40020470
 80025c4:	40020488 	.word	0x40020488
 80025c8:	400204a0 	.word	0x400204a0
 80025cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 020e 	bic.w	r2, r3, #14
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 020a 	orr.w	r2, r2, #10
 80025e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0204 	orr.w	r2, r2, #4
 80025fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a83      	ldr	r2, [pc, #524]	@ (8002810 <HAL_DMA_Start_IT+0x474>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d072      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a82      	ldr	r2, [pc, #520]	@ (8002814 <HAL_DMA_Start_IT+0x478>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d06d      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a80      	ldr	r2, [pc, #512]	@ (8002818 <HAL_DMA_Start_IT+0x47c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d068      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7f      	ldr	r2, [pc, #508]	@ (800281c <HAL_DMA_Start_IT+0x480>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d063      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a7d      	ldr	r2, [pc, #500]	@ (8002820 <HAL_DMA_Start_IT+0x484>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d05e      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7c      	ldr	r2, [pc, #496]	@ (8002824 <HAL_DMA_Start_IT+0x488>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d059      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a7a      	ldr	r2, [pc, #488]	@ (8002828 <HAL_DMA_Start_IT+0x48c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d054      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a79      	ldr	r2, [pc, #484]	@ (800282c <HAL_DMA_Start_IT+0x490>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04f      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a77      	ldr	r2, [pc, #476]	@ (8002830 <HAL_DMA_Start_IT+0x494>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d04a      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a76      	ldr	r2, [pc, #472]	@ (8002834 <HAL_DMA_Start_IT+0x498>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d045      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a74      	ldr	r2, [pc, #464]	@ (8002838 <HAL_DMA_Start_IT+0x49c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d040      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a73      	ldr	r2, [pc, #460]	@ (800283c <HAL_DMA_Start_IT+0x4a0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d03b      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a71      	ldr	r2, [pc, #452]	@ (8002840 <HAL_DMA_Start_IT+0x4a4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d036      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a70      	ldr	r2, [pc, #448]	@ (8002844 <HAL_DMA_Start_IT+0x4a8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d031      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6e      	ldr	r2, [pc, #440]	@ (8002848 <HAL_DMA_Start_IT+0x4ac>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02c      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6d      	ldr	r2, [pc, #436]	@ (800284c <HAL_DMA_Start_IT+0x4b0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d027      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002850 <HAL_DMA_Start_IT+0x4b4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d022      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_DMA_Start_IT+0x4b8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01d      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a68      	ldr	r2, [pc, #416]	@ (8002858 <HAL_DMA_Start_IT+0x4bc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d018      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a67      	ldr	r2, [pc, #412]	@ (800285c <HAL_DMA_Start_IT+0x4c0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_DMA_Start_IT+0x4c4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00e      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a64      	ldr	r2, [pc, #400]	@ (8002864 <HAL_DMA_Start_IT+0x4c8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a62      	ldr	r2, [pc, #392]	@ (8002868 <HAL_DMA_Start_IT+0x4cc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_Start_IT+0x350>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a61      	ldr	r2, [pc, #388]	@ (800286c <HAL_DMA_Start_IT+0x4d0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Start_IT+0x354>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_DMA_Start_IT+0x356>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01a      	beq.n	800272c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002712:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a37      	ldr	r2, [pc, #220]	@ (8002810 <HAL_DMA_Start_IT+0x474>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d04a      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	@ (8002814 <HAL_DMA_Start_IT+0x478>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d045      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a34      	ldr	r2, [pc, #208]	@ (8002818 <HAL_DMA_Start_IT+0x47c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d040      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a33      	ldr	r2, [pc, #204]	@ (800281c <HAL_DMA_Start_IT+0x480>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d03b      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a31      	ldr	r2, [pc, #196]	@ (8002820 <HAL_DMA_Start_IT+0x484>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d036      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a30      	ldr	r2, [pc, #192]	@ (8002824 <HAL_DMA_Start_IT+0x488>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d031      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2e      	ldr	r2, [pc, #184]	@ (8002828 <HAL_DMA_Start_IT+0x48c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d02c      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2d      	ldr	r2, [pc, #180]	@ (800282c <HAL_DMA_Start_IT+0x490>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d027      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <HAL_DMA_Start_IT+0x494>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d022      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2a      	ldr	r2, [pc, #168]	@ (8002834 <HAL_DMA_Start_IT+0x498>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d01d      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <HAL_DMA_Start_IT+0x49c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d018      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a27      	ldr	r2, [pc, #156]	@ (800283c <HAL_DMA_Start_IT+0x4a0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	@ (8002840 <HAL_DMA_Start_IT+0x4a4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a24      	ldr	r2, [pc, #144]	@ (8002844 <HAL_DMA_Start_IT+0x4a8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_DMA_Start_IT+0x4ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_Start_IT+0x430>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <HAL_DMA_Start_IT+0x4b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d108      	bne.n	80027de <HAL_DMA_Start_IT+0x442>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e012      	b.n	8002804 <HAL_DMA_Start_IT+0x468>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e009      	b.n	8002804 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002804:	7dfb      	ldrb	r3, [r7, #23]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40020010 	.word	0x40020010
 8002814:	40020028 	.word	0x40020028
 8002818:	40020040 	.word	0x40020040
 800281c:	40020058 	.word	0x40020058
 8002820:	40020070 	.word	0x40020070
 8002824:	40020088 	.word	0x40020088
 8002828:	400200a0 	.word	0x400200a0
 800282c:	400200b8 	.word	0x400200b8
 8002830:	40020410 	.word	0x40020410
 8002834:	40020428 	.word	0x40020428
 8002838:	40020440 	.word	0x40020440
 800283c:	40020458 	.word	0x40020458
 8002840:	40020470 	.word	0x40020470
 8002844:	40020488 	.word	0x40020488
 8002848:	400204a0 	.word	0x400204a0
 800284c:	400204b8 	.word	0x400204b8
 8002850:	58025408 	.word	0x58025408
 8002854:	5802541c 	.word	0x5802541c
 8002858:	58025430 	.word	0x58025430
 800285c:	58025444 	.word	0x58025444
 8002860:	58025458 	.word	0x58025458
 8002864:	5802546c 	.word	0x5802546c
 8002868:	58025480 	.word	0x58025480
 800286c:	58025494 	.word	0x58025494

08002870 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002878:	f7fe fe7a 	bl	8001570 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e2dc      	b.n	8002e42 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	@ 0x80
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e2cd      	b.n	8002e42 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a76      	ldr	r2, [pc, #472]	@ (8002a84 <HAL_DMA_Abort+0x214>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d04a      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a74      	ldr	r2, [pc, #464]	@ (8002a88 <HAL_DMA_Abort+0x218>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d045      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a73      	ldr	r2, [pc, #460]	@ (8002a8c <HAL_DMA_Abort+0x21c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d040      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a71      	ldr	r2, [pc, #452]	@ (8002a90 <HAL_DMA_Abort+0x220>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d03b      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a70      	ldr	r2, [pc, #448]	@ (8002a94 <HAL_DMA_Abort+0x224>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d036      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_DMA_Abort+0x228>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d031      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6d      	ldr	r2, [pc, #436]	@ (8002a9c <HAL_DMA_Abort+0x22c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d02c      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002aa0 <HAL_DMA_Abort+0x230>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa4 <HAL_DMA_Abort+0x234>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a68      	ldr	r2, [pc, #416]	@ (8002aa8 <HAL_DMA_Abort+0x238>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01d      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a67      	ldr	r2, [pc, #412]	@ (8002aac <HAL_DMA_Abort+0x23c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d018      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a65      	ldr	r2, [pc, #404]	@ (8002ab0 <HAL_DMA_Abort+0x240>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a64      	ldr	r2, [pc, #400]	@ (8002ab4 <HAL_DMA_Abort+0x244>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00e      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a62      	ldr	r2, [pc, #392]	@ (8002ab8 <HAL_DMA_Abort+0x248>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d009      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a61      	ldr	r2, [pc, #388]	@ (8002abc <HAL_DMA_Abort+0x24c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_Abort+0xd6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5f      	ldr	r2, [pc, #380]	@ (8002ac0 <HAL_DMA_Abort+0x250>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_DMA_Abort+0xda>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <HAL_DMA_Abort+0xdc>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 021e 	bic.w	r2, r2, #30
 800295e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800296e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	e00a      	b.n	800298e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 020e 	bic.w	r2, r2, #14
 8002986:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3c      	ldr	r2, [pc, #240]	@ (8002a84 <HAL_DMA_Abort+0x214>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d072      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a88 <HAL_DMA_Abort+0x218>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d06d      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a39      	ldr	r2, [pc, #228]	@ (8002a8c <HAL_DMA_Abort+0x21c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d068      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a37      	ldr	r2, [pc, #220]	@ (8002a90 <HAL_DMA_Abort+0x220>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d063      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a36      	ldr	r2, [pc, #216]	@ (8002a94 <HAL_DMA_Abort+0x224>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d05e      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a34      	ldr	r2, [pc, #208]	@ (8002a98 <HAL_DMA_Abort+0x228>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d059      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a33      	ldr	r2, [pc, #204]	@ (8002a9c <HAL_DMA_Abort+0x22c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d054      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a31      	ldr	r2, [pc, #196]	@ (8002aa0 <HAL_DMA_Abort+0x230>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d04f      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a30      	ldr	r2, [pc, #192]	@ (8002aa4 <HAL_DMA_Abort+0x234>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d04a      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa8 <HAL_DMA_Abort+0x238>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d045      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a2d      	ldr	r2, [pc, #180]	@ (8002aac <HAL_DMA_Abort+0x23c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d040      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab0 <HAL_DMA_Abort+0x240>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d03b      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab4 <HAL_DMA_Abort+0x244>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d036      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <HAL_DMA_Abort+0x248>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <HAL_DMA_Abort+0x24c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d02c      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a25      	ldr	r2, [pc, #148]	@ (8002ac0 <HAL_DMA_Abort+0x250>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d027      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a24      	ldr	r2, [pc, #144]	@ (8002ac4 <HAL_DMA_Abort+0x254>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d022      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <HAL_DMA_Abort+0x258>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <HAL_DMA_Abort+0x25c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad0 <HAL_DMA_Abort+0x260>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad4 <HAL_DMA_Abort+0x264>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_DMA_Abort+0x268>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8002adc <HAL_DMA_Abort+0x26c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort+0x20e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	@ (8002ae0 <HAL_DMA_Abort+0x270>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d132      	bne.n	8002ae4 <HAL_DMA_Abort+0x274>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e031      	b.n	8002ae6 <HAL_DMA_Abort+0x276>
 8002a82:	bf00      	nop
 8002a84:	40020010 	.word	0x40020010
 8002a88:	40020028 	.word	0x40020028
 8002a8c:	40020040 	.word	0x40020040
 8002a90:	40020058 	.word	0x40020058
 8002a94:	40020070 	.word	0x40020070
 8002a98:	40020088 	.word	0x40020088
 8002a9c:	400200a0 	.word	0x400200a0
 8002aa0:	400200b8 	.word	0x400200b8
 8002aa4:	40020410 	.word	0x40020410
 8002aa8:	40020428 	.word	0x40020428
 8002aac:	40020440 	.word	0x40020440
 8002ab0:	40020458 	.word	0x40020458
 8002ab4:	40020470 	.word	0x40020470
 8002ab8:	40020488 	.word	0x40020488
 8002abc:	400204a0 	.word	0x400204a0
 8002ac0:	400204b8 	.word	0x400204b8
 8002ac4:	58025408 	.word	0x58025408
 8002ac8:	5802541c 	.word	0x5802541c
 8002acc:	58025430 	.word	0x58025430
 8002ad0:	58025444 	.word	0x58025444
 8002ad4:	58025458 	.word	0x58025458
 8002ad8:	5802546c 	.word	0x5802546c
 8002adc:	58025480 	.word	0x58025480
 8002ae0:	58025494 	.word	0x58025494
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6d      	ldr	r2, [pc, #436]	@ (8002cb4 <HAL_DMA_Abort+0x444>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d04a      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6b      	ldr	r2, [pc, #428]	@ (8002cb8 <HAL_DMA_Abort+0x448>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d045      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6a      	ldr	r2, [pc, #424]	@ (8002cbc <HAL_DMA_Abort+0x44c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d040      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a68      	ldr	r2, [pc, #416]	@ (8002cc0 <HAL_DMA_Abort+0x450>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d03b      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a67      	ldr	r2, [pc, #412]	@ (8002cc4 <HAL_DMA_Abort+0x454>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d036      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a65      	ldr	r2, [pc, #404]	@ (8002cc8 <HAL_DMA_Abort+0x458>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d031      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a64      	ldr	r2, [pc, #400]	@ (8002ccc <HAL_DMA_Abort+0x45c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d02c      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a62      	ldr	r2, [pc, #392]	@ (8002cd0 <HAL_DMA_Abort+0x460>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d027      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a61      	ldr	r2, [pc, #388]	@ (8002cd4 <HAL_DMA_Abort+0x464>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd8 <HAL_DMA_Abort+0x468>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01d      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a5e      	ldr	r2, [pc, #376]	@ (8002cdc <HAL_DMA_Abort+0x46c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d018      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ce0 <HAL_DMA_Abort+0x470>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce4 <HAL_DMA_Abort+0x474>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00e      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a59      	ldr	r2, [pc, #356]	@ (8002ce8 <HAL_DMA_Abort+0x478>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a58      	ldr	r2, [pc, #352]	@ (8002cec <HAL_DMA_Abort+0x47c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d004      	beq.n	8002b9a <HAL_DMA_Abort+0x32a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a56      	ldr	r2, [pc, #344]	@ (8002cf0 <HAL_DMA_Abort+0x480>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <HAL_DMA_Abort+0x33c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e007      	b.n	8002bbc <HAL_DMA_Abort+0x34c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bbc:	e013      	b.n	8002be6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bbe:	f7fe fcd7 	bl	8001570 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d90c      	bls.n	8002be6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e12d      	b.n	8002e42 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e5      	bne.n	8002bbe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb4 <HAL_DMA_Abort+0x444>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb8 <HAL_DMA_Abort+0x448>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002cbc <HAL_DMA_Abort+0x44c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <HAL_DMA_Abort+0x450>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a29      	ldr	r2, [pc, #164]	@ (8002cc4 <HAL_DMA_Abort+0x454>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <HAL_DMA_Abort+0x458>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a26      	ldr	r2, [pc, #152]	@ (8002ccc <HAL_DMA_Abort+0x45c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a24      	ldr	r2, [pc, #144]	@ (8002cd0 <HAL_DMA_Abort+0x460>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a23      	ldr	r2, [pc, #140]	@ (8002cd4 <HAL_DMA_Abort+0x464>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a21      	ldr	r2, [pc, #132]	@ (8002cd8 <HAL_DMA_Abort+0x468>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a20      	ldr	r2, [pc, #128]	@ (8002cdc <HAL_DMA_Abort+0x46c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <HAL_DMA_Abort+0x470>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <HAL_DMA_Abort+0x474>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce8 <HAL_DMA_Abort+0x478>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1a      	ldr	r2, [pc, #104]	@ (8002cec <HAL_DMA_Abort+0x47c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort+0x422>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	@ (8002cf0 <HAL_DMA_Abort+0x480>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Abort+0x426>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_Abort+0x428>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02b      	beq.n	8002cf4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	223f      	movs	r2, #63	@ 0x3f
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	e02a      	b.n	8002d0a <HAL_DMA_Abort+0x49a>
 8002cb4:	40020010 	.word	0x40020010
 8002cb8:	40020028 	.word	0x40020028
 8002cbc:	40020040 	.word	0x40020040
 8002cc0:	40020058 	.word	0x40020058
 8002cc4:	40020070 	.word	0x40020070
 8002cc8:	40020088 	.word	0x40020088
 8002ccc:	400200a0 	.word	0x400200a0
 8002cd0:	400200b8 	.word	0x400200b8
 8002cd4:	40020410 	.word	0x40020410
 8002cd8:	40020428 	.word	0x40020428
 8002cdc:	40020440 	.word	0x40020440
 8002ce0:	40020458 	.word	0x40020458
 8002ce4:	40020470 	.word	0x40020470
 8002ce8:	40020488 	.word	0x40020488
 8002cec:	400204a0 	.word	0x400204a0
 8002cf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e4c <HAL_DMA_Abort+0x5dc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d072      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4d      	ldr	r2, [pc, #308]	@ (8002e50 <HAL_DMA_Abort+0x5e0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d06d      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4c      	ldr	r2, [pc, #304]	@ (8002e54 <HAL_DMA_Abort+0x5e4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d068      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e58 <HAL_DMA_Abort+0x5e8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d063      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a49      	ldr	r2, [pc, #292]	@ (8002e5c <HAL_DMA_Abort+0x5ec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a47      	ldr	r2, [pc, #284]	@ (8002e60 <HAL_DMA_Abort+0x5f0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d059      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_DMA_Abort+0x5f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d054      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a44      	ldr	r2, [pc, #272]	@ (8002e68 <HAL_DMA_Abort+0x5f8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d04f      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a43      	ldr	r2, [pc, #268]	@ (8002e6c <HAL_DMA_Abort+0x5fc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d04a      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a41      	ldr	r2, [pc, #260]	@ (8002e70 <HAL_DMA_Abort+0x600>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d045      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a40      	ldr	r2, [pc, #256]	@ (8002e74 <HAL_DMA_Abort+0x604>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d040      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e78 <HAL_DMA_Abort+0x608>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d03b      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3d      	ldr	r2, [pc, #244]	@ (8002e7c <HAL_DMA_Abort+0x60c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d036      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3b      	ldr	r2, [pc, #236]	@ (8002e80 <HAL_DMA_Abort+0x610>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_DMA_Abort+0x614>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d02c      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a38      	ldr	r2, [pc, #224]	@ (8002e88 <HAL_DMA_Abort+0x618>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a37      	ldr	r2, [pc, #220]	@ (8002e8c <HAL_DMA_Abort+0x61c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d022      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a35      	ldr	r2, [pc, #212]	@ (8002e90 <HAL_DMA_Abort+0x620>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a34      	ldr	r2, [pc, #208]	@ (8002e94 <HAL_DMA_Abort+0x624>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <HAL_DMA_Abort+0x628>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <HAL_DMA_Abort+0x62c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d00e      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea0 <HAL_DMA_Abort+0x630>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea4 <HAL_DMA_Abort+0x634>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort+0x58a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea8 <HAL_DMA_Abort+0x638>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Abort+0x58e>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_DMA_Abort+0x590>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e0c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e24:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e2e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	58025408 	.word	0x58025408
 8002e90:	5802541c 	.word	0x5802541c
 8002e94:	58025430 	.word	0x58025430
 8002e98:	58025444 	.word	0x58025444
 8002e9c:	58025458 	.word	0x58025458
 8002ea0:	5802546c 	.word	0x5802546c
 8002ea4:	58025480 	.word	0x58025480
 8002ea8:	58025494 	.word	0x58025494

08002eac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e237      	b.n	800332e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e22c      	b.n	800332e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800304c <HAL_DMA_Abort_IT+0x1a0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d04a      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	@ (8003050 <HAL_DMA_Abort_IT+0x1a4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d045      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a59      	ldr	r2, [pc, #356]	@ (8003054 <HAL_DMA_Abort_IT+0x1a8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d040      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <HAL_DMA_Abort_IT+0x1ac>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d03b      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a56      	ldr	r2, [pc, #344]	@ (800305c <HAL_DMA_Abort_IT+0x1b0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d036      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a55      	ldr	r2, [pc, #340]	@ (8003060 <HAL_DMA_Abort_IT+0x1b4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a53      	ldr	r2, [pc, #332]	@ (8003064 <HAL_DMA_Abort_IT+0x1b8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02c      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_DMA_Abort_IT+0x1bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d027      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a50      	ldr	r2, [pc, #320]	@ (800306c <HAL_DMA_Abort_IT+0x1c0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d022      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a4f      	ldr	r2, [pc, #316]	@ (8003070 <HAL_DMA_Abort_IT+0x1c4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8003074 <HAL_DMA_Abort_IT+0x1c8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d018      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a4c      	ldr	r2, [pc, #304]	@ (8003078 <HAL_DMA_Abort_IT+0x1cc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a4a      	ldr	r2, [pc, #296]	@ (800307c <HAL_DMA_Abort_IT+0x1d0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00e      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a49      	ldr	r2, [pc, #292]	@ (8003080 <HAL_DMA_Abort_IT+0x1d4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d009      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a47      	ldr	r2, [pc, #284]	@ (8003084 <HAL_DMA_Abort_IT+0x1d8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_DMA_Abort_IT+0xc8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a46      	ldr	r2, [pc, #280]	@ (8003088 <HAL_DMA_Abort_IT+0x1dc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d101      	bne.n	8002f78 <HAL_DMA_Abort_IT+0xcc>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_DMA_Abort_IT+0xce>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8086 	beq.w	800308c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2204      	movs	r2, #4
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800304c <HAL_DMA_Abort_IT+0x1a0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04a      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2e      	ldr	r2, [pc, #184]	@ (8003050 <HAL_DMA_Abort_IT+0x1a4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d045      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003054 <HAL_DMA_Abort_IT+0x1a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d040      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2b      	ldr	r2, [pc, #172]	@ (8003058 <HAL_DMA_Abort_IT+0x1ac>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d03b      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a29      	ldr	r2, [pc, #164]	@ (800305c <HAL_DMA_Abort_IT+0x1b0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d036      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <HAL_DMA_Abort_IT+0x1b4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d031      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a26      	ldr	r2, [pc, #152]	@ (8003064 <HAL_DMA_Abort_IT+0x1b8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02c      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a25      	ldr	r2, [pc, #148]	@ (8003068 <HAL_DMA_Abort_IT+0x1bc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d027      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a23      	ldr	r2, [pc, #140]	@ (800306c <HAL_DMA_Abort_IT+0x1c0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d022      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a22      	ldr	r2, [pc, #136]	@ (8003070 <HAL_DMA_Abort_IT+0x1c4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d01d      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a20      	ldr	r2, [pc, #128]	@ (8003074 <HAL_DMA_Abort_IT+0x1c8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d018      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8003078 <HAL_DMA_Abort_IT+0x1cc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d013      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <HAL_DMA_Abort_IT+0x1d0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00e      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1c      	ldr	r2, [pc, #112]	@ (8003080 <HAL_DMA_Abort_IT+0x1d4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d009      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	@ (8003084 <HAL_DMA_Abort_IT+0x1d8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x17c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <HAL_DMA_Abort_IT+0x1dc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d108      	bne.n	800303a <HAL_DMA_Abort_IT+0x18e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e178      	b.n	800332c <HAL_DMA_Abort_IT+0x480>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e16f      	b.n	800332c <HAL_DMA_Abort_IT+0x480>
 800304c:	40020010 	.word	0x40020010
 8003050:	40020028 	.word	0x40020028
 8003054:	40020040 	.word	0x40020040
 8003058:	40020058 	.word	0x40020058
 800305c:	40020070 	.word	0x40020070
 8003060:	40020088 	.word	0x40020088
 8003064:	400200a0 	.word	0x400200a0
 8003068:	400200b8 	.word	0x400200b8
 800306c:	40020410 	.word	0x40020410
 8003070:	40020428 	.word	0x40020428
 8003074:	40020440 	.word	0x40020440
 8003078:	40020458 	.word	0x40020458
 800307c:	40020470 	.word	0x40020470
 8003080:	40020488 	.word	0x40020488
 8003084:	400204a0 	.word	0x400204a0
 8003088:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 020e 	bic.w	r2, r2, #14
 800309a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003254 <HAL_DMA_Abort_IT+0x3a8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d04a      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003258 <HAL_DMA_Abort_IT+0x3ac>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d045      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a69      	ldr	r2, [pc, #420]	@ (800325c <HAL_DMA_Abort_IT+0x3b0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d040      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a68      	ldr	r2, [pc, #416]	@ (8003260 <HAL_DMA_Abort_IT+0x3b4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d03b      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a66      	ldr	r2, [pc, #408]	@ (8003264 <HAL_DMA_Abort_IT+0x3b8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d036      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a65      	ldr	r2, [pc, #404]	@ (8003268 <HAL_DMA_Abort_IT+0x3bc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d031      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a63      	ldr	r2, [pc, #396]	@ (800326c <HAL_DMA_Abort_IT+0x3c0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d02c      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a62      	ldr	r2, [pc, #392]	@ (8003270 <HAL_DMA_Abort_IT+0x3c4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d027      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a60      	ldr	r2, [pc, #384]	@ (8003274 <HAL_DMA_Abort_IT+0x3c8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d022      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003278 <HAL_DMA_Abort_IT+0x3cc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d01d      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a5d      	ldr	r2, [pc, #372]	@ (800327c <HAL_DMA_Abort_IT+0x3d0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d018      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a5c      	ldr	r2, [pc, #368]	@ (8003280 <HAL_DMA_Abort_IT+0x3d4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d013      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_DMA_Abort_IT+0x3d8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00e      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a59      	ldr	r2, [pc, #356]	@ (8003288 <HAL_DMA_Abort_IT+0x3dc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d009      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a57      	ldr	r2, [pc, #348]	@ (800328c <HAL_DMA_Abort_IT+0x3e0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_DMA_Abort_IT+0x290>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a56      	ldr	r2, [pc, #344]	@ (8003290 <HAL_DMA_Abort_IT+0x3e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d108      	bne.n	800314e <HAL_DMA_Abort_IT+0x2a2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e007      	b.n	800315e <HAL_DMA_Abort_IT+0x2b2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a3c      	ldr	r2, [pc, #240]	@ (8003254 <HAL_DMA_Abort_IT+0x3a8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d072      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a3a      	ldr	r2, [pc, #232]	@ (8003258 <HAL_DMA_Abort_IT+0x3ac>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d06d      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a39      	ldr	r2, [pc, #228]	@ (800325c <HAL_DMA_Abort_IT+0x3b0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d068      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a37      	ldr	r2, [pc, #220]	@ (8003260 <HAL_DMA_Abort_IT+0x3b4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d063      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a36      	ldr	r2, [pc, #216]	@ (8003264 <HAL_DMA_Abort_IT+0x3b8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d05e      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a34      	ldr	r2, [pc, #208]	@ (8003268 <HAL_DMA_Abort_IT+0x3bc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d059      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a33      	ldr	r2, [pc, #204]	@ (800326c <HAL_DMA_Abort_IT+0x3c0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d054      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <HAL_DMA_Abort_IT+0x3c4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04f      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <HAL_DMA_Abort_IT+0x3c8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003278 <HAL_DMA_Abort_IT+0x3cc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2d      	ldr	r2, [pc, #180]	@ (800327c <HAL_DMA_Abort_IT+0x3d0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003280 <HAL_DMA_Abort_IT+0x3d4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2a      	ldr	r2, [pc, #168]	@ (8003284 <HAL_DMA_Abort_IT+0x3d8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a28      	ldr	r2, [pc, #160]	@ (8003288 <HAL_DMA_Abort_IT+0x3dc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a27      	ldr	r2, [pc, #156]	@ (800328c <HAL_DMA_Abort_IT+0x3e0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	@ (8003290 <HAL_DMA_Abort_IT+0x3e4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a24      	ldr	r2, [pc, #144]	@ (8003294 <HAL_DMA_Abort_IT+0x3e8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a22      	ldr	r2, [pc, #136]	@ (8003298 <HAL_DMA_Abort_IT+0x3ec>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a21      	ldr	r2, [pc, #132]	@ (800329c <HAL_DMA_Abort_IT+0x3f0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1f      	ldr	r2, [pc, #124]	@ (80032a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1e      	ldr	r2, [pc, #120]	@ (80032a4 <HAL_DMA_Abort_IT+0x3f8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1b      	ldr	r2, [pc, #108]	@ (80032ac <HAL_DMA_Abort_IT+0x400>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Abort_IT+0x3a2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <HAL_DMA_Abort_IT+0x404>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d132      	bne.n	80032b4 <HAL_DMA_Abort_IT+0x408>
 800324e:	2301      	movs	r3, #1
 8003250:	e031      	b.n	80032b6 <HAL_DMA_Abort_IT+0x40a>
 8003252:	bf00      	nop
 8003254:	40020010 	.word	0x40020010
 8003258:	40020028 	.word	0x40020028
 800325c:	40020040 	.word	0x40020040
 8003260:	40020058 	.word	0x40020058
 8003264:	40020070 	.word	0x40020070
 8003268:	40020088 	.word	0x40020088
 800326c:	400200a0 	.word	0x400200a0
 8003270:	400200b8 	.word	0x400200b8
 8003274:	40020410 	.word	0x40020410
 8003278:	40020428 	.word	0x40020428
 800327c:	40020440 	.word	0x40020440
 8003280:	40020458 	.word	0x40020458
 8003284:	40020470 	.word	0x40020470
 8003288:	40020488 	.word	0x40020488
 800328c:	400204a0 	.word	0x400204a0
 8003290:	400204b8 	.word	0x400204b8
 8003294:	58025408 	.word	0x58025408
 8003298:	5802541c 	.word	0x5802541c
 800329c:	58025430 	.word	0x58025430
 80032a0:	58025444 	.word	0x58025444
 80032a4:	58025458 	.word	0x58025458
 80032a8:	5802546c 	.word	0x5802546c
 80032ac:	58025480 	.word	0x58025480
 80032b0:	58025494 	.word	0x58025494
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d028      	beq.n	800330c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003300:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800330a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop

08003338 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	@ 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003344:	4b67      	ldr	r3, [pc, #412]	@ (80034e4 <HAL_DMA_IRQHandler+0x1ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	@ (80034e8 <HAL_DMA_IRQHandler+0x1b0>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5f      	ldr	r2, [pc, #380]	@ (80034ec <HAL_DMA_IRQHandler+0x1b4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04a      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5d      	ldr	r2, [pc, #372]	@ (80034f0 <HAL_DMA_IRQHandler+0x1b8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d045      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5c      	ldr	r2, [pc, #368]	@ (80034f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d040      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5a      	ldr	r2, [pc, #360]	@ (80034f8 <HAL_DMA_IRQHandler+0x1c0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d03b      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a59      	ldr	r2, [pc, #356]	@ (80034fc <HAL_DMA_IRQHandler+0x1c4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d036      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a57      	ldr	r2, [pc, #348]	@ (8003500 <HAL_DMA_IRQHandler+0x1c8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a56      	ldr	r2, [pc, #344]	@ (8003504 <HAL_DMA_IRQHandler+0x1cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d02c      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a54      	ldr	r2, [pc, #336]	@ (8003508 <HAL_DMA_IRQHandler+0x1d0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d027      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a53      	ldr	r2, [pc, #332]	@ (800350c <HAL_DMA_IRQHandler+0x1d4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a51      	ldr	r2, [pc, #324]	@ (8003510 <HAL_DMA_IRQHandler+0x1d8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a50      	ldr	r2, [pc, #320]	@ (8003514 <HAL_DMA_IRQHandler+0x1dc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003518 <HAL_DMA_IRQHandler+0x1e0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4d      	ldr	r2, [pc, #308]	@ (800351c <HAL_DMA_IRQHandler+0x1e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003520 <HAL_DMA_IRQHandler+0x1e8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003524 <HAL_DMA_IRQHandler+0x1ec>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_DMA_IRQHandler+0xd2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a48      	ldr	r2, [pc, #288]	@ (8003528 <HAL_DMA_IRQHandler+0x1f0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_DMA_IRQHandler+0xd6>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_DMA_IRQHandler+0xd8>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 842b 	beq.w	8003c6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2208      	movs	r2, #8
 8003420:	409a      	lsls	r2, r3
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a2 	beq.w	8003570 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <HAL_DMA_IRQHandler+0x1b4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d04a      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a2d      	ldr	r2, [pc, #180]	@ (80034f0 <HAL_DMA_IRQHandler+0x1b8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d045      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2b      	ldr	r2, [pc, #172]	@ (80034f4 <HAL_DMA_IRQHandler+0x1bc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d040      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2a      	ldr	r2, [pc, #168]	@ (80034f8 <HAL_DMA_IRQHandler+0x1c0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d03b      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <HAL_DMA_IRQHandler+0x1c4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d036      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a27      	ldr	r2, [pc, #156]	@ (8003500 <HAL_DMA_IRQHandler+0x1c8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d031      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a25      	ldr	r2, [pc, #148]	@ (8003504 <HAL_DMA_IRQHandler+0x1cc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02c      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a24      	ldr	r2, [pc, #144]	@ (8003508 <HAL_DMA_IRQHandler+0x1d0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d027      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_DMA_IRQHandler+0x1d4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d022      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <HAL_DMA_IRQHandler+0x1d8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01d      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1f      	ldr	r2, [pc, #124]	@ (8003514 <HAL_DMA_IRQHandler+0x1dc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d018      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	@ (8003518 <HAL_DMA_IRQHandler+0x1e0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_DMA_IRQHandler+0x1e4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_DMA_IRQHandler+0x1e8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a19      	ldr	r2, [pc, #100]	@ (8003524 <HAL_DMA_IRQHandler+0x1ec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_IRQHandler+0x194>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <HAL_DMA_IRQHandler+0x1f0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d12f      	bne.n	800352c <HAL_DMA_IRQHandler+0x1f4>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bf14      	ite	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	2300      	moveq	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	e02e      	b.n	8003540 <HAL_DMA_IRQHandler+0x208>
 80034e2:	bf00      	nop
 80034e4:	24000004 	.word	0x24000004
 80034e8:	1b4e81b5 	.word	0x1b4e81b5
 80034ec:	40020010 	.word	0x40020010
 80034f0:	40020028 	.word	0x40020028
 80034f4:	40020040 	.word	0x40020040
 80034f8:	40020058 	.word	0x40020058
 80034fc:	40020070 	.word	0x40020070
 8003500:	40020088 	.word	0x40020088
 8003504:	400200a0 	.word	0x400200a0
 8003508:	400200b8 	.word	0x400200b8
 800350c:	40020410 	.word	0x40020410
 8003510:	40020428 	.word	0x40020428
 8003514:	40020440 	.word	0x40020440
 8003518:	40020458 	.word	0x40020458
 800351c:	40020470 	.word	0x40020470
 8003520:	40020488 	.word	0x40020488
 8003524:	400204a0 	.word	0x400204a0
 8003528:	400204b8 	.word	0x400204b8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0204 	bic.w	r2, r2, #4
 8003552:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2208      	movs	r2, #8
 800355e:	409a      	lsls	r2, r3
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	fa22 f303 	lsr.w	r3, r2, r3
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d06e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a69      	ldr	r2, [pc, #420]	@ (8003730 <HAL_DMA_IRQHandler+0x3f8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a67      	ldr	r2, [pc, #412]	@ (8003734 <HAL_DMA_IRQHandler+0x3fc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a66      	ldr	r2, [pc, #408]	@ (8003738 <HAL_DMA_IRQHandler+0x400>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a64      	ldr	r2, [pc, #400]	@ (800373c <HAL_DMA_IRQHandler+0x404>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a63      	ldr	r2, [pc, #396]	@ (8003740 <HAL_DMA_IRQHandler+0x408>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a61      	ldr	r2, [pc, #388]	@ (8003744 <HAL_DMA_IRQHandler+0x40c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a60      	ldr	r2, [pc, #384]	@ (8003748 <HAL_DMA_IRQHandler+0x410>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5e      	ldr	r2, [pc, #376]	@ (800374c <HAL_DMA_IRQHandler+0x414>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5d      	ldr	r2, [pc, #372]	@ (8003750 <HAL_DMA_IRQHandler+0x418>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5b      	ldr	r2, [pc, #364]	@ (8003754 <HAL_DMA_IRQHandler+0x41c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003758 <HAL_DMA_IRQHandler+0x420>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a58      	ldr	r2, [pc, #352]	@ (800375c <HAL_DMA_IRQHandler+0x424>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a57      	ldr	r2, [pc, #348]	@ (8003760 <HAL_DMA_IRQHandler+0x428>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a55      	ldr	r2, [pc, #340]	@ (8003764 <HAL_DMA_IRQHandler+0x42c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a54      	ldr	r2, [pc, #336]	@ (8003768 <HAL_DMA_IRQHandler+0x430>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_IRQHandler+0x2ee>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a52      	ldr	r2, [pc, #328]	@ (800376c <HAL_DMA_IRQHandler+0x434>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10a      	bne.n	800363c <HAL_DMA_IRQHandler+0x304>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e003      	b.n	8003644 <HAL_DMA_IRQHandler+0x30c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365c:	f043 0202 	orr.w	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2204      	movs	r2, #4
 800366e:	409a      	lsls	r2, r3
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 808f 	beq.w	8003798 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <HAL_DMA_IRQHandler+0x3f8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d04a      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2a      	ldr	r2, [pc, #168]	@ (8003734 <HAL_DMA_IRQHandler+0x3fc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d045      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a29      	ldr	r2, [pc, #164]	@ (8003738 <HAL_DMA_IRQHandler+0x400>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d040      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a27      	ldr	r2, [pc, #156]	@ (800373c <HAL_DMA_IRQHandler+0x404>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d03b      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a26      	ldr	r2, [pc, #152]	@ (8003740 <HAL_DMA_IRQHandler+0x408>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d036      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a24      	ldr	r2, [pc, #144]	@ (8003744 <HAL_DMA_IRQHandler+0x40c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d031      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <HAL_DMA_IRQHandler+0x410>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d02c      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a21      	ldr	r2, [pc, #132]	@ (800374c <HAL_DMA_IRQHandler+0x414>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d027      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <HAL_DMA_IRQHandler+0x418>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <HAL_DMA_IRQHandler+0x41c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01d      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <HAL_DMA_IRQHandler+0x420>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d018      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1b      	ldr	r2, [pc, #108]	@ (800375c <HAL_DMA_IRQHandler+0x424>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003760 <HAL_DMA_IRQHandler+0x428>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00e      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	@ (8003764 <HAL_DMA_IRQHandler+0x42c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a17      	ldr	r2, [pc, #92]	@ (8003768 <HAL_DMA_IRQHandler+0x430>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_DMA_IRQHandler+0x3e2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a15      	ldr	r2, [pc, #84]	@ (800376c <HAL_DMA_IRQHandler+0x434>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12a      	bne.n	8003770 <HAL_DMA_IRQHandler+0x438>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e023      	b.n	8003778 <HAL_DMA_IRQHandler+0x440>
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00d      	beq.n	8003798 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2204      	movs	r2, #4
 8003786:	409a      	lsls	r2, r3
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2210      	movs	r2, #16
 80037a2:	409a      	lsls	r2, r3
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a6 	beq.w	80038fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a85      	ldr	r2, [pc, #532]	@ (80039c8 <HAL_DMA_IRQHandler+0x690>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d04a      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a83      	ldr	r2, [pc, #524]	@ (80039cc <HAL_DMA_IRQHandler+0x694>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d045      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a82      	ldr	r2, [pc, #520]	@ (80039d0 <HAL_DMA_IRQHandler+0x698>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d040      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a80      	ldr	r2, [pc, #512]	@ (80039d4 <HAL_DMA_IRQHandler+0x69c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d03b      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7f      	ldr	r2, [pc, #508]	@ (80039d8 <HAL_DMA_IRQHandler+0x6a0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d036      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7d      	ldr	r2, [pc, #500]	@ (80039dc <HAL_DMA_IRQHandler+0x6a4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d031      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7c      	ldr	r2, [pc, #496]	@ (80039e0 <HAL_DMA_IRQHandler+0x6a8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d02c      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a7a      	ldr	r2, [pc, #488]	@ (80039e4 <HAL_DMA_IRQHandler+0x6ac>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d027      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a79      	ldr	r2, [pc, #484]	@ (80039e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d022      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a77      	ldr	r2, [pc, #476]	@ (80039ec <HAL_DMA_IRQHandler+0x6b4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d01d      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a76      	ldr	r2, [pc, #472]	@ (80039f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d018      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a74      	ldr	r2, [pc, #464]	@ (80039f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a73      	ldr	r2, [pc, #460]	@ (80039f8 <HAL_DMA_IRQHandler+0x6c0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d00e      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a71      	ldr	r2, [pc, #452]	@ (80039fc <HAL_DMA_IRQHandler+0x6c4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d009      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a70      	ldr	r2, [pc, #448]	@ (8003a00 <HAL_DMA_IRQHandler+0x6c8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0x516>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a6e      	ldr	r2, [pc, #440]	@ (8003a04 <HAL_DMA_IRQHandler+0x6cc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10a      	bne.n	8003864 <HAL_DMA_IRQHandler+0x52c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e009      	b.n	8003878 <HAL_DMA_IRQHandler+0x540>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf14      	ite	ne
 8003872:	2301      	movne	r3, #1
 8003874:	2300      	moveq	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d03e      	beq.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2210      	movs	r2, #16
 8003886:	409a      	lsls	r2, r3
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d024      	beq.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
 80038b8:	e01f      	b.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d01b      	beq.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
 80038ca:	e016      	b.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0208 	bic.w	r2, r2, #8
 80038e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2220      	movs	r2, #32
 8003904:	409a      	lsls	r2, r3
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8110 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2c      	ldr	r2, [pc, #176]	@ (80039c8 <HAL_DMA_IRQHandler+0x690>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04a      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2b      	ldr	r2, [pc, #172]	@ (80039cc <HAL_DMA_IRQHandler+0x694>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d045      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a29      	ldr	r2, [pc, #164]	@ (80039d0 <HAL_DMA_IRQHandler+0x698>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d040      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a28      	ldr	r2, [pc, #160]	@ (80039d4 <HAL_DMA_IRQHandler+0x69c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d03b      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	@ (80039d8 <HAL_DMA_IRQHandler+0x6a0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d036      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a25      	ldr	r2, [pc, #148]	@ (80039dc <HAL_DMA_IRQHandler+0x6a4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d031      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a23      	ldr	r2, [pc, #140]	@ (80039e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a22      	ldr	r2, [pc, #136]	@ (80039e4 <HAL_DMA_IRQHandler+0x6ac>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d027      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a20      	ldr	r2, [pc, #128]	@ (80039e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ec <HAL_DMA_IRQHandler+0x6b4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1d      	ldr	r2, [pc, #116]	@ (80039f0 <HAL_DMA_IRQHandler+0x6b8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <HAL_DMA_IRQHandler+0x6c0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_DMA_IRQHandler+0x6c4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <HAL_DMA_IRQHandler+0x6c8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x678>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a16      	ldr	r2, [pc, #88]	@ (8003a04 <HAL_DMA_IRQHandler+0x6cc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d12b      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x6d0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e02a      	b.n	8003a1c <HAL_DMA_IRQHandler+0x6e4>
 80039c6:	bf00      	nop
 80039c8:	40020010 	.word	0x40020010
 80039cc:	40020028 	.word	0x40020028
 80039d0:	40020040 	.word	0x40020040
 80039d4:	40020058 	.word	0x40020058
 80039d8:	40020070 	.word	0x40020070
 80039dc:	40020088 	.word	0x40020088
 80039e0:	400200a0 	.word	0x400200a0
 80039e4:	400200b8 	.word	0x400200b8
 80039e8:	40020410 	.word	0x40020410
 80039ec:	40020428 	.word	0x40020428
 80039f0:	40020440 	.word	0x40020440
 80039f4:	40020458 	.word	0x40020458
 80039f8:	40020470 	.word	0x40020470
 80039fc:	40020488 	.word	0x40020488
 8003a00:	400204a0 	.word	0x400204a0
 8003a04:	400204b8 	.word	0x400204b8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8087 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d139      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0216 	bic.w	r2, r2, #22
 8003a4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x736>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0208 	bic.w	r2, r2, #8
 8003a7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	223f      	movs	r2, #63	@ 0x3f
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 834a 	beq.w	800413c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
          }
          return;
 8003ab0:	e344      	b.n	800413c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	e027      	b.n	8003b30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d023      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e01e      	b.n	8003b30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0210 	bic.w	r2, r2, #16
 8003b0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8306 	beq.w	8004146 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8088 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7a      	ldr	r2, [pc, #488]	@ (8003d40 <HAL_DMA_IRQHandler+0xa08>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a79      	ldr	r2, [pc, #484]	@ (8003d44 <HAL_DMA_IRQHandler+0xa0c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a77      	ldr	r2, [pc, #476]	@ (8003d48 <HAL_DMA_IRQHandler+0xa10>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	@ (8003d4c <HAL_DMA_IRQHandler+0xa14>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	@ (8003d50 <HAL_DMA_IRQHandler+0xa18>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	@ (8003d54 <HAL_DMA_IRQHandler+0xa1c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a71      	ldr	r2, [pc, #452]	@ (8003d58 <HAL_DMA_IRQHandler+0xa20>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	@ (8003d5c <HAL_DMA_IRQHandler+0xa24>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d60 <HAL_DMA_IRQHandler+0xa28>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6d      	ldr	r2, [pc, #436]	@ (8003d64 <HAL_DMA_IRQHandler+0xa2c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d68 <HAL_DMA_IRQHandler+0xa30>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d6c <HAL_DMA_IRQHandler+0xa34>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	@ (8003d70 <HAL_DMA_IRQHandler+0xa38>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a67      	ldr	r2, [pc, #412]	@ (8003d74 <HAL_DMA_IRQHandler+0xa3c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_DMA_IRQHandler+0xa40>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x8b8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a64      	ldr	r2, [pc, #400]	@ (8003d7c <HAL_DMA_IRQHandler+0xa44>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d108      	bne.n	8003c02 <HAL_DMA_IRQHandler+0x8ca>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e007      	b.n	8003c12 <HAL_DMA_IRQHandler+0x8da>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d307      	bcc.n	8003c2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f2      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x8da>
 8003c2c:	e000      	b.n	8003c30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2203      	movs	r2, #3
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c46:	e003      	b.n	8003c50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8272 	beq.w	8004146 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
 8003c6a:	e26c      	b.n	8004146 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a43      	ldr	r2, [pc, #268]	@ (8003d80 <HAL_DMA_IRQHandler+0xa48>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d022      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a42      	ldr	r2, [pc, #264]	@ (8003d84 <HAL_DMA_IRQHandler+0xa4c>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a40      	ldr	r2, [pc, #256]	@ (8003d88 <HAL_DMA_IRQHandler+0xa50>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d018      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d8c <HAL_DMA_IRQHandler+0xa54>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a3d      	ldr	r2, [pc, #244]	@ (8003d90 <HAL_DMA_IRQHandler+0xa58>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a3c      	ldr	r2, [pc, #240]	@ (8003d94 <HAL_DMA_IRQHandler+0xa5c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3a      	ldr	r2, [pc, #232]	@ (8003d98 <HAL_DMA_IRQHandler+0xa60>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x984>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a39      	ldr	r2, [pc, #228]	@ (8003d9c <HAL_DMA_IRQHandler+0xa64>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0x988>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x98a>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 823f 	beq.w	8004146 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	2204      	movs	r2, #4
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80cd 	beq.w	8003e80 <HAL_DMA_IRQHandler+0xb48>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80c7 	beq.w	8003e80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d049      	beq.n	8003da0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 8210 	beq.w	8004140 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d28:	e20a      	b.n	8004140 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8206 	beq.w	8004140 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3c:	e200      	b.n	8004140 <HAL_DMA_IRQHandler+0xe08>
 8003d3e:	bf00      	nop
 8003d40:	40020010 	.word	0x40020010
 8003d44:	40020028 	.word	0x40020028
 8003d48:	40020040 	.word	0x40020040
 8003d4c:	40020058 	.word	0x40020058
 8003d50:	40020070 	.word	0x40020070
 8003d54:	40020088 	.word	0x40020088
 8003d58:	400200a0 	.word	0x400200a0
 8003d5c:	400200b8 	.word	0x400200b8
 8003d60:	40020410 	.word	0x40020410
 8003d64:	40020428 	.word	0x40020428
 8003d68:	40020440 	.word	0x40020440
 8003d6c:	40020458 	.word	0x40020458
 8003d70:	40020470 	.word	0x40020470
 8003d74:	40020488 	.word	0x40020488
 8003d78:	400204a0 	.word	0x400204a0
 8003d7c:	400204b8 	.word	0x400204b8
 8003d80:	58025408 	.word	0x58025408
 8003d84:	5802541c 	.word	0x5802541c
 8003d88:	58025430 	.word	0x58025430
 8003d8c:	58025444 	.word	0x58025444
 8003d90:	58025458 	.word	0x58025458
 8003d94:	5802546c 	.word	0x5802546c
 8003d98:	58025480 	.word	0x58025480
 8003d9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d160      	bne.n	8003e6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7f      	ldr	r2, [pc, #508]	@ (8003fac <HAL_DMA_IRQHandler+0xc74>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d04a      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb0 <HAL_DMA_IRQHandler+0xc78>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d045      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb4 <HAL_DMA_IRQHandler+0xc7c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d040      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb8 <HAL_DMA_IRQHandler+0xc80>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d03b      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a79      	ldr	r2, [pc, #484]	@ (8003fbc <HAL_DMA_IRQHandler+0xc84>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d036      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a77      	ldr	r2, [pc, #476]	@ (8003fc0 <HAL_DMA_IRQHandler+0xc88>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d031      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a76      	ldr	r2, [pc, #472]	@ (8003fc4 <HAL_DMA_IRQHandler+0xc8c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d02c      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a74      	ldr	r2, [pc, #464]	@ (8003fc8 <HAL_DMA_IRQHandler+0xc90>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d027      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a73      	ldr	r2, [pc, #460]	@ (8003fcc <HAL_DMA_IRQHandler+0xc94>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a71      	ldr	r2, [pc, #452]	@ (8003fd0 <HAL_DMA_IRQHandler+0xc98>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a70      	ldr	r2, [pc, #448]	@ (8003fd4 <HAL_DMA_IRQHandler+0xc9c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd8 <HAL_DMA_IRQHandler+0xca0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6d      	ldr	r2, [pc, #436]	@ (8003fdc <HAL_DMA_IRQHandler+0xca4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a6b      	ldr	r2, [pc, #428]	@ (8003fe0 <HAL_DMA_IRQHandler+0xca8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe4 <HAL_DMA_IRQHandler+0xcac>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xb12>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a68      	ldr	r2, [pc, #416]	@ (8003fe8 <HAL_DMA_IRQHandler+0xcb0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <HAL_DMA_IRQHandler+0xb24>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0208 	bic.w	r2, r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e007      	b.n	8003e6c <HAL_DMA_IRQHandler+0xb34>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8165 	beq.w	8004140 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e7e:	e15f      	b.n	8004140 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2202      	movs	r2, #2
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80c5 	beq.w	8004020 <HAL_DMA_IRQHandler+0xce8>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80bf 	beq.w	8004020 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2202      	movs	r2, #2
 8003eac:	409a      	lsls	r2, r3
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d018      	beq.n	8003eee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 813a 	beq.w	8004144 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ed8:	e134      	b.n	8004144 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8130 	beq.w	8004144 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eec:	e12a      	b.n	8004144 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f040 8089 	bne.w	800400c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	@ (8003fac <HAL_DMA_IRQHandler+0xc74>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04a      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <HAL_DMA_IRQHandler+0xc78>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d045      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <HAL_DMA_IRQHandler+0xc7c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	@ (8003fb8 <HAL_DMA_IRQHandler+0xc80>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03b      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a25      	ldr	r2, [pc, #148]	@ (8003fbc <HAL_DMA_IRQHandler+0xc84>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d036      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a23      	ldr	r2, [pc, #140]	@ (8003fc0 <HAL_DMA_IRQHandler+0xc88>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a22      	ldr	r2, [pc, #136]	@ (8003fc4 <HAL_DMA_IRQHandler+0xc8c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d02c      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a20      	ldr	r2, [pc, #128]	@ (8003fc8 <HAL_DMA_IRQHandler+0xc90>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d027      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fcc <HAL_DMA_IRQHandler+0xc94>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <HAL_DMA_IRQHandler+0xc98>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd4 <HAL_DMA_IRQHandler+0xc9c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <HAL_DMA_IRQHandler+0xca0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <HAL_DMA_IRQHandler+0xca4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a17      	ldr	r2, [pc, #92]	@ (8003fe0 <HAL_DMA_IRQHandler+0xca8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	@ (8003fe4 <HAL_DMA_IRQHandler+0xcac>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xc62>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <HAL_DMA_IRQHandler+0xcb0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d128      	bne.n	8003fec <HAL_DMA_IRQHandler+0xcb4>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0214 	bic.w	r2, r2, #20
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e027      	b.n	8003ffc <HAL_DMA_IRQHandler+0xcc4>
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 020a 	bic.w	r2, r2, #10
 8003ffa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8097 	beq.w	8004144 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800401e:	e091      	b.n	8004144 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8088 	beq.w	8004146 <HAL_DMA_IRQHandler+0xe0e>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8082 	beq.w	8004146 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a41      	ldr	r2, [pc, #260]	@ (800414c <HAL_DMA_IRQHandler+0xe14>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d04a      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3f      	ldr	r2, [pc, #252]	@ (8004150 <HAL_DMA_IRQHandler+0xe18>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d045      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a3e      	ldr	r2, [pc, #248]	@ (8004154 <HAL_DMA_IRQHandler+0xe1c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d040      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3c      	ldr	r2, [pc, #240]	@ (8004158 <HAL_DMA_IRQHandler+0xe20>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3b      	ldr	r2, [pc, #236]	@ (800415c <HAL_DMA_IRQHandler+0xe24>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a39      	ldr	r2, [pc, #228]	@ (8004160 <HAL_DMA_IRQHandler+0xe28>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a38      	ldr	r2, [pc, #224]	@ (8004164 <HAL_DMA_IRQHandler+0xe2c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d02c      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a36      	ldr	r2, [pc, #216]	@ (8004168 <HAL_DMA_IRQHandler+0xe30>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a35      	ldr	r2, [pc, #212]	@ (800416c <HAL_DMA_IRQHandler+0xe34>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a33      	ldr	r2, [pc, #204]	@ (8004170 <HAL_DMA_IRQHandler+0xe38>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a32      	ldr	r2, [pc, #200]	@ (8004174 <HAL_DMA_IRQHandler+0xe3c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <HAL_DMA_IRQHandler+0xe40>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2f      	ldr	r2, [pc, #188]	@ (800417c <HAL_DMA_IRQHandler+0xe44>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <HAL_DMA_IRQHandler+0xe48>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004184 <HAL_DMA_IRQHandler+0xe4c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_IRQHandler+0xdaa>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004188 <HAL_DMA_IRQHandler+0xe50>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d108      	bne.n	80040f4 <HAL_DMA_IRQHandler+0xdbc>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 021c 	bic.w	r2, r2, #28
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e007      	b.n	8004104 <HAL_DMA_IRQHandler+0xdcc>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 020e 	bic.w	r2, r2, #14
 8004102:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2201      	movs	r2, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
 800413a:	e004      	b.n	8004146 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800413c:	bf00      	nop
 800413e:	e002      	b.n	8004146 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004140:	bf00      	nop
 8004142:	e000      	b.n	8004146 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004144:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004146:	3728      	adds	r7, #40	@ 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8

0800418c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7f      	ldr	r2, [pc, #508]	@ (80043a8 <DMA_SetConfig+0x21c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d072      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a7d      	ldr	r2, [pc, #500]	@ (80043ac <DMA_SetConfig+0x220>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d06d      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7c      	ldr	r2, [pc, #496]	@ (80043b0 <DMA_SetConfig+0x224>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d068      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a7a      	ldr	r2, [pc, #488]	@ (80043b4 <DMA_SetConfig+0x228>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d063      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a79      	ldr	r2, [pc, #484]	@ (80043b8 <DMA_SetConfig+0x22c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d05e      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a77      	ldr	r2, [pc, #476]	@ (80043bc <DMA_SetConfig+0x230>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d059      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a76      	ldr	r2, [pc, #472]	@ (80043c0 <DMA_SetConfig+0x234>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d054      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a74      	ldr	r2, [pc, #464]	@ (80043c4 <DMA_SetConfig+0x238>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d04f      	beq.n	8004296 <DMA_SetConfig+0x10a>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a73      	ldr	r2, [pc, #460]	@ (80043c8 <DMA_SetConfig+0x23c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d04a      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a71      	ldr	r2, [pc, #452]	@ (80043cc <DMA_SetConfig+0x240>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d045      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a70      	ldr	r2, [pc, #448]	@ (80043d0 <DMA_SetConfig+0x244>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d040      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a6e      	ldr	r2, [pc, #440]	@ (80043d4 <DMA_SetConfig+0x248>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d03b      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a6d      	ldr	r2, [pc, #436]	@ (80043d8 <DMA_SetConfig+0x24c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d036      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6b      	ldr	r2, [pc, #428]	@ (80043dc <DMA_SetConfig+0x250>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d031      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6a      	ldr	r2, [pc, #424]	@ (80043e0 <DMA_SetConfig+0x254>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d02c      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a68      	ldr	r2, [pc, #416]	@ (80043e4 <DMA_SetConfig+0x258>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d027      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a67      	ldr	r2, [pc, #412]	@ (80043e8 <DMA_SetConfig+0x25c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a65      	ldr	r2, [pc, #404]	@ (80043ec <DMA_SetConfig+0x260>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01d      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a64      	ldr	r2, [pc, #400]	@ (80043f0 <DMA_SetConfig+0x264>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d018      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a62      	ldr	r2, [pc, #392]	@ (80043f4 <DMA_SetConfig+0x268>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a61      	ldr	r2, [pc, #388]	@ (80043f8 <DMA_SetConfig+0x26c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d00e      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5f      	ldr	r2, [pc, #380]	@ (80043fc <DMA_SetConfig+0x270>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d009      	beq.n	8004296 <DMA_SetConfig+0x10a>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a5e      	ldr	r2, [pc, #376]	@ (8004400 <DMA_SetConfig+0x274>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d004      	beq.n	8004296 <DMA_SetConfig+0x10a>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a5c      	ldr	r2, [pc, #368]	@ (8004404 <DMA_SetConfig+0x278>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <DMA_SetConfig+0x10e>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <DMA_SetConfig+0x110>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a39      	ldr	r2, [pc, #228]	@ (80043a8 <DMA_SetConfig+0x21c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d04a      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <DMA_SetConfig+0x220>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d045      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a36      	ldr	r2, [pc, #216]	@ (80043b0 <DMA_SetConfig+0x224>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d040      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a35      	ldr	r2, [pc, #212]	@ (80043b4 <DMA_SetConfig+0x228>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d03b      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a33      	ldr	r2, [pc, #204]	@ (80043b8 <DMA_SetConfig+0x22c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d036      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a32      	ldr	r2, [pc, #200]	@ (80043bc <DMA_SetConfig+0x230>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d031      	beq.n	800435c <DMA_SetConfig+0x1d0>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a30      	ldr	r2, [pc, #192]	@ (80043c0 <DMA_SetConfig+0x234>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02c      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2f      	ldr	r2, [pc, #188]	@ (80043c4 <DMA_SetConfig+0x238>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d027      	beq.n	800435c <DMA_SetConfig+0x1d0>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <DMA_SetConfig+0x23c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d022      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2c      	ldr	r2, [pc, #176]	@ (80043cc <DMA_SetConfig+0x240>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d01d      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a2a      	ldr	r2, [pc, #168]	@ (80043d0 <DMA_SetConfig+0x244>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d018      	beq.n	800435c <DMA_SetConfig+0x1d0>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <DMA_SetConfig+0x248>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a27      	ldr	r2, [pc, #156]	@ (80043d8 <DMA_SetConfig+0x24c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00e      	beq.n	800435c <DMA_SetConfig+0x1d0>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a26      	ldr	r2, [pc, #152]	@ (80043dc <DMA_SetConfig+0x250>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d009      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a24      	ldr	r2, [pc, #144]	@ (80043e0 <DMA_SetConfig+0x254>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <DMA_SetConfig+0x1d0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <DMA_SetConfig+0x258>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <DMA_SetConfig+0x1d4>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <DMA_SetConfig+0x1d6>
 8004360:	2300      	movs	r3, #0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d059      	beq.n	800441a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	223f      	movs	r2, #63	@ 0x3f
 8004370:	409a      	lsls	r2, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004384:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d138      	bne.n	8004408 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80043a6:	e086      	b.n	80044b6 <DMA_SetConfig+0x32a>
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	58025408 	.word	0x58025408
 80043ec:	5802541c 	.word	0x5802541c
 80043f0:	58025430 	.word	0x58025430
 80043f4:	58025444 	.word	0x58025444
 80043f8:	58025458 	.word	0x58025458
 80043fc:	5802546c 	.word	0x5802546c
 8004400:	58025480 	.word	0x58025480
 8004404:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
}
 8004418:	e04d      	b.n	80044b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <DMA_SetConfig+0x338>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <DMA_SetConfig+0x2de>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a27      	ldr	r2, [pc, #156]	@ (80044c8 <DMA_SetConfig+0x33c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01d      	beq.n	800446a <DMA_SetConfig+0x2de>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <DMA_SetConfig+0x340>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <DMA_SetConfig+0x2de>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <DMA_SetConfig+0x344>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d013      	beq.n	800446a <DMA_SetConfig+0x2de>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <DMA_SetConfig+0x348>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <DMA_SetConfig+0x2de>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	@ (80044d8 <DMA_SetConfig+0x34c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <DMA_SetConfig+0x2de>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a20      	ldr	r2, [pc, #128]	@ (80044dc <DMA_SetConfig+0x350>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <DMA_SetConfig+0x2de>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <DMA_SetConfig+0x354>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <DMA_SetConfig+0x2e2>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <DMA_SetConfig+0x2e4>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b40      	cmp	r3, #64	@ 0x40
 8004492:	d108      	bne.n	80044a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	60da      	str	r2, [r3, #12]
}
 80044a4:	e007      	b.n	80044b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	58025408 	.word	0x58025408
 80044c8:	5802541c 	.word	0x5802541c
 80044cc:	58025430 	.word	0x58025430
 80044d0:	58025444 	.word	0x58025444
 80044d4:	58025458 	.word	0x58025458
 80044d8:	5802546c 	.word	0x5802546c
 80044dc:	58025480 	.word	0x58025480
 80044e0:	58025494 	.word	0x58025494

080044e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a42      	ldr	r2, [pc, #264]	@ (80045fc <DMA_CalcBaseAndBitshift+0x118>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04a      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a41      	ldr	r2, [pc, #260]	@ (8004600 <DMA_CalcBaseAndBitshift+0x11c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d045      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3f      	ldr	r2, [pc, #252]	@ (8004604 <DMA_CalcBaseAndBitshift+0x120>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d040      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3e      	ldr	r2, [pc, #248]	@ (8004608 <DMA_CalcBaseAndBitshift+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d03b      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3c      	ldr	r2, [pc, #240]	@ (800460c <DMA_CalcBaseAndBitshift+0x128>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d036      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a3b      	ldr	r2, [pc, #236]	@ (8004610 <DMA_CalcBaseAndBitshift+0x12c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d031      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a39      	ldr	r2, [pc, #228]	@ (8004614 <DMA_CalcBaseAndBitshift+0x130>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02c      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a38      	ldr	r2, [pc, #224]	@ (8004618 <DMA_CalcBaseAndBitshift+0x134>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d027      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a36      	ldr	r2, [pc, #216]	@ (800461c <DMA_CalcBaseAndBitshift+0x138>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a35      	ldr	r2, [pc, #212]	@ (8004620 <DMA_CalcBaseAndBitshift+0x13c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d01d      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a33      	ldr	r2, [pc, #204]	@ (8004624 <DMA_CalcBaseAndBitshift+0x140>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a32      	ldr	r2, [pc, #200]	@ (8004628 <DMA_CalcBaseAndBitshift+0x144>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a30      	ldr	r2, [pc, #192]	@ (800462c <DMA_CalcBaseAndBitshift+0x148>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2f      	ldr	r2, [pc, #188]	@ (8004630 <DMA_CalcBaseAndBitshift+0x14c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2d      	ldr	r2, [pc, #180]	@ (8004634 <DMA_CalcBaseAndBitshift+0x150>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <DMA_CalcBaseAndBitshift+0xa8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2c      	ldr	r2, [pc, #176]	@ (8004638 <DMA_CalcBaseAndBitshift+0x154>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <DMA_CalcBaseAndBitshift+0xac>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <DMA_CalcBaseAndBitshift+0xae>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d024      	beq.n	80045e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3b10      	subs	r3, #16
 800459e:	4a27      	ldr	r2, [pc, #156]	@ (800463c <DMA_CalcBaseAndBitshift+0x158>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <DMA_CalcBaseAndBitshift+0x15c>)
 80045b0:	5cd3      	ldrb	r3, [r2, r3]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d908      	bls.n	80045d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004644 <DMA_CalcBaseAndBitshift+0x160>)
 80045c6:	4013      	ands	r3, r2
 80045c8:	1d1a      	adds	r2, r3, #4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80045ce:	e00d      	b.n	80045ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004644 <DMA_CalcBaseAndBitshift+0x160>)
 80045d8:	4013      	ands	r3, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045de:	e005      	b.n	80045ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40020010 	.word	0x40020010
 8004600:	40020028 	.word	0x40020028
 8004604:	40020040 	.word	0x40020040
 8004608:	40020058 	.word	0x40020058
 800460c:	40020070 	.word	0x40020070
 8004610:	40020088 	.word	0x40020088
 8004614:	400200a0 	.word	0x400200a0
 8004618:	400200b8 	.word	0x400200b8
 800461c:	40020410 	.word	0x40020410
 8004620:	40020428 	.word	0x40020428
 8004624:	40020440 	.word	0x40020440
 8004628:	40020458 	.word	0x40020458
 800462c:	40020470 	.word	0x40020470
 8004630:	40020488 	.word	0x40020488
 8004634:	400204a0 	.word	0x400204a0
 8004638:	400204b8 	.word	0x400204b8
 800463c:	aaaaaaab 	.word	0xaaaaaaab
 8004640:	0800aef8 	.word	0x0800aef8
 8004644:	fffffc00 	.word	0xfffffc00

08004648 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d120      	bne.n	800469e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	2b03      	cmp	r3, #3
 8004662:	d858      	bhi.n	8004716 <DMA_CheckFifoParam+0xce>
 8004664:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <DMA_CheckFifoParam+0x24>)
 8004666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466a:	bf00      	nop
 800466c:	0800467d 	.word	0x0800467d
 8004670:	0800468f 	.word	0x0800468f
 8004674:	0800467d 	.word	0x0800467d
 8004678:	08004717 	.word	0x08004717
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d048      	beq.n	800471a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800468c:	e045      	b.n	800471a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004696:	d142      	bne.n	800471e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800469c:	e03f      	b.n	800471e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046a6:	d123      	bne.n	80046f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d838      	bhi.n	8004722 <DMA_CheckFifoParam+0xda>
 80046b0:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <DMA_CheckFifoParam+0x70>)
 80046b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b6:	bf00      	nop
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046cf 	.word	0x080046cf
 80046c0:	080046c9 	.word	0x080046c9
 80046c4:	080046e1 	.word	0x080046e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
        break;
 80046cc:	e030      	b.n	8004730 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d025      	beq.n	8004726 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046de:	e022      	b.n	8004726 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046e8:	d11f      	bne.n	800472a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046ee:	e01c      	b.n	800472a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d902      	bls.n	80046fe <DMA_CheckFifoParam+0xb6>
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d003      	beq.n	8004704 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80046fc:	e018      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
        break;
 8004702:	e015      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00e      	beq.n	800472e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
    break;
 8004714:	e00b      	b.n	800472e <DMA_CheckFifoParam+0xe6>
        break;
 8004716:	bf00      	nop
 8004718:	e00a      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        break;
 800471a:	bf00      	nop
 800471c:	e008      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        break;
 800471e:	bf00      	nop
 8004720:	e006      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        break;
 8004722:	bf00      	nop
 8004724:	e004      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        break;
 8004726:	bf00      	nop
 8004728:	e002      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
        break;
 800472a:	bf00      	nop
 800472c:	e000      	b.n	8004730 <DMA_CheckFifoParam+0xe8>
    break;
 800472e:	bf00      	nop
    }
  }

  return status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a38      	ldr	r2, [pc, #224]	@ (8004834 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a36      	ldr	r2, [pc, #216]	@ (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d01d      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a35      	ldr	r2, [pc, #212]	@ (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a33      	ldr	r2, [pc, #204]	@ (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a30      	ldr	r2, [pc, #192]	@ (8004848 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2f      	ldr	r2, [pc, #188]	@ (800484c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2d      	ldr	r2, [pc, #180]	@ (8004850 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	3b08      	subs	r3, #8
 80047b0:	4a28      	ldr	r2, [pc, #160]	@ (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80047b2:	fba2 2303 	umull	r2, r3, r2, r3
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4b26      	ldr	r3, [pc, #152]	@ (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a24      	ldr	r2, [pc, #144]	@ (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80047cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047dc:	e024      	b.n	8004828 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3b10      	subs	r3, #16
 80047e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d806      	bhi.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004868 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d902      	bls.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3308      	adds	r3, #8
 8004804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004818:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2201      	movs	r2, #1
 8004822:	409a      	lsls	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	58025408 	.word	0x58025408
 8004838:	5802541c 	.word	0x5802541c
 800483c:	58025430 	.word	0x58025430
 8004840:	58025444 	.word	0x58025444
 8004844:	58025458 	.word	0x58025458
 8004848:	5802546c 	.word	0x5802546c
 800484c:	58025480 	.word	0x58025480
 8004850:	58025494 	.word	0x58025494
 8004854:	cccccccd 	.word	0xcccccccd
 8004858:	16009600 	.word	0x16009600
 800485c:	58025880 	.word	0x58025880
 8004860:	aaaaaaab 	.word	0xaaaaaaab
 8004864:	400204b8 	.word	0x400204b8
 8004868:	4002040f 	.word	0x4002040f
 800486c:	10008200 	.word	0x10008200
 8004870:	40020880 	.word	0x40020880

08004874 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04a      	beq.n	8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b08      	cmp	r3, #8
 800488e:	d847      	bhi.n	8004920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a25      	ldr	r2, [pc, #148]	@ (800492c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d022      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d01d      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a22      	ldr	r2, [pc, #136]	@ (8004934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d018      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	@ (8004938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	@ (800493c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d009      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d101      	bne.n	80048e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80048fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80048fe:	e009      	b.n	8004914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004912:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3b01      	subs	r3, #1
 8004918:	2201      	movs	r2, #1
 800491a:	409a      	lsls	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	58025408 	.word	0x58025408
 8004930:	5802541c 	.word	0x5802541c
 8004934:	58025430 	.word	0x58025430
 8004938:	58025444 	.word	0x58025444
 800493c:	58025458 	.word	0x58025458
 8004940:	5802546c 	.word	0x5802546c
 8004944:	58025480 	.word	0x58025480
 8004948:	58025494 	.word	0x58025494
 800494c:	1600963f 	.word	0x1600963f
 8004950:	58025940 	.word	0x58025940
 8004954:	1000823f 	.word	0x1000823f
 8004958:	40020940 	.word	0x40020940

0800495c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800495c:	b480      	push	{r7}
 800495e:	b089      	sub	sp, #36	@ 0x24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800496a:	4b86      	ldr	r3, [pc, #536]	@ (8004b84 <HAL_GPIO_Init+0x228>)
 800496c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800496e:	e18c      	b.n	8004c8a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2101      	movs	r1, #1
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 817e 	beq.w	8004c84 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b01      	cmp	r3, #1
 8004992:	d005      	beq.n	80049a0 <HAL_GPIO_Init+0x44>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d130      	bne.n	8004a02 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049d6:	2201      	movs	r2, #1
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 0201 	and.w	r2, r3, #1
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d017      	beq.n	8004a3e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	2203      	movs	r2, #3
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4013      	ands	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d123      	bne.n	8004a92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	08da      	lsrs	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3208      	adds	r2, #8
 8004a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	220f      	movs	r2, #15
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	08da      	lsrs	r2, r3, #3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3208      	adds	r2, #8
 8004a8c:	69b9      	ldr	r1, [r7, #24]
 8004a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80d8 	beq.w	8004c84 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b88 <HAL_GPIO_Init+0x22c>)
 8004ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004ada:	4a2b      	ldr	r2, [pc, #172]	@ (8004b88 <HAL_GPIO_Init+0x22c>)
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ae4:	4b28      	ldr	r3, [pc, #160]	@ (8004b88 <HAL_GPIO_Init+0x22c>)
 8004ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <HAL_GPIO_Init+0x230>)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1d      	ldr	r2, [pc, #116]	@ (8004b90 <HAL_GPIO_Init+0x234>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04a      	beq.n	8004bb4 <HAL_GPIO_Init+0x258>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <HAL_GPIO_Init+0x238>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d02b      	beq.n	8004b7e <HAL_GPIO_Init+0x222>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <HAL_GPIO_Init+0x23c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d025      	beq.n	8004b7a <HAL_GPIO_Init+0x21e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a1a      	ldr	r2, [pc, #104]	@ (8004b9c <HAL_GPIO_Init+0x240>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01f      	beq.n	8004b76 <HAL_GPIO_Init+0x21a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a19      	ldr	r2, [pc, #100]	@ (8004ba0 <HAL_GPIO_Init+0x244>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d019      	beq.n	8004b72 <HAL_GPIO_Init+0x216>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a18      	ldr	r2, [pc, #96]	@ (8004ba4 <HAL_GPIO_Init+0x248>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <HAL_GPIO_Init+0x212>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <HAL_GPIO_Init+0x24c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00d      	beq.n	8004b6a <HAL_GPIO_Init+0x20e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <HAL_GPIO_Init+0x250>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <HAL_GPIO_Init+0x20a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <HAL_GPIO_Init+0x254>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d101      	bne.n	8004b62 <HAL_GPIO_Init+0x206>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	e029      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b62:	230a      	movs	r3, #10
 8004b64:	e027      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b66:	2307      	movs	r3, #7
 8004b68:	e025      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	e023      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b6e:	2305      	movs	r3, #5
 8004b70:	e021      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b72:	2304      	movs	r3, #4
 8004b74:	e01f      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b76:	2303      	movs	r3, #3
 8004b78:	e01d      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e01b      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e019      	b.n	8004bb6 <HAL_GPIO_Init+0x25a>
 8004b82:	bf00      	nop
 8004b84:	58000080 	.word	0x58000080
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	58000400 	.word	0x58000400
 8004b90:	58020000 	.word	0x58020000
 8004b94:	58020400 	.word	0x58020400
 8004b98:	58020800 	.word	0x58020800
 8004b9c:	58020c00 	.word	0x58020c00
 8004ba0:	58021000 	.word	0x58021000
 8004ba4:	58021400 	.word	0x58021400
 8004ba8:	58021800 	.word	0x58021800
 8004bac:	58021c00 	.word	0x58021c00
 8004bb0:	58022400 	.word	0x58022400
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	f002 0203 	and.w	r2, r2, #3
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	4093      	lsls	r3, r2
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bc6:	4938      	ldr	r1, [pc, #224]	@ (8004ca8 <HAL_GPIO_Init+0x34c>)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3302      	adds	r3, #2
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4013      	ands	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	43db      	mvns	r3, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4013      	ands	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa22 f303 	lsr.w	r3, r2, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f47f ae6b 	bne.w	8004970 <HAL_GPIO_Init+0x14>
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	bf00      	nop
 8004c9e:	3724      	adds	r7, #36	@ 0x24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	58000400 	.word	0x58000400

08004cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cc2:	887a      	ldrh	r2, [r7, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cc8:	e003      	b.n	8004cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	619a      	str	r2, [r3, #24]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004cf0:	887a      	ldrh	r2, [r7, #2]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	041a      	lsls	r2, r3, #16
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43d9      	mvns	r1, r3
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	400b      	ands	r3, r1
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	619a      	str	r2, [r3, #24]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb ff99 	bl	8000c70 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004d50:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <HAL_PWREx_ConfigSupply+0x70>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d00a      	beq.n	8004d72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d5c:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <HAL_PWREx_ConfigSupply+0x70>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e01f      	b.n	8004dae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e01d      	b.n	8004dae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d72:	4b11      	ldr	r3, [pc, #68]	@ (8004db8 <HAL_PWREx_ConfigSupply+0x70>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0207 	bic.w	r2, r3, #7
 8004d7a:	490f      	ldr	r1, [pc, #60]	@ (8004db8 <HAL_PWREx_ConfigSupply+0x70>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004d82:	f7fc fbf5 	bl	8001570 <HAL_GetTick>
 8004d86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d88:	e009      	b.n	8004d9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004d8a:	f7fc fbf1 	bl	8001570 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d98:	d901      	bls.n	8004d9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e007      	b.n	8004dae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004d9e:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_PWREx_ConfigSupply+0x70>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004daa:	d1ee      	bne.n	8004d8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	58024800 	.word	0x58024800

08004dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08c      	sub	sp, #48	@ 0x30
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e3c8      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8087 	beq.w	8004eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ddc:	4b88      	ldr	r3, [pc, #544]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004de6:	4b86      	ldr	r3, [pc, #536]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d007      	beq.n	8004e02 <HAL_RCC_OscConfig+0x46>
 8004df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df4:	2b18      	cmp	r3, #24
 8004df6:	d110      	bne.n	8004e1a <HAL_RCC_OscConfig+0x5e>
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d10b      	bne.n	8004e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e02:	4b7f      	ldr	r3, [pc, #508]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d06c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x12c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d168      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e3a2      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x76>
 8004e24:	4b76      	ldr	r3, [pc, #472]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a75      	ldr	r2, [pc, #468]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e02e      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x98>
 8004e3a:	4b71      	ldr	r3, [pc, #452]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a70      	ldr	r2, [pc, #448]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b6e      	ldr	r3, [pc, #440]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e01d      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0xbc>
 8004e5e:	4b68      	ldr	r3, [pc, #416]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a67      	ldr	r2, [pc, #412]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b65      	ldr	r3, [pc, #404]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a64      	ldr	r2, [pc, #400]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0xd4>
 8004e78:	4b61      	ldr	r3, [pc, #388]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a60      	ldr	r2, [pc, #384]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d013      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc fb6a 	bl	8001570 <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7fc fb66 	bl	8001570 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	@ 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e356      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eb2:	4b53      	ldr	r3, [pc, #332]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0xe4>
 8004ebe:	e014      	b.n	8004eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fc fb56 	bl	8001570 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fc fb52 	bl	8001570 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e342      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004eda:	4b49      	ldr	r3, [pc, #292]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x10c>
 8004ee6:	e000      	b.n	8004eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 808c 	beq.w	8005010 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef8:	4b41      	ldr	r3, [pc, #260]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f02:	4b3f      	ldr	r3, [pc, #252]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <HAL_RCC_OscConfig+0x162>
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	2b18      	cmp	r3, #24
 8004f12:	d137      	bne.n	8004f84 <HAL_RCC_OscConfig+0x1c8>
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d132      	bne.n	8004f84 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f1e:	4b38      	ldr	r3, [pc, #224]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x17a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e314      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f36:	4b32      	ldr	r3, [pc, #200]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0219 	bic.w	r2, r3, #25
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	492f      	ldr	r1, [pc, #188]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fb12 	bl	8001570 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fc fb0e 	bl	8001570 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e2fe      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f62:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	4920      	ldr	r1, [pc, #128]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f82:	e045      	b.n	8005010 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d026      	beq.n	8004fda <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f023 0219 	bic.w	r2, r3, #25
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4919      	ldr	r1, [pc, #100]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fc fae7 	bl	8001570 <HAL_GetTick>
 8004fa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa6:	f7fc fae3 	bl	8001570 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e2d3      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	490b      	ldr	r1, [pc, #44]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	e01a      	b.n	8005010 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fda:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <HAL_RCC_OscConfig+0x244>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc fac3 	bl	8001570 <HAL_GetTick>
 8004fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fee:	f7fc fabf 	bl	8001570 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d903      	bls.n	8005004 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e2af      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
 8005000:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005004:	4b96      	ldr	r3, [pc, #600]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1ee      	bne.n	8004fee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d06a      	beq.n	80050f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501c:	4b90      	ldr	r3, [pc, #576]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005024:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005026:	4b8e      	ldr	r3, [pc, #568]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b08      	cmp	r3, #8
 8005030:	d007      	beq.n	8005042 <HAL_RCC_OscConfig+0x286>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b18      	cmp	r3, #24
 8005036:	d11b      	bne.n	8005070 <HAL_RCC_OscConfig+0x2b4>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b01      	cmp	r3, #1
 8005040:	d116      	bne.n	8005070 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005042:	4b87      	ldr	r3, [pc, #540]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_RCC_OscConfig+0x29e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	2b80      	cmp	r3, #128	@ 0x80
 8005054:	d001      	beq.n	800505a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e282      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800505a:	4b81      	ldr	r3, [pc, #516]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	497d      	ldr	r1, [pc, #500]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	4313      	orrs	r3, r2
 800506c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800506e:	e040      	b.n	80050f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005078:	4b79      	ldr	r3, [pc, #484]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a78      	ldr	r2, [pc, #480]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800507e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fc fa74 	bl	8001570 <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800508c:	f7fc fa70 	bl	8001570 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e260      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800509e:	4b70      	ldr	r3, [pc, #448]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	4969      	ldr	r1, [pc, #420]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]
 80050be:	e018      	b.n	80050f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050c0:	4b67      	ldr	r3, [pc, #412]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a66      	ldr	r2, [pc, #408]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050cc:	f7fc fa50 	bl	8001570 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050d4:	f7fc fa4c 	bl	8001570 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e23c      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d036      	beq.n	800516c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d019      	beq.n	800513a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b56      	ldr	r3, [pc, #344]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800510a:	4a55      	ldr	r2, [pc, #340]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fc fa2d 	bl	8001570 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511a:	f7fc fa29 	bl	8001570 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e219      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800512c:	4b4c      	ldr	r3, [pc, #304]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x35e>
 8005138:	e018      	b.n	800516c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800513a:	4b49      	ldr	r3, [pc, #292]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800513c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513e:	4a48      	ldr	r2, [pc, #288]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005146:	f7fc fa13 	bl	8001570 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514e:	f7fc fa0f 	bl	8001570 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e1ff      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d036      	beq.n	80051e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d019      	beq.n	80051b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005180:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a36      	ldr	r2, [pc, #216]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005186:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800518a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800518c:	f7fc f9f0 	bl	8001570 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005194:	f7fc f9ec 	bl	8001570 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1dc      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x3d8>
 80051b2:	e018      	b.n	80051e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a29      	ldr	r2, [pc, #164]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80051ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051c0:	f7fc f9d6 	bl	8001570 <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051c8:	f7fc f9d2 	bl	8001570 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1c2      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051da:	4b21      	ldr	r3, [pc, #132]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8086 	beq.w	8005300 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x4a8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005264 <HAL_RCC_OscConfig+0x4a8>)
 80051fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005200:	f7fc f9b6 	bl	8001570 <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005208:	f7fc f9b2 	bl	8001570 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b64      	cmp	r3, #100	@ 0x64
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1a2      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800521a:	4b12      	ldr	r3, [pc, #72]	@ (8005264 <HAL_RCC_OscConfig+0x4a8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x480>
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005232:	4a0b      	ldr	r2, [pc, #44]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6713      	str	r3, [r2, #112]	@ 0x70
 800523a:	e032      	b.n	80052a2 <HAL_RCC_OscConfig+0x4e6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d111      	bne.n	8005268 <HAL_RCC_OscConfig+0x4ac>
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005248:	4a05      	ldr	r2, [pc, #20]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 800524a:	f023 0301 	bic.w	r3, r3, #1
 800524e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005254:	4a02      	ldr	r2, [pc, #8]	@ (8005260 <HAL_RCC_OscConfig+0x4a4>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	6713      	str	r3, [r2, #112]	@ 0x70
 800525c:	e021      	b.n	80052a2 <HAL_RCC_OscConfig+0x4e6>
 800525e:	bf00      	nop
 8005260:	58024400 	.word	0x58024400
 8005264:	58024800 	.word	0x58024800
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b05      	cmp	r3, #5
 800526e:	d10c      	bne.n	800528a <HAL_RCC_OscConfig+0x4ce>
 8005270:	4b83      	ldr	r3, [pc, #524]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	4a82      	ldr	r2, [pc, #520]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	6713      	str	r3, [r2, #112]	@ 0x70
 800527c:	4b80      	ldr	r3, [pc, #512]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	4a7f      	ldr	r2, [pc, #508]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6713      	str	r3, [r2, #112]	@ 0x70
 8005288:	e00b      	b.n	80052a2 <HAL_RCC_OscConfig+0x4e6>
 800528a:	4b7d      	ldr	r3, [pc, #500]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a7c      	ldr	r2, [pc, #496]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a79      	ldr	r2, [pc, #484]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d015      	beq.n	80052d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fc f961 	bl	8001570 <HAL_GetTick>
 80052ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b0:	e00a      	b.n	80052c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b2:	f7fc f95d 	bl	8001570 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e14b      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052c8:	4b6d      	ldr	r3, [pc, #436]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ee      	beq.n	80052b2 <HAL_RCC_OscConfig+0x4f6>
 80052d4:	e014      	b.n	8005300 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fc f94b 	bl	8001570 <HAL_GetTick>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fc f947 	bl	8001570 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e135      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052f4:	4b62      	ldr	r3, [pc, #392]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ee      	bne.n	80052de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 812a 	beq.w	800555e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800530a:	4b5d      	ldr	r3, [pc, #372]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005312:	2b18      	cmp	r3, #24
 8005314:	f000 80ba 	beq.w	800548c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	2b02      	cmp	r3, #2
 800531e:	f040 8095 	bne.w	800544c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005322:	4b57      	ldr	r3, [pc, #348]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a56      	ldr	r2, [pc, #344]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800532c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532e:	f7fc f91f 	bl	8001570 <HAL_GetTick>
 8005332:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7fc f91b 	bl	8001570 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e10b      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005348:	4b4d      	ldr	r3, [pc, #308]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f0      	bne.n	8005336 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005354:	4b4a      	ldr	r3, [pc, #296]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005358:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <HAL_RCC_OscConfig+0x6c8>)
 800535a:	4013      	ands	r3, r2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	430a      	orrs	r2, r1
 8005368:	4945      	ldr	r1, [pc, #276]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	628b      	str	r3, [r1, #40]	@ 0x28
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	3b01      	subs	r3, #1
 8005374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537c:	3b01      	subs	r3, #1
 800537e:	025b      	lsls	r3, r3, #9
 8005380:	b29b      	uxth	r3, r3
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005388:	3b01      	subs	r3, #1
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	3b01      	subs	r3, #1
 8005398:	061b      	lsls	r3, r3, #24
 800539a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800539e:	4938      	ldr	r1, [pc, #224]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80053a4:	4b36      	ldr	r3, [pc, #216]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	4a35      	ldr	r2, [pc, #212]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80053b0:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b4:	4b34      	ldr	r3, [pc, #208]	@ (8005488 <HAL_RCC_OscConfig+0x6cc>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80053bc:	00d2      	lsls	r2, r2, #3
 80053be:	4930      	ldr	r1, [pc, #192]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80053c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c8:	f023 020c 	bic.w	r2, r3, #12
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	492b      	ldr	r1, [pc, #172]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	f023 0202 	bic.w	r2, r3, #2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	4927      	ldr	r1, [pc, #156]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053e8:	4b25      	ldr	r3, [pc, #148]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	4a24      	ldr	r2, [pc, #144]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f4:	4b22      	ldr	r3, [pc, #136]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a21      	ldr	r2, [pc, #132]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005400:	4b1f      	ldr	r3, [pc, #124]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	4a1e      	ldr	r2, [pc, #120]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800540a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800540c:	4b1c      	ldr	r3, [pc, #112]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005418:	4b19      	ldr	r3, [pc, #100]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fc f8a4 	bl	8001570 <HAL_GetTick>
 8005428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542c:	f7fc f8a0 	bl	8001570 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e090      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800543e:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x670>
 800544a:	e088      	b.n	800555e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b0c      	ldr	r3, [pc, #48]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0b      	ldr	r2, [pc, #44]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005452:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fc f88a 	bl	8001570 <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc f886 	bl	8001570 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e076      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005472:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_RCC_OscConfig+0x6c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x6a4>
 800547e:	e06e      	b.n	800555e <HAL_RCC_OscConfig+0x7a2>
 8005480:	58024400 	.word	0x58024400
 8005484:	fffffc0c 	.word	0xfffffc0c
 8005488:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800548c:	4b36      	ldr	r3, [pc, #216]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005492:	4b35      	ldr	r3, [pc, #212]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	2b01      	cmp	r3, #1
 800549e:	d031      	beq.n	8005504 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f003 0203 	and.w	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d12a      	bne.n	8005504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d122      	bne.n	8005504 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d11a      	bne.n	8005504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	0a5b      	lsrs	r3, r3, #9
 80054d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d111      	bne.n	8005504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d108      	bne.n	8005504 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e02b      	b.n	8005560 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005508:	4b17      	ldr	r3, [pc, #92]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 800550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550c:	08db      	lsrs	r3, r3, #3
 800550e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005512:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d01f      	beq.n	800555e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800551e:	4b12      	ldr	r3, [pc, #72]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800552a:	f7fc f821 	bl	8001570 <HAL_GetTick>
 800552e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005530:	bf00      	nop
 8005532:	f7fc f81d 	bl	8001570 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	4293      	cmp	r3, r2
 800553c:	d0f9      	beq.n	8005532 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800553e:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <HAL_RCC_OscConfig+0x7b0>)
 8005544:	4013      	ands	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800554a:	00d2      	lsls	r2, r2, #3
 800554c:	4906      	ldr	r1, [pc, #24]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 800554e:	4313      	orrs	r3, r2
 8005550:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005552:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <HAL_RCC_OscConfig+0x7ac>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3730      	adds	r7, #48	@ 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58024400 	.word	0x58024400
 800556c:	ffff0007 	.word	0xffff0007

08005570 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e19c      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005584:	4b8a      	ldr	r3, [pc, #552]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d910      	bls.n	80055b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b87      	ldr	r3, [pc, #540]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 020f 	bic.w	r2, r3, #15
 800559a:	4985      	ldr	r1, [pc, #532]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b83      	ldr	r3, [pc, #524]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e184      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d010      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	4b7b      	ldr	r3, [pc, #492]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d908      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055d0:	4b78      	ldr	r3, [pc, #480]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	4975      	ldr	r1, [pc, #468]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d010      	beq.n	8005610 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	4b70      	ldr	r3, [pc, #448]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d908      	bls.n	8005610 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055fe:	4b6d      	ldr	r3, [pc, #436]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	496a      	ldr	r1, [pc, #424]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800560c:	4313      	orrs	r3, r2
 800560e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	d010      	beq.n	800563e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	4b64      	ldr	r3, [pc, #400]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005628:	429a      	cmp	r2, r3
 800562a:	d908      	bls.n	800563e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800562c:	4b61      	ldr	r3, [pc, #388]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	495e      	ldr	r1, [pc, #376]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800563a:	4313      	orrs	r3, r2
 800563c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	4b59      	ldr	r3, [pc, #356]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005656:	429a      	cmp	r2, r3
 8005658:	d908      	bls.n	800566c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800565a:	4b56      	ldr	r3, [pc, #344]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	4953      	ldr	r1, [pc, #332]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005668:	4313      	orrs	r3, r2
 800566a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d010      	beq.n	800569a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	4b4d      	ldr	r3, [pc, #308]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	429a      	cmp	r2, r3
 8005686:	d908      	bls.n	800569a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005688:	4b4a      	ldr	r3, [pc, #296]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f023 020f 	bic.w	r2, r3, #15
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4947      	ldr	r1, [pc, #284]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005696:	4313      	orrs	r3, r2
 8005698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d055      	beq.n	8005752 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80056a6:	4b43      	ldr	r3, [pc, #268]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	4940      	ldr	r1, [pc, #256]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056c0:	4b3c      	ldr	r3, [pc, #240]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d121      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e0f6      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056d8:	4b36      	ldr	r3, [pc, #216]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d115      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0ea      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056f0:	4b30      	ldr	r3, [pc, #192]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0de      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005700:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0d6      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005710:	4b28      	ldr	r3, [pc, #160]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f023 0207 	bic.w	r2, r3, #7
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4925      	ldr	r1, [pc, #148]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005722:	f7fb ff25 	bl	8001570 <HAL_GetTick>
 8005726:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005728:	e00a      	b.n	8005740 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800572a:	f7fb ff21 	bl	8001570 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005738:	4293      	cmp	r3, r2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0be      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005740:	4b1c      	ldr	r3, [pc, #112]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	429a      	cmp	r2, r3
 8005750:	d1eb      	bne.n	800572a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	4b14      	ldr	r3, [pc, #80]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	429a      	cmp	r2, r3
 800576c:	d208      	bcs.n	8005780 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800576e:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	490e      	ldr	r1, [pc, #56]	@ (80057b4 <HAL_RCC_ClockConfig+0x244>)
 800577c:	4313      	orrs	r3, r2
 800577e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d214      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 020f 	bic.w	r2, r3, #15
 8005796:	4906      	ldr	r1, [pc, #24]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <HAL_RCC_ClockConfig+0x240>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e086      	b.n	80058be <HAL_RCC_ClockConfig+0x34e>
 80057b0:	52002000 	.word	0x52002000
 80057b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d010      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	4b3f      	ldr	r3, [pc, #252]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d208      	bcs.n	80057e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d4:	4b3c      	ldr	r3, [pc, #240]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	4939      	ldr	r1, [pc, #228]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695a      	ldr	r2, [r3, #20]
 80057f6:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80057fe:	429a      	cmp	r2, r3
 8005800:	d208      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	492e      	ldr	r1, [pc, #184]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005810:	4313      	orrs	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699a      	ldr	r2, [r3, #24]
 8005824:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800582c:	429a      	cmp	r2, r3
 800582e:	d208      	bcs.n	8005842 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005830:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4922      	ldr	r1, [pc, #136]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 800583e:	4313      	orrs	r3, r2
 8005840:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800585a:	429a      	cmp	r2, r3
 800585c:	d208      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800585e:	4b1a      	ldr	r3, [pc, #104]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4917      	ldr	r1, [pc, #92]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 800586c:	4313      	orrs	r3, r2
 800586e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005870:	f000 f834 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	4912      	ldr	r1, [pc, #72]	@ (80058cc <HAL_RCC_ClockConfig+0x35c>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
 800588c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800588e:	4b0e      	ldr	r3, [pc, #56]	@ (80058c8 <HAL_RCC_ClockConfig+0x358>)
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	4a0d      	ldr	r2, [pc, #52]	@ (80058cc <HAL_RCC_ClockConfig+0x35c>)
 8005898:	5cd3      	ldrb	r3, [r2, r3]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
 80058a4:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_RCC_ClockConfig+0x360>)
 80058a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80058a8:	4a0a      	ldr	r2, [pc, #40]	@ (80058d4 <HAL_RCC_ClockConfig+0x364>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80058ae:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <HAL_RCC_ClockConfig+0x368>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fe12 	bl	80014dc <HAL_InitTick>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	0800aee8 	.word	0x0800aee8
 80058d0:	24000008 	.word	0x24000008
 80058d4:	24000004 	.word	0x24000004
 80058d8:	2400000c 	.word	0x2400000c

080058dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	@ 0x24
 80058e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058e2:	4bb3      	ldr	r3, [pc, #716]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ea:	2b18      	cmp	r3, #24
 80058ec:	f200 8155 	bhi.w	8005b9a <HAL_RCC_GetSysClockFreq+0x2be>
 80058f0:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800595d 	.word	0x0800595d
 80058fc:	08005b9b 	.word	0x08005b9b
 8005900:	08005b9b 	.word	0x08005b9b
 8005904:	08005b9b 	.word	0x08005b9b
 8005908:	08005b9b 	.word	0x08005b9b
 800590c:	08005b9b 	.word	0x08005b9b
 8005910:	08005b9b 	.word	0x08005b9b
 8005914:	08005b9b 	.word	0x08005b9b
 8005918:	08005983 	.word	0x08005983
 800591c:	08005b9b 	.word	0x08005b9b
 8005920:	08005b9b 	.word	0x08005b9b
 8005924:	08005b9b 	.word	0x08005b9b
 8005928:	08005b9b 	.word	0x08005b9b
 800592c:	08005b9b 	.word	0x08005b9b
 8005930:	08005b9b 	.word	0x08005b9b
 8005934:	08005b9b 	.word	0x08005b9b
 8005938:	08005989 	.word	0x08005989
 800593c:	08005b9b 	.word	0x08005b9b
 8005940:	08005b9b 	.word	0x08005b9b
 8005944:	08005b9b 	.word	0x08005b9b
 8005948:	08005b9b 	.word	0x08005b9b
 800594c:	08005b9b 	.word	0x08005b9b
 8005950:	08005b9b 	.word	0x08005b9b
 8005954:	08005b9b 	.word	0x08005b9b
 8005958:	0800598f 	.word	0x0800598f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800595c:	4b94      	ldr	r3, [pc, #592]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d009      	beq.n	800597c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005968:	4b91      	ldr	r3, [pc, #580]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	08db      	lsrs	r3, r3, #3
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	4a90      	ldr	r2, [pc, #576]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800597a:	e111      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800597c:	4b8d      	ldr	r3, [pc, #564]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800597e:	61bb      	str	r3, [r7, #24]
      break;
 8005980:	e10e      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005982:	4b8d      	ldr	r3, [pc, #564]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005984:	61bb      	str	r3, [r7, #24]
      break;
 8005986:	e10b      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005988:	4b8c      	ldr	r3, [pc, #560]	@ (8005bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800598a:	61bb      	str	r3, [r7, #24]
      break;
 800598c:	e108      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800598e:	4b88      	ldr	r3, [pc, #544]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005998:	4b85      	ldr	r3, [pc, #532]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059a4:	4b82      	ldr	r3, [pc, #520]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059ae:	4b80      	ldr	r3, [pc, #512]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b2:	08db      	lsrs	r3, r3, #3
 80059b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	fb02 f303 	mul.w	r3, r2, r3
 80059be:	ee07 3a90 	vmov	s15, r3
 80059c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80e1 	beq.w	8005b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	f000 8083 	beq.w	8005ae0 <HAL_RCC_GetSysClockFreq+0x204>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	f200 80a1 	bhi.w	8005b24 <HAL_RCC_GetSysClockFreq+0x248>
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <HAL_RCC_GetSysClockFreq+0x114>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d056      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 80059ee:	e099      	b.n	8005b24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059f0:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d02d      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059fc:	4b6c      	ldr	r3, [pc, #432]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	08db      	lsrs	r3, r3, #3
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	4a6b      	ldr	r2, [pc, #428]	@ (8005bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	ee07 3a90 	vmov	s15, r3
 8005a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a26:	4b62      	ldr	r3, [pc, #392]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005a56:	e087      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6a:	4b51      	ldr	r3, [pc, #324]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a9a:	e065      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aae:	4b40      	ldr	r3, [pc, #256]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab6:	ee07 3a90 	vmov	s15, r3
 8005aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ade:	e043      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af2:	4b2f      	ldr	r3, [pc, #188]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005afa:	ee07 3a90 	vmov	s15, r3
 8005afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b22:	e021      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b36:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005b68:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	0a5b      	lsrs	r3, r3, #9
 8005b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b72:	3301      	adds	r3, #1
 8005b74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b8c:	ee17 3a90 	vmov	r3, s15
 8005b90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005b92:	e005      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
      break;
 8005b98:	e002      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b9c:	61bb      	str	r3, [r7, #24]
      break;
 8005b9e:	bf00      	nop
  }

  return sysclockfreq;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3724      	adds	r7, #36	@ 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	03d09000 	.word	0x03d09000
 8005bb8:	003d0900 	.word	0x003d0900
 8005bbc:	017d7840 	.word	0x017d7840
 8005bc0:	46000000 	.word	0x46000000
 8005bc4:	4c742400 	.word	0x4c742400
 8005bc8:	4a742400 	.word	0x4a742400
 8005bcc:	4bbebc20 	.word	0x4bbebc20

08005bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005bd6:	f7ff fe81 	bl	80058dc <HAL_RCC_GetSysClockFreq>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	490f      	ldr	r1, [pc, #60]	@ (8005c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005be8:	5ccb      	ldrb	r3, [r1, r3]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	4a09      	ldr	r2, [pc, #36]	@ (8005c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005bfe:	5cd3      	ldrb	r3, [r2, r3]
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0a:	4a07      	ldr	r2, [pc, #28]	@ (8005c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c0e:	4a07      	ldr	r2, [pc, #28]	@ (8005c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c14:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	58024400 	.word	0x58024400
 8005c24:	0800aee8 	.word	0x0800aee8
 8005c28:	24000008 	.word	0x24000008
 8005c2c:	24000004 	.word	0x24000004

08005c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005c34:	f7ff ffcc 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4904      	ldr	r1, [pc, #16]	@ (8005c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c46:	5ccb      	ldrb	r3, [r1, r3]
 8005c48:	f003 031f 	and.w	r3, r3, #31
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	58024400 	.word	0x58024400
 8005c58:	0800aee8 	.word	0x0800aee8

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005c60:	f7ff ffb6 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4904      	ldr	r1, [pc, #16]	@ (8005c84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	0800aee8 	.word	0x0800aee8

08005c88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c8c:	b0c6      	sub	sp, #280	@ 0x118
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005cac:	2500      	movs	r5, #0
 8005cae:	ea54 0305 	orrs.w	r3, r4, r5
 8005cb2:	d049      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cbe:	d02f      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc4:	d828      	bhi.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cca:	d01a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd0:	d822      	bhi.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cda:	d007      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005cdc:	e01c      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cde:	4bab      	ldr	r3, [pc, #684]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	4aaa      	ldr	r2, [pc, #680]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005cea:	e01a      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	2102      	movs	r1, #2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fc25 	bl	8007544 <RCCEx_PLL2_Config>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d00:	e00f      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d06:	3328      	adds	r3, #40	@ 0x28
 8005d08:	2102      	movs	r1, #2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 fccc 	bl	80076a8 <RCCEx_PLL3_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d16:	e004      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d1e:	e000      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10a      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d2a:	4b98      	ldr	r3, [pc, #608]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d38:	4a94      	ldr	r2, [pc, #592]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d3e:	e003      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005d54:	f04f 0900 	mov.w	r9, #0
 8005d58:	ea58 0309 	orrs.w	r3, r8, r9
 8005d5c:	d047      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d82a      	bhi.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d85 	.word	0x08005d85
 8005d74:	08005d93 	.word	0x08005d93
 8005d78:	08005da9 	.word	0x08005da9
 8005d7c:	08005dc7 	.word	0x08005dc7
 8005d80:	08005dc7 	.word	0x08005dc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d84:	4b81      	ldr	r3, [pc, #516]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	4a80      	ldr	r2, [pc, #512]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d90:	e01a      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	3308      	adds	r3, #8
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fbd2 	bl	8007544 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005da6:	e00f      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	3328      	adds	r3, #40	@ 0x28
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fc79 	bl	80076a8 <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e004      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dc4:	e000      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd4:	f023 0107 	bic.w	r1, r3, #7
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	4a6b      	ldr	r2, [pc, #428]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005de4:	e003      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005dfa:	f04f 0b00 	mov.w	fp, #0
 8005dfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e02:	d05b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e0c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e10:	d03b      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005e12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e16:	d834      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e1c:	d037      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e22:	d82e      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e28:	d033      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e2a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e2e:	d828      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e34:	d01a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e3a:	d822      	bhi.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e44:	d007      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005e46:	e01c      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b50      	ldr	r3, [pc, #320]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e54:	e01e      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fb70 	bl	8007544 <RCCEx_PLL2_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e6a:	e013      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	3328      	adds	r3, #40	@ 0x28
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 fc17 	bl	80076a8 <RCCEx_PLL3_Config>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e88:	e004      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e8a:	bf00      	nop
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005eac:	4a37      	ldr	r2, [pc, #220]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005eae:	430b      	orrs	r3, r1
 8005eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005eb2:	e003      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ed2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	d05d      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ee4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005ee8:	d03b      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005eea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005eee:	d834      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005ef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ef4:	d037      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005efa:	d82e      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005efc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f00:	d033      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005f02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f06:	d828      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f0c:	d01a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f12:	d822      	bhi.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f1c:	d007      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005f1e:	e01c      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f20:	4b1a      	ldr	r3, [pc, #104]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f24:	4a19      	ldr	r2, [pc, #100]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f2c:	e01e      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f32:	3308      	adds	r3, #8
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 fb04 	bl	8007544 <RCCEx_PLL2_Config>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f42:	e013      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f48:	3328      	adds	r3, #40	@ 0x28
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fbab 	bl	80076a8 <RCCEx_PLL3_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f58:	e008      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f60:	e004      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10d      	bne.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005f74:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f84:	4a01      	ldr	r2, [pc, #4]	@ (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005f86:	430b      	orrs	r3, r1
 8005f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f8a:	e005      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005fa4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005fae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	d03a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fbe:	2b30      	cmp	r3, #48	@ 0x30
 8005fc0:	d01f      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005fc2:	2b30      	cmp	r3, #48	@ 0x30
 8005fc4:	d819      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d815      	bhi.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d019      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005fd2:	2b10      	cmp	r3, #16
 8005fd4:	d111      	bne.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd6:	4baa      	ldr	r3, [pc, #680]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4aa9      	ldr	r2, [pc, #676]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005fe2:	e011      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	3308      	adds	r3, #8
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 faa9 	bl	8007544 <RCCEx_PLL2_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ff8:	e006      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006000:	e002      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006010:	4b9b      	ldr	r3, [pc, #620]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006014:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601e:	4a98      	ldr	r2, [pc, #608]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006020:	430b      	orrs	r3, r1
 8006022:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006024:	e003      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006026:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800603e:	2300      	movs	r3, #0
 8006040:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006044:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006048:	460b      	mov	r3, r1
 800604a:	4313      	orrs	r3, r2
 800604c:	d051      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006058:	d035      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800605a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800605e:	d82e      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006064:	d031      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006066:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800606a:	d828      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x436>
 800606c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006070:	d01a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006076:	d822      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006080:	d007      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006082:	e01c      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006084:	4b7e      	ldr	r3, [pc, #504]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	4a7d      	ldr	r2, [pc, #500]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800608a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006090:	e01c      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	3308      	adds	r3, #8
 8006098:	2100      	movs	r1, #0
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fa52 	bl	8007544 <RCCEx_PLL2_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060a6:	e011      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ac:	3328      	adds	r3, #40	@ 0x28
 80060ae:	2100      	movs	r1, #0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 faf9 	bl	80076a8 <RCCEx_PLL3_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80060bc:	e006      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060c4:	e002      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060c6:	bf00      	nop
 80060c8:	e000      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80060ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80060d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e2:	4a67      	ldr	r2, [pc, #412]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80060e4:	430b      	orrs	r3, r1
 80060e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80060e8:	e003      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80060f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80060fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006102:	2300      	movs	r3, #0
 8006104:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006108:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800610c:	460b      	mov	r3, r1
 800610e:	4313      	orrs	r3, r2
 8006110:	d053      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800611c:	d033      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800611e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006122:	d82c      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006124:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006128:	d02f      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800612a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800612e:	d826      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006130:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006134:	d02b      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006136:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800613a:	d820      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800613c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006140:	d012      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006146:	d81a      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d022      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006150:	d115      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	3308      	adds	r3, #8
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f9f2 	bl	8007544 <RCCEx_PLL2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006166:	e015      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	3328      	adds	r3, #40	@ 0x28
 800616e:	2101      	movs	r1, #1
 8006170:	4618      	mov	r0, r3
 8006172:	f001 fa99 	bl	80076a8 <RCCEx_PLL3_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800617c:	e00a      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006186:	bf00      	nop
 8006188:	e004      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800619c:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800619e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061aa:	4a35      	ldr	r2, [pc, #212]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80061c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ca:	2300      	movs	r3, #0
 80061cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80061d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061d4:	460b      	mov	r3, r1
 80061d6:	4313      	orrs	r3, r2
 80061d8:	d058      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80061e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061e6:	d033      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80061e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ec:	d82c      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f2:	d02f      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80061f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f8:	d826      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80061fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061fe:	d02b      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006200:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006204:	d820      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800620a:	d012      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006210:	d81a      	bhi.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d022      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800621a:	d115      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800621c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006220:	3308      	adds	r3, #8
 8006222:	2101      	movs	r1, #1
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f98d 	bl	8007544 <RCCEx_PLL2_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006230:	e015      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006236:	3328      	adds	r3, #40	@ 0x28
 8006238:	2101      	movs	r1, #1
 800623a:	4618      	mov	r0, r3
 800623c:	f001 fa34 	bl	80076a8 <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006246:	e00a      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800624e:	e006      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006250:	bf00      	nop
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006254:	bf00      	nop
 8006256:	e002      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006258:	bf00      	nop
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800625c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10e      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800626a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800626e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006276:	4a02      	ldr	r2, [pc, #8]	@ (8006280 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006278:	430b      	orrs	r3, r1
 800627a:	6593      	str	r3, [r2, #88]	@ 0x58
 800627c:	e006      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800627e:	bf00      	nop
 8006280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800628c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80062a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	d037      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80062ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b6:	d00e      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80062b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062bc:	d816      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d018      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80062c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062c6:	d111      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c8:	4bc4      	ldr	r3, [pc, #784]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	4ac3      	ldr	r2, [pc, #780]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062d4:	e00f      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	3308      	adds	r3, #8
 80062dc:	2101      	movs	r1, #1
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f930 	bl	8007544 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80062ea:	e004      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80062f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062fe:	4bb7      	ldr	r3, [pc, #732]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006302:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800630a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800630c:	4ab3      	ldr	r2, [pc, #716]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6513      	str	r3, [r2, #80]	@ 0x50
 8006312:	e003      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006328:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800632c:	2300      	movs	r3, #0
 800632e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006332:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006336:	460b      	mov	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	d039      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800633c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006342:	2b03      	cmp	r3, #3
 8006344:	d81c      	bhi.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006389 	.word	0x08006389
 8006350:	0800635d 	.word	0x0800635d
 8006354:	0800636b 	.word	0x0800636b
 8006358:	08006389 	.word	0x08006389
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4b9f      	ldr	r3, [pc, #636]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	4a9e      	ldr	r2, [pc, #632]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006368:	e00f      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636e:	3308      	adds	r3, #8
 8006370:	2102      	movs	r1, #2
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f8e6 	bl	8007544 <RCCEx_PLL2_Config>
 8006378:	4603      	mov	r3, r0
 800637a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800637e:	e004      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006392:	4b92      	ldr	r3, [pc, #584]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006396:	f023 0103 	bic.w	r1, r3, #3
 800639a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a0:	4a8e      	ldr	r2, [pc, #568]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a2:	430b      	orrs	r3, r1
 80063a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063a6:	e003      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f000 8099 	beq.w	8006504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d2:	4b83      	ldr	r3, [pc, #524]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a82      	ldr	r2, [pc, #520]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80063d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063de:	f7fb f8c7 	bl	8001570 <HAL_GetTick>
 80063e2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e6:	e00b      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e8:	f7fb f8c2 	bl	8001570 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b64      	cmp	r3, #100	@ 0x64
 80063f6:	d903      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80063fe:	e005      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006400:	4b77      	ldr	r3, [pc, #476]	@ (80065e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ed      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800640c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006410:	2b00      	cmp	r3, #0
 8006412:	d173      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006414:	4b71      	ldr	r3, [pc, #452]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006416:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006420:	4053      	eors	r3, r2
 8006422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006426:	2b00      	cmp	r3, #0
 8006428:	d015      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800642a:	4b6c      	ldr	r3, [pc, #432]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006432:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006436:	4b69      	ldr	r3, [pc, #420]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643a:	4a68      	ldr	r2, [pc, #416]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800643c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006440:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006442:	4b66      	ldr	r3, [pc, #408]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006446:	4a65      	ldr	r2, [pc, #404]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800644c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800644e:	4a63      	ldr	r2, [pc, #396]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006454:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800645e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006462:	d118      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006464:	f7fb f884 	bl	8001570 <HAL_GetTick>
 8006468:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800646c:	e00d      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800646e:	f7fb f87f 	bl	8001570 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800647e:	429a      	cmp	r2, r3
 8006480:	d903      	bls.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006488:	e005      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800648a:	4b54      	ldr	r3, [pc, #336]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0eb      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800649a:	2b00      	cmp	r3, #0
 800649c:	d129      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ae:	d10e      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80064b0:	4b4a      	ldr	r3, [pc, #296]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064c0:	091a      	lsrs	r2, r3, #4
 80064c2:	4b48      	ldr	r3, [pc, #288]	@ (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	4a45      	ldr	r2, [pc, #276]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6113      	str	r3, [r2, #16]
 80064cc:	e005      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80064ce:	4b43      	ldr	r3, [pc, #268]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	4a42      	ldr	r2, [pc, #264]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80064d8:	6113      	str	r3, [r2, #16]
 80064da:	4b40      	ldr	r3, [pc, #256]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ea:	4a3c      	ldr	r2, [pc, #240]	@ (80065dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f0:	e008      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f002 0301 	and.w	r3, r2, #1
 8006510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006514:	2300      	movs	r3, #0
 8006516:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800651a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	f000 808f 	beq.w	8006644 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800652c:	2b28      	cmp	r3, #40	@ 0x28
 800652e:	d871      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006530:	a201      	add	r2, pc, #4	@ (adr r2, 8006538 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	0800661d 	.word	0x0800661d
 800653c:	08006615 	.word	0x08006615
 8006540:	08006615 	.word	0x08006615
 8006544:	08006615 	.word	0x08006615
 8006548:	08006615 	.word	0x08006615
 800654c:	08006615 	.word	0x08006615
 8006550:	08006615 	.word	0x08006615
 8006554:	08006615 	.word	0x08006615
 8006558:	080065e9 	.word	0x080065e9
 800655c:	08006615 	.word	0x08006615
 8006560:	08006615 	.word	0x08006615
 8006564:	08006615 	.word	0x08006615
 8006568:	08006615 	.word	0x08006615
 800656c:	08006615 	.word	0x08006615
 8006570:	08006615 	.word	0x08006615
 8006574:	08006615 	.word	0x08006615
 8006578:	080065ff 	.word	0x080065ff
 800657c:	08006615 	.word	0x08006615
 8006580:	08006615 	.word	0x08006615
 8006584:	08006615 	.word	0x08006615
 8006588:	08006615 	.word	0x08006615
 800658c:	08006615 	.word	0x08006615
 8006590:	08006615 	.word	0x08006615
 8006594:	08006615 	.word	0x08006615
 8006598:	0800661d 	.word	0x0800661d
 800659c:	08006615 	.word	0x08006615
 80065a0:	08006615 	.word	0x08006615
 80065a4:	08006615 	.word	0x08006615
 80065a8:	08006615 	.word	0x08006615
 80065ac:	08006615 	.word	0x08006615
 80065b0:	08006615 	.word	0x08006615
 80065b4:	08006615 	.word	0x08006615
 80065b8:	0800661d 	.word	0x0800661d
 80065bc:	08006615 	.word	0x08006615
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006615 	.word	0x08006615
 80065c8:	08006615 	.word	0x08006615
 80065cc:	08006615 	.word	0x08006615
 80065d0:	08006615 	.word	0x08006615
 80065d4:	08006615 	.word	0x08006615
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	58024400 	.word	0x58024400
 80065e0:	58024800 	.word	0x58024800
 80065e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	3308      	adds	r3, #8
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 ffa7 	bl	8007544 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80065fc:	e00f      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006602:	3328      	adds	r3, #40	@ 0x28
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f84e 	bl	80076a8 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006612:	e004      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800661a:	e000      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800661c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006626:	4bbf      	ldr	r3, [pc, #764]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800662e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006634:	4abb      	ldr	r2, [pc, #748]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006636:	430b      	orrs	r3, r1
 8006638:	6553      	str	r3, [r2, #84]	@ 0x54
 800663a:	e003      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006640:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f002 0302 	and.w	r3, r2, #2
 8006650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800665a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d041      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666a:	2b05      	cmp	r3, #5
 800666c:	d824      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800666e:	a201      	add	r2, pc, #4	@ (adr r2, 8006674 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c1 	.word	0x080066c1
 8006678:	0800668d 	.word	0x0800668d
 800667c:	080066a3 	.word	0x080066a3
 8006680:	080066c1 	.word	0x080066c1
 8006684:	080066c1 	.word	0x080066c1
 8006688:	080066c1 	.word	0x080066c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	3308      	adds	r3, #8
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f000 ff55 	bl	8007544 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066a0:	e00f      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	3328      	adds	r3, #40	@ 0x28
 80066a8:	2101      	movs	r1, #1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fffc 	bl	80076a8 <RCCEx_PLL3_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80066b6:	e004      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066be:	e000      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80066c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066ca:	4b96      	ldr	r3, [pc, #600]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ce:	f023 0107 	bic.w	r1, r3, #7
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066d8:	4a92      	ldr	r2, [pc, #584]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80066da:	430b      	orrs	r3, r1
 80066dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80066de:	e003      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 0304 	and.w	r3, r2, #4
 80066f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d044      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006710:	2b05      	cmp	r3, #5
 8006712:	d825      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006714:	a201      	add	r2, pc, #4	@ (adr r2, 800671c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671a:	bf00      	nop
 800671c:	08006769 	.word	0x08006769
 8006720:	08006735 	.word	0x08006735
 8006724:	0800674b 	.word	0x0800674b
 8006728:	08006769 	.word	0x08006769
 800672c:	08006769 	.word	0x08006769
 8006730:	08006769 	.word	0x08006769
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006738:	3308      	adds	r3, #8
 800673a:	2101      	movs	r1, #1
 800673c:	4618      	mov	r0, r3
 800673e:	f000 ff01 	bl	8007544 <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800674a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674e:	3328      	adds	r3, #40	@ 0x28
 8006750:	2101      	movs	r1, #1
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ffa8 	bl	80076a8 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10b      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006772:	4b6c      	ldr	r3, [pc, #432]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	f023 0107 	bic.w	r1, r3, #7
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006782:	4a68      	ldr	r2, [pc, #416]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006784:	430b      	orrs	r3, r1
 8006786:	6593      	str	r3, [r2, #88]	@ 0x58
 8006788:	e003      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f002 0320 	and.w	r3, r2, #32
 800679e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067a2:	2300      	movs	r3, #0
 80067a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d055      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067be:	d033      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067c4:	d82c      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ca:	d02f      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d0:	d826      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067d6:	d02b      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80067d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80067dc:	d820      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e2:	d012      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067e8:	d81a      	bhi.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d022      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80067ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067f2:	d115      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	3308      	adds	r3, #8
 80067fa:	2100      	movs	r1, #0
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 fea1 	bl	8007544 <RCCEx_PLL2_Config>
 8006802:	4603      	mov	r3, r0
 8006804:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006808:	e015      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	3328      	adds	r3, #40	@ 0x28
 8006810:	2102      	movs	r1, #2
 8006812:	4618      	mov	r0, r3
 8006814:	f000 ff48 	bl	80076a8 <RCCEx_PLL3_Config>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800681e:	e00a      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006826:	e006      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006828:	bf00      	nop
 800682a:	e004      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800682c:	bf00      	nop
 800682e:	e002      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006830:	bf00      	nop
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006836:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10b      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800683e:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006842:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800684e:	4a35      	ldr	r2, [pc, #212]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006850:	430b      	orrs	r3, r1
 8006852:	6553      	str	r3, [r2, #84]	@ 0x54
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800685a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800686a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800686e:	2300      	movs	r3, #0
 8006870:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006874:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d058      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800687e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006882:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006886:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800688a:	d033      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800688c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006890:	d82c      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006896:	d02f      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800689c:	d826      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800689e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a2:	d02b      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80068a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068a8:	d820      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ae:	d012      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b4:	d81a      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d022      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80068ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068be:	d115      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c4:	3308      	adds	r3, #8
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fe3b 	bl	8007544 <RCCEx_PLL2_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068d4:	e015      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068da:	3328      	adds	r3, #40	@ 0x28
 80068dc:	2102      	movs	r1, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fee2 	bl	80076a8 <RCCEx_PLL3_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80068ea:	e00a      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068f2:	e006      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068f4:	bf00      	nop
 80068f6:	e004      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068f8:	bf00      	nop
 80068fa:	e002      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80068fc:	bf00      	nop
 80068fe:	e000      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10e      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800690c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800691a:	4a02      	ldr	r2, [pc, #8]	@ (8006924 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800691c:	430b      	orrs	r3, r1
 800691e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006920:	e006      	b.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800692c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800693c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006946:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800694a:	460b      	mov	r3, r1
 800694c:	4313      	orrs	r3, r2
 800694e:	d055      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006954:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006958:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800695c:	d033      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800695e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006962:	d82c      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006968:	d02f      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800696a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800696e:	d826      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006970:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006974:	d02b      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006976:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800697a:	d820      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800697c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006980:	d012      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006982:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006986:	d81a      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d022      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800698c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006990:	d115      	bne.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	3308      	adds	r3, #8
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fdd2 	bl	8007544 <RCCEx_PLL2_Config>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069a6:	e015      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	3328      	adds	r3, #40	@ 0x28
 80069ae:	2102      	movs	r1, #2
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fe79 	bl	80076a8 <RCCEx_PLL3_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80069bc:	e00a      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069c4:	e006      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069c6:	bf00      	nop
 80069c8:	e004      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069ca:	bf00      	nop
 80069cc:	e002      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069ce:	bf00      	nop
 80069d0:	e000      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80069d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069dc:	4ba0      	ldr	r3, [pc, #640]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069ec:	4a9c      	ldr	r2, [pc, #624]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069ee:	430b      	orrs	r3, r1
 80069f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f2:	e003      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	f002 0308 	and.w	r3, r2, #8
 8006a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006a12:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006a16:	460b      	mov	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	d01e      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a28:	d10c      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	3328      	adds	r3, #40	@ 0x28
 8006a30:	2102      	movs	r1, #2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fe38 	bl	80076a8 <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006a44:	4b86      	ldr	r3, [pc, #536]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a54:	4a82      	ldr	r2, [pc, #520]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a56:	430b      	orrs	r3, r1
 8006a58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f002 0310 	and.w	r3, r2, #16
 8006a66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a70:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d01e      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a86:	d10c      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	3328      	adds	r3, #40	@ 0x28
 8006a8e:	2102      	movs	r1, #2
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fe09 	bl	80076a8 <RCCEx_PLL3_Config>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006aca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	d03e      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae0:	d022      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae6:	d81b      	bhi.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af0:	d00b      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006af2:	e015      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	3308      	adds	r3, #8
 8006afa:	2100      	movs	r1, #0
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fd21 	bl	8007544 <RCCEx_PLL2_Config>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b08:	e00f      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	3328      	adds	r3, #40	@ 0x28
 8006b10:	2102      	movs	r1, #2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fdc8 	bl	80076a8 <RCCEx_PLL3_Config>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006b1e:	e004      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b26:	e000      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b32:	4b4b      	ldr	r3, [pc, #300]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b42:	4a47      	ldr	r2, [pc, #284]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b48:	e003      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b60:	2300      	movs	r3, #0
 8006b62:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	d03b      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b7a:	d01f      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006b7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b80:	d818      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006b82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b86:	d003      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006b88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b8c:	d007      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006b8e:	e011      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b90:	4b33      	ldr	r3, [pc, #204]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b94:	4a32      	ldr	r2, [pc, #200]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006b9c:	e00f      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba2:	3328      	adds	r3, #40	@ 0x28
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fd7e 	bl	80076a8 <RCCEx_PLL3_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006bb2:	e004      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bba:	e000      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bc6:	4b26      	ldr	r3, [pc, #152]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd6:	4a22      	ldr	r2, [pc, #136]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bf8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d034      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c10:	d007      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006c12:	e011      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c20:	e00e      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c26:	3308      	adds	r3, #8
 8006c28:	2102      	movs	r1, #2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fc8a 	bl	8007544 <RCCEx_PLL2_Config>
 8006c30:	4603      	mov	r3, r0
 8006c32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10d      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c48:	4b05      	ldr	r3, [pc, #20]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c56:	4a02      	ldr	r2, [pc, #8]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c5c:	e006      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006c5e:	bf00      	nop
 8006c60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006c78:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006c82:	460b      	mov	r3, r1
 8006c84:	4313      	orrs	r3, r2
 8006c86:	d00c      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8c:	3328      	adds	r3, #40	@ 0x28
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fd09 	bl	80076a8 <RCCEx_PLL3_Config>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006cae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cb4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	d036      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc8:	d018      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006cca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cce:	d811      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd4:	d014      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cda:	d80b      	bhi.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce6:	4bb7      	ldr	r3, [pc, #732]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cea:	4ab6      	ldr	r2, [pc, #728]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006cf2:	e008      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cfa:	e004      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006cfc:	bf00      	nop
 8006cfe:	e002      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d00:	bf00      	nop
 8006d02:	e000      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d0e:	4bad      	ldr	r3, [pc, #692]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d1c:	4aa9      	ldr	r2, [pc, #676]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8006d22:	e003      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d48:	4b9e      	ldr	r3, [pc, #632]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d56:	4a9b      	ldr	r2, [pc, #620]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006d72:	460b      	mov	r3, r1
 8006d74:	4313      	orrs	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d78:	4b92      	ldr	r3, [pc, #584]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d86:	4a8f      	ldr	r2, [pc, #572]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006da2:	460b      	mov	r3, r1
 8006da4:	4313      	orrs	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006da8:	4b86      	ldr	r3, [pc, #536]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	4a85      	ldr	r2, [pc, #532]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006db2:	6113      	str	r3, [r2, #16]
 8006db4:	4b83      	ldr	r3, [pc, #524]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006db6:	6919      	ldr	r1, [r3, #16]
 8006db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dc0:	4a80      	ldr	r2, [pc, #512]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4313      	orrs	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006de2:	4b78      	ldr	r3, [pc, #480]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df0:	4a74      	ldr	r2, [pc, #464]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006df2:	430b      	orrs	r3, r1
 8006df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e12:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e22:	4a68      	ldr	r2, [pc, #416]	@ (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	2100      	movs	r1, #0
 8006e32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4313      	orrs	r3, r2
 8006e42:	d011      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb79 	bl	8007544 <RCCEx_PLL2_Config>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	2100      	movs	r1, #0
 8006e72:	6239      	str	r1, [r7, #32]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e7a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4313      	orrs	r3, r2
 8006e82:	d011      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e88:	3308      	adds	r3, #8
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb59 	bl	8007544 <RCCEx_PLL2_Config>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	61b9      	str	r1, [r7, #24]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	d011      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb39 	bl	8007544 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6139      	str	r1, [r7, #16]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006efe:	460b      	mov	r3, r1
 8006f00:	4313      	orrs	r3, r2
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f08:	3328      	adds	r3, #40	@ 0x28
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fbcb 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006f18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	2100      	movs	r1, #0
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d011      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	3328      	adds	r3, #40	@ 0x28
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fbab 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	2100      	movs	r1, #0
 8006f72:	6039      	str	r1, [r7, #0]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4313      	orrs	r3, r2
 8006f82:	d011      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f88:	3328      	adds	r3, #40	@ 0x28
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fb8b 	bl	80076a8 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006fa8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e000      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400

08006fc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fcc:	f7fe fe00 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b06      	ldr	r3, [pc, #24]	@ (8006fec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	091b      	lsrs	r3, r3, #4
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	4904      	ldr	r1, [pc, #16]	@ (8006ff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	0800aee8 	.word	0x0800aee8

08006ff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b089      	sub	sp, #36	@ 0x24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007006:	4b9f      	ldr	r3, [pc, #636]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700a:	0b1b      	lsrs	r3, r3, #12
 800700c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007012:	4b9c      	ldr	r3, [pc, #624]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	091b      	lsrs	r3, r3, #4
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800701e:	4b99      	ldr	r3, [pc, #612]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	08db      	lsrs	r3, r3, #3
 8007024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8111 	beq.w	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b02      	cmp	r3, #2
 8007046:	f000 8083 	beq.w	8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	2b02      	cmp	r3, #2
 800704e:	f200 80a1 	bhi.w	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d056      	beq.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800705e:	e099      	b.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007060:	4b88      	ldr	r3, [pc, #544]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02d      	beq.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706c:	4b85      	ldr	r3, [pc, #532]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	4a84      	ldr	r2, [pc, #528]	@ (8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
 800707c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007096:	4b7b      	ldr	r3, [pc, #492]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070c6:	e087      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070da:	4b6a      	ldr	r3, [pc, #424]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e2:	ee07 3a90 	vmov	s15, r3
 80070e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710a:	e065      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007116:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800711a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800711e:	4b59      	ldr	r3, [pc, #356]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007132:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800713e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800714e:	e043      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b48      	ldr	r3, [pc, #288]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007192:	e021      	b.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b37      	ldr	r3, [pc, #220]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800728c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071dc:	0a5b      	lsrs	r3, r3, #9
 80071de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071fe:	ee17 2a90 	vmov	r2, s15
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007206:	4b1f      	ldr	r3, [pc, #124]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720a:	0c1b      	lsrs	r3, r3, #16
 800720c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007218:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800721c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007220:	edd7 6a07 	vldr	s13, [r7, #28]
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 2a90 	vmov	r2, s15
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007234:	4b13      	ldr	r3, [pc, #76]	@ (8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	0e1b      	lsrs	r3, r3, #24
 800723a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800724a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800724e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725a:	ee17 2a90 	vmov	r2, s15
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007262:	e008      	b.n	8007276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	609a      	str	r2, [r3, #8]
}
 8007276:	bf00      	nop
 8007278:	3724      	adds	r7, #36	@ 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	58024400 	.word	0x58024400
 8007288:	03d09000 	.word	0x03d09000
 800728c:	46000000 	.word	0x46000000
 8007290:	4c742400 	.word	0x4c742400
 8007294:	4a742400 	.word	0x4a742400
 8007298:	4bbebc20 	.word	0x4bbebc20

0800729c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	@ 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072a4:	4ba1      	ldr	r3, [pc, #644]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072ae:	4b9f      	ldr	r3, [pc, #636]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	0d1b      	lsrs	r3, r3, #20
 80072b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ba:	4b9c      	ldr	r3, [pc, #624]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072c6:	4b99      	ldr	r3, [pc, #612]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	08db      	lsrs	r3, r3, #3
 80072cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8111 	beq.w	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	f000 8083 	beq.w	80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	f200 80a1 	bhi.w	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d056      	beq.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007306:	e099      	b.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007308:	4b88      	ldr	r3, [pc, #544]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0320 	and.w	r3, r3, #32
 8007310:	2b00      	cmp	r3, #0
 8007312:	d02d      	beq.n	8007370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007314:	4b85      	ldr	r3, [pc, #532]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	4a84      	ldr	r2, [pc, #528]	@ (8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	ee07 3a90 	vmov	s15, r3
 800732c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733e:	4b7b      	ldr	r3, [pc, #492]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007346:	ee07 3a90 	vmov	s15, r3
 800734a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007352:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800735e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800736e:	e087      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800737e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007382:	4b6a      	ldr	r3, [pc, #424]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007392:	ed97 6a03 	vldr	s12, [r7, #12]
 8007396:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800739a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800739e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073b2:	e065      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c6:	4b59      	ldr	r3, [pc, #356]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073f6:	e043      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007402:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b48      	ldr	r3, [pc, #288]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800743a:	e021      	b.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800753c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b37      	ldr	r3, [pc, #220]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007480:	4b2a      	ldr	r3, [pc, #168]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007484:	0a5b      	lsrs	r3, r3, #9
 8007486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749a:	edd7 6a07 	vldr	s13, [r7, #28]
 800749e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	ee17 2a90 	vmov	r2, s15
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074ae:	4b1f      	ldr	r3, [pc, #124]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	0c1b      	lsrs	r3, r3, #16
 80074b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074d4:	ee17 2a90 	vmov	r2, s15
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074dc:	4b13      	ldr	r3, [pc, #76]	@ (800752c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e0:	0e1b      	lsrs	r3, r3, #24
 80074e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800750a:	e008      	b.n	800751e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
}
 800751e:	bf00      	nop
 8007520:	3724      	adds	r7, #36	@ 0x24
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	58024400 	.word	0x58024400
 8007530:	03d09000 	.word	0x03d09000
 8007534:	46000000 	.word	0x46000000
 8007538:	4c742400 	.word	0x4c742400
 800753c:	4a742400 	.word	0x4a742400
 8007540:	4bbebc20 	.word	0x4bbebc20

08007544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007552:	4b53      	ldr	r3, [pc, #332]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b03      	cmp	r3, #3
 800755c:	d101      	bne.n	8007562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e099      	b.n	8007696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007562:	4b4f      	ldr	r3, [pc, #316]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a4e      	ldr	r2, [pc, #312]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007568:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800756c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800756e:	f7f9 ffff 	bl	8001570 <HAL_GetTick>
 8007572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007574:	e008      	b.n	8007588 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007576:	f7f9 fffb 	bl	8001570 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	2b02      	cmp	r3, #2
 8007582:	d901      	bls.n	8007588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e086      	b.n	8007696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007588:	4b45      	ldr	r3, [pc, #276]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f0      	bne.n	8007576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007594:	4b42      	ldr	r3, [pc, #264]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	031b      	lsls	r3, r3, #12
 80075a2:	493f      	ldr	r1, [pc, #252]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	025b      	lsls	r3, r3, #9
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	041b      	lsls	r3, r3, #16
 80075c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	061b      	lsls	r3, r3, #24
 80075d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075d8:	4931      	ldr	r1, [pc, #196]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075de:	4b30      	ldr	r3, [pc, #192]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	492d      	ldr	r1, [pc, #180]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075f0:	4b2b      	ldr	r3, [pc, #172]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	f023 0220 	bic.w	r2, r3, #32
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	4928      	ldr	r1, [pc, #160]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007602:	4b27      	ldr	r3, [pc, #156]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	4a26      	ldr	r2, [pc, #152]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007608:	f023 0310 	bic.w	r3, r3, #16
 800760c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800760e:	4b24      	ldr	r3, [pc, #144]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007612:	4b24      	ldr	r3, [pc, #144]	@ (80076a4 <RCCEx_PLL2_Config+0x160>)
 8007614:	4013      	ands	r3, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	69d2      	ldr	r2, [r2, #28]
 800761a:	00d2      	lsls	r2, r2, #3
 800761c:	4920      	ldr	r1, [pc, #128]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800761e:	4313      	orrs	r3, r2
 8007620:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007622:	4b1f      	ldr	r3, [pc, #124]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	4a1e      	ldr	r2, [pc, #120]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007628:	f043 0310 	orr.w	r3, r3, #16
 800762c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007634:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007638:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800763a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800763e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007640:	e00f      	b.n	8007662 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d106      	bne.n	8007656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007648:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800764a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800764c:	4a14      	ldr	r2, [pc, #80]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800764e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007654:	e005      	b.n	8007662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	4a11      	ldr	r2, [pc, #68]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800765c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007662:	4b0f      	ldr	r3, [pc, #60]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a0e      	ldr	r2, [pc, #56]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 8007668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800766c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766e:	f7f9 ff7f 	bl	8001570 <HAL_GetTick>
 8007672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007674:	e008      	b.n	8007688 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007676:	f7f9 ff7b 	bl	8001570 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e006      	b.n	8007696 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007688:	4b05      	ldr	r3, [pc, #20]	@ (80076a0 <RCCEx_PLL2_Config+0x15c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	ffff0007 	.word	0xffff0007

080076a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076b6:	4b53      	ldr	r3, [pc, #332]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d101      	bne.n	80076c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e099      	b.n	80077fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d2:	f7f9 ff4d 	bl	8001570 <HAL_GetTick>
 80076d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076d8:	e008      	b.n	80076ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076da:	f7f9 ff49 	bl	8001570 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d901      	bls.n	80076ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e086      	b.n	80077fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076ec:	4b45      	ldr	r3, [pc, #276]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f0      	bne.n	80076da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076f8:	4b42      	ldr	r3, [pc, #264]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	051b      	lsls	r3, r3, #20
 8007706:	493f      	ldr	r1, [pc, #252]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	628b      	str	r3, [r1, #40]	@ 0x28
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	3b01      	subs	r3, #1
 8007712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	3b01      	subs	r3, #1
 800771c:	025b      	lsls	r3, r3, #9
 800771e:	b29b      	uxth	r3, r3
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	3b01      	subs	r3, #1
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	3b01      	subs	r3, #1
 8007736:	061b      	lsls	r3, r3, #24
 8007738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800773c:	4931      	ldr	r1, [pc, #196]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007742:	4b30      	ldr	r3, [pc, #192]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	492d      	ldr	r1, [pc, #180]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007750:	4313      	orrs	r3, r2
 8007752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007754:	4b2b      	ldr	r3, [pc, #172]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	4928      	ldr	r1, [pc, #160]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007762:	4313      	orrs	r3, r2
 8007764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007766:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776a:	4a26      	ldr	r2, [pc, #152]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 800776c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007772:	4b24      	ldr	r3, [pc, #144]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007776:	4b24      	ldr	r3, [pc, #144]	@ (8007808 <RCCEx_PLL3_Config+0x160>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	69d2      	ldr	r2, [r2, #28]
 800777e:	00d2      	lsls	r2, r2, #3
 8007780:	4920      	ldr	r1, [pc, #128]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007782:	4313      	orrs	r3, r2
 8007784:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007786:	4b1f      	ldr	r3, [pc, #124]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 8007788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778a:	4a1e      	ldr	r2, [pc, #120]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 800778c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	4a19      	ldr	r2, [pc, #100]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 800779e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80077a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077a4:	e00f      	b.n	80077c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d106      	bne.n	80077ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077ac:	4b15      	ldr	r3, [pc, #84]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b0:	4a14      	ldr	r2, [pc, #80]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80077b8:	e005      	b.n	80077c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077ba:	4b12      	ldr	r3, [pc, #72]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	4a11      	ldr	r2, [pc, #68]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7f9 fecd 	bl	8001570 <HAL_GetTick>
 80077d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d8:	e008      	b.n	80077ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077da:	f7f9 fec9 	bl	8001570 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e006      	b.n	80077fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077ec:	4b05      	ldr	r3, [pc, #20]	@ (8007804 <RCCEx_PLL3_Config+0x15c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0f0      	beq.n	80077da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	58024400 	.word	0x58024400
 8007808:	ffff0007 	.word	0xffff0007

0800780c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e049      	b.n	80078b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7f9 fb40 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fc58 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d001      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e05e      	b.n	8007992 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a2b      	ldr	r2, [pc, #172]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xe4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d02c      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fe:	d027      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a27      	ldr	r2, [pc, #156]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d022      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a26      	ldr	r2, [pc, #152]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xec>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d01d      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a24      	ldr	r2, [pc, #144]	@ (80079ac <HAL_TIM_Base_Start_IT+0xf0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d018      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a23      	ldr	r2, [pc, #140]	@ (80079b0 <HAL_TIM_Base_Start_IT+0xf4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a21      	ldr	r2, [pc, #132]	@ (80079b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a20      	ldr	r2, [pc, #128]	@ (80079b8 <HAL_TIM_Base_Start_IT+0xfc>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <HAL_TIM_Base_Start_IT+0x100>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x94>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <HAL_TIM_Base_Start_IT+0x104>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d115      	bne.n	800797c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689a      	ldr	r2, [r3, #8]
 8007956:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <HAL_TIM_Base_Start_IT+0x108>)
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d015      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007968:	d011      	beq.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
 8007978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797a:	e008      	b.n	800798e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e000      	b.n	8007990 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40010400 	.word	0x40010400
 80079b4:	40001800 	.word	0x40001800
 80079b8:	40014000 	.word	0x40014000
 80079bc:	4000e000 	.word	0x4000e000
 80079c0:	4000e400 	.word	0x4000e400
 80079c4:	00010007 	.word	0x00010007

080079c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e049      	b.n	8007a6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f841 	bl	8007a76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f000 fb7a 	bl	8008100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d020      	beq.n	8007aee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d01b      	beq.n	8007aee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f06f 0202 	mvn.w	r2, #2
 8007abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f003 0303 	and.w	r3, r3, #3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 faf5 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007ada:	e005      	b.n	8007ae8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fae7 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 faf8 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d020      	beq.n	8007b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d01b      	beq.n	8007b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f06f 0204 	mvn.w	r2, #4
 8007b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 facf 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007b26:	e005      	b.n	8007b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fac1 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fad2 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d020      	beq.n	8007b86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f06f 0208 	mvn.w	r2, #8
 8007b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 faa9 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007b72:	e005      	b.n	8007b80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa9b 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 faac 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d020      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0310 	and.w	r3, r3, #16
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01b      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0210 	mvn.w	r2, #16
 8007ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fa83 	bl	80080c4 <HAL_TIM_IC_CaptureCallback>
 8007bbe:	e005      	b.n	8007bcc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fa75 	bl	80080b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa86 	bl	80080d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00c      	beq.n	8007bf6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d007      	beq.n	8007bf6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f06f 0201 	mvn.w	r2, #1
 8007bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7f9 f851 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00c      	beq.n	8007c24 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 ff3a 	bl	8008a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00c      	beq.n	8007c48 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 ff32 	bl	8008aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00c      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa40 	bl	80080ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00c      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d007      	beq.n	8007c90 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0220 	mvn.w	r2, #32
 8007c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fefa 	bl	8008a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e0ff      	b.n	8007eb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b14      	cmp	r3, #20
 8007cc2:	f200 80f0 	bhi.w	8007ea6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007ea7 	.word	0x08007ea7
 8007cd4:	08007ea7 	.word	0x08007ea7
 8007cd8:	08007ea7 	.word	0x08007ea7
 8007cdc:	08007d61 	.word	0x08007d61
 8007ce0:	08007ea7 	.word	0x08007ea7
 8007ce4:	08007ea7 	.word	0x08007ea7
 8007ce8:	08007ea7 	.word	0x08007ea7
 8007cec:	08007da3 	.word	0x08007da3
 8007cf0:	08007ea7 	.word	0x08007ea7
 8007cf4:	08007ea7 	.word	0x08007ea7
 8007cf8:	08007ea7 	.word	0x08007ea7
 8007cfc:	08007de3 	.word	0x08007de3
 8007d00:	08007ea7 	.word	0x08007ea7
 8007d04:	08007ea7 	.word	0x08007ea7
 8007d08:	08007ea7 	.word	0x08007ea7
 8007d0c:	08007e25 	.word	0x08007e25
 8007d10:	08007ea7 	.word	0x08007ea7
 8007d14:	08007ea7 	.word	0x08007ea7
 8007d18:	08007ea7 	.word	0x08007ea7
 8007d1c:	08007e65 	.word	0x08007e65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fa9c 	bl	8008264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0208 	orr.w	r2, r2, #8
 8007d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0204 	bic.w	r2, r2, #4
 8007d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6999      	ldr	r1, [r3, #24]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	619a      	str	r2, [r3, #24]
      break;
 8007d5e:	e0a5      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fb0c 	bl	8008384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	021a      	lsls	r2, r3, #8
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	619a      	str	r2, [r3, #24]
      break;
 8007da0:	e084      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fb75 	bl	8008498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0208 	orr.w	r2, r2, #8
 8007dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0204 	bic.w	r2, r2, #4
 8007dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	61da      	str	r2, [r3, #28]
      break;
 8007de0:	e064      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fbdd 	bl	80085a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69d9      	ldr	r1, [r3, #28]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	021a      	lsls	r2, r3, #8
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	61da      	str	r2, [r3, #28]
      break;
 8007e22:	e043      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fc26 	bl	800867c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0208 	orr.w	r2, r2, #8
 8007e3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0204 	bic.w	r2, r2, #4
 8007e4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007e62:	e023      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fc6a 	bl	8008744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	021a      	lsls	r2, r3, #8
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ea4:	e002      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIM_ConfigClockSource+0x1c>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e0dc      	b.n	8008096 <HAL_TIM_ConfigClockSource+0x1d6>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80080a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a64      	ldr	r2, [pc, #400]	@ (80080a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	f000 80a9 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f18:	4a62      	ldr	r2, [pc, #392]	@ (80080a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f200 80ae 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f20:	4a61      	ldr	r2, [pc, #388]	@ (80080a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f000 80a1 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f28:	4a5f      	ldr	r2, [pc, #380]	@ (80080a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	f200 80a6 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f30:	4a5e      	ldr	r2, [pc, #376]	@ (80080ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	f000 8099 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f38:	4a5c      	ldr	r2, [pc, #368]	@ (80080ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	f200 809e 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f44:	f000 8091 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007f4c:	f200 8096 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f54:	f000 8089 	beq.w	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5c:	f200 808e 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f64:	d03e      	beq.n	8007fe4 <HAL_TIM_ConfigClockSource+0x124>
 8007f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6a:	f200 8087 	bhi.w	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f72:	f000 8086 	beq.w	8008082 <HAL_TIM_ConfigClockSource+0x1c2>
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7a:	d87f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f7c:	2b70      	cmp	r3, #112	@ 0x70
 8007f7e:	d01a      	beq.n	8007fb6 <HAL_TIM_ConfigClockSource+0xf6>
 8007f80:	2b70      	cmp	r3, #112	@ 0x70
 8007f82:	d87b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f84:	2b60      	cmp	r3, #96	@ 0x60
 8007f86:	d050      	beq.n	800802a <HAL_TIM_ConfigClockSource+0x16a>
 8007f88:	2b60      	cmp	r3, #96	@ 0x60
 8007f8a:	d877      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f8c:	2b50      	cmp	r3, #80	@ 0x50
 8007f8e:	d03c      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x14a>
 8007f90:	2b50      	cmp	r3, #80	@ 0x50
 8007f92:	d873      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f94:	2b40      	cmp	r3, #64	@ 0x40
 8007f96:	d058      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x18a>
 8007f98:	2b40      	cmp	r3, #64	@ 0x40
 8007f9a:	d86f      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007f9c:	2b30      	cmp	r3, #48	@ 0x30
 8007f9e:	d064      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fa0:	2b30      	cmp	r3, #48	@ 0x30
 8007fa2:	d86b      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d060      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d867      	bhi.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d05c      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d05a      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x1aa>
 8007fb4:	e062      	b.n	800807c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007fc6:	f000 fca1 	bl	800890c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	609a      	str	r2, [r3, #8]
      break;
 8007fe2:	e04f      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ff4:	f000 fc8a 	bl	800890c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689a      	ldr	r2, [r3, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008006:	609a      	str	r2, [r3, #8]
      break;
 8008008:	e03c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008016:	461a      	mov	r2, r3
 8008018:	f000 fbfa 	bl	8008810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2150      	movs	r1, #80	@ 0x50
 8008022:	4618      	mov	r0, r3
 8008024:	f000 fc54 	bl	80088d0 <TIM_ITRx_SetConfig>
      break;
 8008028:	e02c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008036:	461a      	mov	r2, r3
 8008038:	f000 fc19 	bl	800886e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2160      	movs	r1, #96	@ 0x60
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fc44 	bl	80088d0 <TIM_ITRx_SetConfig>
      break;
 8008048:	e01c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008056:	461a      	mov	r2, r3
 8008058:	f000 fbda 	bl	8008810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2140      	movs	r1, #64	@ 0x40
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fc34 	bl	80088d0 <TIM_ITRx_SetConfig>
      break;
 8008068:	e00c      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f000 fc2b 	bl	80088d0 <TIM_ITRx_SetConfig>
      break;
 800807a:	e003      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	73fb      	strb	r3, [r7, #15]
      break;
 8008080:	e000      	b.n	8008084 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	ffceff88 	.word	0xffceff88
 80080a4:	00100040 	.word	0x00100040
 80080a8:	00100030 	.word	0x00100030
 80080ac:	00100020 	.word	0x00100020

080080b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a4a      	ldr	r2, [pc, #296]	@ (800823c <TIM_Base_SetConfig+0x13c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811e:	d00f      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a47      	ldr	r2, [pc, #284]	@ (8008240 <TIM_Base_SetConfig+0x140>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a46      	ldr	r2, [pc, #280]	@ (8008244 <TIM_Base_SetConfig+0x144>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a45      	ldr	r2, [pc, #276]	@ (8008248 <TIM_Base_SetConfig+0x148>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a44      	ldr	r2, [pc, #272]	@ (800824c <TIM_Base_SetConfig+0x14c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a39      	ldr	r2, [pc, #228]	@ (800823c <TIM_Base_SetConfig+0x13c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d027      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008160:	d023      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a36      	ldr	r2, [pc, #216]	@ (8008240 <TIM_Base_SetConfig+0x140>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d01f      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a35      	ldr	r2, [pc, #212]	@ (8008244 <TIM_Base_SetConfig+0x144>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01b      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a34      	ldr	r2, [pc, #208]	@ (8008248 <TIM_Base_SetConfig+0x148>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d017      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a33      	ldr	r2, [pc, #204]	@ (800824c <TIM_Base_SetConfig+0x14c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a32      	ldr	r2, [pc, #200]	@ (8008250 <TIM_Base_SetConfig+0x150>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00f      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a31      	ldr	r2, [pc, #196]	@ (8008254 <TIM_Base_SetConfig+0x154>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00b      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a30      	ldr	r2, [pc, #192]	@ (8008258 <TIM_Base_SetConfig+0x158>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d007      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a2f      	ldr	r2, [pc, #188]	@ (800825c <TIM_Base_SetConfig+0x15c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d003      	beq.n	80081aa <TIM_Base_SetConfig+0xaa>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008260 <TIM_Base_SetConfig+0x160>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d108      	bne.n	80081bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a16      	ldr	r2, [pc, #88]	@ (800823c <TIM_Base_SetConfig+0x13c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00f      	beq.n	8008208 <TIM_Base_SetConfig+0x108>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a18      	ldr	r2, [pc, #96]	@ (800824c <TIM_Base_SetConfig+0x14c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00b      	beq.n	8008208 <TIM_Base_SetConfig+0x108>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a17      	ldr	r2, [pc, #92]	@ (8008250 <TIM_Base_SetConfig+0x150>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d007      	beq.n	8008208 <TIM_Base_SetConfig+0x108>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a16      	ldr	r2, [pc, #88]	@ (8008254 <TIM_Base_SetConfig+0x154>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0x108>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a15      	ldr	r2, [pc, #84]	@ (8008258 <TIM_Base_SetConfig+0x158>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d103      	bne.n	8008210 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b01      	cmp	r3, #1
 8008220:	d105      	bne.n	800822e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f023 0201 	bic.w	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]
  }
}
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	40010000 	.word	0x40010000
 8008240:	40000400 	.word	0x40000400
 8008244:	40000800 	.word	0x40000800
 8008248:	40000c00 	.word	0x40000c00
 800824c:	40010400 	.word	0x40010400
 8008250:	40014000 	.word	0x40014000
 8008254:	40014400 	.word	0x40014400
 8008258:	40014800 	.word	0x40014800
 800825c:	4000e000 	.word	0x4000e000
 8008260:	4000e400 	.word	0x4000e400

08008264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	f023 0201 	bic.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4b37      	ldr	r3, [pc, #220]	@ (800836c <TIM_OC1_SetConfig+0x108>)
 8008290:	4013      	ands	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0302 	bic.w	r3, r3, #2
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008370 <TIM_OC1_SetConfig+0x10c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00f      	beq.n	80082e0 <TIM_OC1_SetConfig+0x7c>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008374 <TIM_OC1_SetConfig+0x110>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00b      	beq.n	80082e0 <TIM_OC1_SetConfig+0x7c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a2b      	ldr	r2, [pc, #172]	@ (8008378 <TIM_OC1_SetConfig+0x114>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d007      	beq.n	80082e0 <TIM_OC1_SetConfig+0x7c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a2a      	ldr	r2, [pc, #168]	@ (800837c <TIM_OC1_SetConfig+0x118>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC1_SetConfig+0x7c>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a29      	ldr	r2, [pc, #164]	@ (8008380 <TIM_OC1_SetConfig+0x11c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10c      	bne.n	80082fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0308 	bic.w	r3, r3, #8
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f023 0304 	bic.w	r3, r3, #4
 80082f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008370 <TIM_OC1_SetConfig+0x10c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00f      	beq.n	8008322 <TIM_OC1_SetConfig+0xbe>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1b      	ldr	r2, [pc, #108]	@ (8008374 <TIM_OC1_SetConfig+0x110>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00b      	beq.n	8008322 <TIM_OC1_SetConfig+0xbe>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1a      	ldr	r2, [pc, #104]	@ (8008378 <TIM_OC1_SetConfig+0x114>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d007      	beq.n	8008322 <TIM_OC1_SetConfig+0xbe>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a19      	ldr	r2, [pc, #100]	@ (800837c <TIM_OC1_SetConfig+0x118>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d003      	beq.n	8008322 <TIM_OC1_SetConfig+0xbe>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <TIM_OC1_SetConfig+0x11c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d111      	bne.n	8008346 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	621a      	str	r2, [r3, #32]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	fffeff8f 	.word	0xfffeff8f
 8008370:	40010000 	.word	0x40010000
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40014400 	.word	0x40014400
 8008380:	40014800 	.word	0x40014800

08008384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f023 0210 	bic.w	r2, r3, #16
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4b34      	ldr	r3, [pc, #208]	@ (8008480 <TIM_OC2_SetConfig+0xfc>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	f023 0320 	bic.w	r3, r3, #32
 80083ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	011b      	lsls	r3, r3, #4
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	4313      	orrs	r3, r2
 80083da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a29      	ldr	r2, [pc, #164]	@ (8008484 <TIM_OC2_SetConfig+0x100>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d003      	beq.n	80083ec <TIM_OC2_SetConfig+0x68>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4a28      	ldr	r2, [pc, #160]	@ (8008488 <TIM_OC2_SetConfig+0x104>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d10d      	bne.n	8008408 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008406:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1e      	ldr	r2, [pc, #120]	@ (8008484 <TIM_OC2_SetConfig+0x100>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00f      	beq.n	8008430 <TIM_OC2_SetConfig+0xac>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1d      	ldr	r2, [pc, #116]	@ (8008488 <TIM_OC2_SetConfig+0x104>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00b      	beq.n	8008430 <TIM_OC2_SetConfig+0xac>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a1c      	ldr	r2, [pc, #112]	@ (800848c <TIM_OC2_SetConfig+0x108>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d007      	beq.n	8008430 <TIM_OC2_SetConfig+0xac>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1b      	ldr	r2, [pc, #108]	@ (8008490 <TIM_OC2_SetConfig+0x10c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d003      	beq.n	8008430 <TIM_OC2_SetConfig+0xac>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4a1a      	ldr	r2, [pc, #104]	@ (8008494 <TIM_OC2_SetConfig+0x110>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d113      	bne.n	8008458 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800843e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	feff8fff 	.word	0xfeff8fff
 8008484:	40010000 	.word	0x40010000
 8008488:	40010400 	.word	0x40010400
 800848c:	40014000 	.word	0x40014000
 8008490:	40014400 	.word	0x40014400
 8008494:	40014800 	.word	0x40014800

08008498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4b33      	ldr	r3, [pc, #204]	@ (8008590 <TIM_OC3_SetConfig+0xf8>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0303 	bic.w	r3, r3, #3
 80084ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a28      	ldr	r2, [pc, #160]	@ (8008594 <TIM_OC3_SetConfig+0xfc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_OC3_SetConfig+0x66>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a27      	ldr	r2, [pc, #156]	@ (8008598 <TIM_OC3_SetConfig+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d10d      	bne.n	800851a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	021b      	lsls	r3, r3, #8
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a1d      	ldr	r2, [pc, #116]	@ (8008594 <TIM_OC3_SetConfig+0xfc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00f      	beq.n	8008542 <TIM_OC3_SetConfig+0xaa>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1c      	ldr	r2, [pc, #112]	@ (8008598 <TIM_OC3_SetConfig+0x100>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <TIM_OC3_SetConfig+0xaa>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1b      	ldr	r2, [pc, #108]	@ (800859c <TIM_OC3_SetConfig+0x104>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <TIM_OC3_SetConfig+0xaa>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a1a      	ldr	r2, [pc, #104]	@ (80085a0 <TIM_OC3_SetConfig+0x108>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d003      	beq.n	8008542 <TIM_OC3_SetConfig+0xaa>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a19      	ldr	r2, [pc, #100]	@ (80085a4 <TIM_OC3_SetConfig+0x10c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d113      	bne.n	800856a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	621a      	str	r2, [r3, #32]
}
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	fffeff8f 	.word	0xfffeff8f
 8008594:	40010000 	.word	0x40010000
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4b24      	ldr	r3, [pc, #144]	@ (8008664 <TIM_OC4_SetConfig+0xbc>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	031b      	lsls	r3, r3, #12
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a19      	ldr	r2, [pc, #100]	@ (8008668 <TIM_OC4_SetConfig+0xc0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00f      	beq.n	8008628 <TIM_OC4_SetConfig+0x80>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a18      	ldr	r2, [pc, #96]	@ (800866c <TIM_OC4_SetConfig+0xc4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00b      	beq.n	8008628 <TIM_OC4_SetConfig+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a17      	ldr	r2, [pc, #92]	@ (8008670 <TIM_OC4_SetConfig+0xc8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <TIM_OC4_SetConfig+0x80>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a16      	ldr	r2, [pc, #88]	@ (8008674 <TIM_OC4_SetConfig+0xcc>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_OC4_SetConfig+0x80>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <TIM_OC4_SetConfig+0xd0>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d109      	bne.n	800863c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800862e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	019b      	lsls	r3, r3, #6
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	feff8fff 	.word	0xfeff8fff
 8008668:	40010000 	.word	0x40010000
 800866c:	40010400 	.word	0x40010400
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800

0800867c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4b21      	ldr	r3, [pc, #132]	@ (800872c <TIM_OC5_SetConfig+0xb0>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80086bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	041b      	lsls	r3, r3, #16
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a18      	ldr	r2, [pc, #96]	@ (8008730 <TIM_OC5_SetConfig+0xb4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00f      	beq.n	80086f2 <TIM_OC5_SetConfig+0x76>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a17      	ldr	r2, [pc, #92]	@ (8008734 <TIM_OC5_SetConfig+0xb8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00b      	beq.n	80086f2 <TIM_OC5_SetConfig+0x76>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a16      	ldr	r2, [pc, #88]	@ (8008738 <TIM_OC5_SetConfig+0xbc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d007      	beq.n	80086f2 <TIM_OC5_SetConfig+0x76>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a15      	ldr	r2, [pc, #84]	@ (800873c <TIM_OC5_SetConfig+0xc0>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d003      	beq.n	80086f2 <TIM_OC5_SetConfig+0x76>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a14      	ldr	r2, [pc, #80]	@ (8008740 <TIM_OC5_SetConfig+0xc4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d109      	bne.n	8008706 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	621a      	str	r2, [r3, #32]
}
 8008720:	bf00      	nop
 8008722:	371c      	adds	r7, #28
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	fffeff8f 	.word	0xfffeff8f
 8008730:	40010000 	.word	0x40010000
 8008734:	40010400 	.word	0x40010400
 8008738:	40014000 	.word	0x40014000
 800873c:	40014400 	.word	0x40014400
 8008740:	40014800 	.word	0x40014800

08008744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4b22      	ldr	r3, [pc, #136]	@ (80087f8 <TIM_OC6_SetConfig+0xb4>)
 8008770:	4013      	ands	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	051b      	lsls	r3, r3, #20
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a19      	ldr	r2, [pc, #100]	@ (80087fc <TIM_OC6_SetConfig+0xb8>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00f      	beq.n	80087bc <TIM_OC6_SetConfig+0x78>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <TIM_OC6_SetConfig+0xbc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d00b      	beq.n	80087bc <TIM_OC6_SetConfig+0x78>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a17      	ldr	r2, [pc, #92]	@ (8008804 <TIM_OC6_SetConfig+0xc0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d007      	beq.n	80087bc <TIM_OC6_SetConfig+0x78>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a16      	ldr	r2, [pc, #88]	@ (8008808 <TIM_OC6_SetConfig+0xc4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_OC6_SetConfig+0x78>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a15      	ldr	r2, [pc, #84]	@ (800880c <TIM_OC6_SetConfig+0xc8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d109      	bne.n	80087d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	029b      	lsls	r3, r3, #10
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	621a      	str	r2, [r3, #32]
}
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	feff8fff 	.word	0xfeff8fff
 80087fc:	40010000 	.word	0x40010000
 8008800:	40010400 	.word	0x40010400
 8008804:	40014000 	.word	0x40014000
 8008808:	40014400 	.word	0x40014400
 800880c:	40014800 	.word	0x40014800

08008810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800883a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	011b      	lsls	r3, r3, #4
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f023 030a 	bic.w	r3, r3, #10
 800884c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	621a      	str	r2, [r3, #32]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800886e:	b480      	push	{r7}
 8008870:	b087      	sub	sp, #28
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f023 0210 	bic.w	r2, r3, #16
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	031b      	lsls	r3, r3, #12
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	621a      	str	r2, [r3, #32]
}
 80088c2:	bf00      	nop
 80088c4:	371c      	adds	r7, #28
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
	...

080088d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <TIM_ITRx_SetConfig+0x38>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f043 0307 	orr.w	r3, r3, #7
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	609a      	str	r2, [r3, #8]
}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	ffcfff8f 	.word	0xffcfff8f

0800890c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	021a      	lsls	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	431a      	orrs	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4313      	orrs	r3, r2
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	609a      	str	r2, [r3, #8]
}
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008960:	2302      	movs	r3, #2
 8008962:	e077      	b.n	8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a35      	ldr	r2, [pc, #212]	@ (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d004      	beq.n	8008998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a34      	ldr	r2, [pc, #208]	@ (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d108      	bne.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800899e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a25      	ldr	r2, [pc, #148]	@ (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d02c      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d6:	d027      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a22      	ldr	r2, [pc, #136]	@ (8008a68 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d022      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a21      	ldr	r2, [pc, #132]	@ (8008a6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d01d      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008a70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d018      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d013      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	@ (8008a74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d00e      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8008a78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d009      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d004      	beq.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a17      	ldr	r2, [pc, #92]	@ (8008a80 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d10c      	bne.n	8008a42 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	40010000 	.word	0x40010000
 8008a64:	40010400 	.word	0x40010400
 8008a68:	40000400 	.word	0x40000400
 8008a6c:	40000800 	.word	0x40000800
 8008a70:	40000c00 	.word	0x40000c00
 8008a74:	40001800 	.word	0x40001800
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	4000e000 	.word	0x4000e000
 8008a80:	4000e400 	.word	0x4000e400

08008a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e04a      	b.n	8008b68 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d106      	bne.n	8008aea <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7f8 fa0d 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2224      	movs	r2, #36	@ 0x24
 8008aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 fba6 	bl	800a25c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fd37 	bl	8009584 <UART_SetConfig>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e023      	b.n	8008b68 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689a      	ldr	r2, [r3, #8]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008b3e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0208 	orr.w	r2, r2, #8
 8008b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fc1d 	bl	800a3a0 <UART_CheckIdleState>
 8008b66:	4603      	mov	r3, r0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	@ 0x28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d167      	bne.n	8008c58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <HAL_UART_Transmit_DMA+0x24>
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e060      	b.n	8008c5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	88fa      	ldrh	r2, [r7, #6]
 8008ba2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	88fa      	ldrh	r2, [r7, #6]
 8008baa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2221      	movs	r2, #33	@ 0x21
 8008bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d028      	beq.n	8008c18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bca:	4a26      	ldr	r2, [pc, #152]	@ (8008c64 <HAL_UART_Transmit_DMA+0xf4>)
 8008bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd2:	4a25      	ldr	r2, [pc, #148]	@ (8008c68 <HAL_UART_Transmit_DMA+0xf8>)
 8008bd4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bda:	4a24      	ldr	r2, [pc, #144]	@ (8008c6c <HAL_UART_Transmit_DMA+0xfc>)
 8008bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be2:	2200      	movs	r2, #0
 8008be4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3328      	adds	r3, #40	@ 0x28
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	88fb      	ldrh	r3, [r7, #6]
 8008bfa:	f7f9 fbcf 	bl	800239c <HAL_DMA_Start_IT>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2210      	movs	r2, #16
 8008c08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e020      	b.n	8008c5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2240      	movs	r2, #64	@ 0x40
 8008c1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	e853 3f00 	ldrex	r3, [r3]
 8008c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c40:	623a      	str	r2, [r7, #32]
 8008c42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	69f9      	ldr	r1, [r7, #28]
 8008c46:	6a3a      	ldr	r2, [r7, #32]
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e5      	bne.n	8008c20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	e000      	b.n	8008c5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008c58:	2302      	movs	r3, #2
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3728      	adds	r7, #40	@ 0x28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	0800a86d 	.word	0x0800a86d
 8008c68:	0800a903 	.word	0x0800a903
 8008c6c:	0800aa85 	.word	0x0800aa85

08008c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b0ba      	sub	sp, #232	@ 0xe8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11b      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 8377 	beq.w	80093c8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	4798      	blx	r3
      }
      return;
 8008ce2:	e371      	b.n	80093c8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 8123 	beq.w	8008f34 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008cee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8008f28 <HAL_UART_IRQHandler+0x2b8>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8008f2c <HAL_UART_IRQHandler+0x2bc>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 8116 	beq.w	8008f34 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d011      	beq.n	8008d38 <HAL_UART_IRQHandler+0xc8>
 8008d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2201      	movs	r2, #1
 8008d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2e:	f043 0201 	orr.w	r2, r3, #1
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d011      	beq.n	8008d68 <HAL_UART_IRQHandler+0xf8>
 8008d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00b      	beq.n	8008d68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2202      	movs	r2, #2
 8008d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d5e:	f043 0204 	orr.w	r2, r3, #4
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d011      	beq.n	8008d98 <HAL_UART_IRQHandler+0x128>
 8008d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00b      	beq.n	8008d98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2204      	movs	r2, #4
 8008d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d017      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d105      	bne.n	8008dbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008db4:	4b5c      	ldr	r3, [pc, #368]	@ (8008f28 <HAL_UART_IRQHandler+0x2b8>)
 8008db6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dca:	f043 0208 	orr.w	r2, r3, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d012      	beq.n	8008e06 <HAL_UART_IRQHandler+0x196>
 8008de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00c      	beq.n	8008e06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dfc:	f043 0220 	orr.w	r2, r3, #32
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 82dd 	beq.w	80093cc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d013      	beq.n	8008e46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e5a:	2b40      	cmp	r3, #64	@ 0x40
 8008e5c:	d005      	beq.n	8008e6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d054      	beq.n	8008f14 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fc98 	bl	800a7a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d146      	bne.n	8008f0c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3308      	adds	r3, #8
 8008ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1d9      	bne.n	8008e7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d017      	beq.n	8008f04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eda:	4a15      	ldr	r2, [pc, #84]	@ (8008f30 <HAL_UART_IRQHandler+0x2c0>)
 8008edc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f9 ffe1 	bl	8002eac <HAL_DMA_Abort_IT>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d019      	beq.n	8008f24 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008efe:	4610      	mov	r0, r2
 8008f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	e00f      	b.n	8008f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa8b 	bl	8009420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f0a:	e00b      	b.n	8008f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fa87 	bl	8009420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f12:	e007      	b.n	8008f24 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa83 	bl	8009420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008f22:	e253      	b.n	80093cc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	bf00      	nop
    return;
 8008f26:	e251      	b.n	80093cc <HAL_UART_IRQHandler+0x75c>
 8008f28:	10000001 	.word	0x10000001
 8008f2c:	04000120 	.word	0x04000120
 8008f30:	0800ab05 	.word	0x0800ab05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	f040 81e7 	bne.w	800930c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f42:	f003 0310 	and.w	r3, r3, #16
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 81e0 	beq.w	800930c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 81d9 	beq.w	800930c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2210      	movs	r2, #16
 8008f60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	f040 8151 	bne.w	8009214 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a96      	ldr	r2, [pc, #600]	@ (80091d4 <HAL_UART_IRQHandler+0x564>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d068      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a93      	ldr	r2, [pc, #588]	@ (80091d8 <HAL_UART_IRQHandler+0x568>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d061      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a91      	ldr	r2, [pc, #580]	@ (80091dc <HAL_UART_IRQHandler+0x56c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d05a      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a8e      	ldr	r2, [pc, #568]	@ (80091e0 <HAL_UART_IRQHandler+0x570>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d053      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a8c      	ldr	r2, [pc, #560]	@ (80091e4 <HAL_UART_IRQHandler+0x574>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d04c      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a89      	ldr	r2, [pc, #548]	@ (80091e8 <HAL_UART_IRQHandler+0x578>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d045      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a87      	ldr	r2, [pc, #540]	@ (80091ec <HAL_UART_IRQHandler+0x57c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d03e      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a84      	ldr	r2, [pc, #528]	@ (80091f0 <HAL_UART_IRQHandler+0x580>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d037      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a82      	ldr	r2, [pc, #520]	@ (80091f4 <HAL_UART_IRQHandler+0x584>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d030      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80091f8 <HAL_UART_IRQHandler+0x588>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d029      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a7d      	ldr	r2, [pc, #500]	@ (80091fc <HAL_UART_IRQHandler+0x58c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d022      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a7a      	ldr	r2, [pc, #488]	@ (8009200 <HAL_UART_IRQHandler+0x590>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01b      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a78      	ldr	r2, [pc, #480]	@ (8009204 <HAL_UART_IRQHandler+0x594>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d014      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a75      	ldr	r2, [pc, #468]	@ (8009208 <HAL_UART_IRQHandler+0x598>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d00d      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a73      	ldr	r2, [pc, #460]	@ (800920c <HAL_UART_IRQHandler+0x59c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d006      	beq.n	8009052 <HAL_UART_IRQHandler+0x3e2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a70      	ldr	r2, [pc, #448]	@ (8009210 <HAL_UART_IRQHandler+0x5a0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d106      	bne.n	8009060 <HAL_UART_IRQHandler+0x3f0>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	b29b      	uxth	r3, r3
 800905e:	e005      	b.n	800906c <HAL_UART_IRQHandler+0x3fc>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009070:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 81ab 	beq.w	80093d0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009084:	429a      	cmp	r2, r3
 8009086:	f080 81a3 	bcs.w	80093d0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009090:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090a0:	f000 8087 	beq.w	80091b2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1da      	bne.n	80090a4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3308      	adds	r3, #8
 800910e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009112:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009116:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800911a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e1      	bne.n	80090ee <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800913a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800913c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800914e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009150:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800915c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e3      	bne.n	800912a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800917e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009180:	f023 0310 	bic.w	r3, r3, #16
 8009184:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	461a      	mov	r2, r3
 800918e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009192:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009194:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e4      	bne.n	8009170 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f9 fb5f 	bl	8002870 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7f7 fdc7 	bl	8000d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091d2:	e0fd      	b.n	80093d0 <HAL_UART_IRQHandler+0x760>
 80091d4:	40020010 	.word	0x40020010
 80091d8:	40020028 	.word	0x40020028
 80091dc:	40020040 	.word	0x40020040
 80091e0:	40020058 	.word	0x40020058
 80091e4:	40020070 	.word	0x40020070
 80091e8:	40020088 	.word	0x40020088
 80091ec:	400200a0 	.word	0x400200a0
 80091f0:	400200b8 	.word	0x400200b8
 80091f4:	40020410 	.word	0x40020410
 80091f8:	40020428 	.word	0x40020428
 80091fc:	40020440 	.word	0x40020440
 8009200:	40020458 	.word	0x40020458
 8009204:	40020470 	.word	0x40020470
 8009208:	40020488 	.word	0x40020488
 800920c:	400204a0 	.word	0x400204a0
 8009210:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009220:	b29b      	uxth	r3, r3
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 80cf 	beq.w	80093d4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80ca 	beq.w	80093d4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800924e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009254:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009262:	647b      	str	r3, [r7, #68]	@ 0x44
 8009264:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e4      	bne.n	8009240 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	623b      	str	r3, [r7, #32]
   return(result);
 8009286:	6a3a      	ldr	r2, [r7, #32]
 8009288:	4b55      	ldr	r3, [pc, #340]	@ (80093e0 <HAL_UART_IRQHandler+0x770>)
 800928a:	4013      	ands	r3, r2
 800928c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3308      	adds	r3, #8
 8009296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800929a:	633a      	str	r2, [r7, #48]	@ 0x30
 800929c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e3      	bne.n	8009276 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 0310 	bic.w	r3, r3, #16
 80092d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	69b9      	ldr	r1, [r7, #24]
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	617b      	str	r3, [r7, #20]
   return(result);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e4      	bne.n	80092c2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7f7 fd2b 	bl	8000d60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800930a:	e063      	b.n	80093d4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800930c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00e      	beq.n	8009336 <HAL_UART_IRQHandler+0x6c6>
 8009318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800931c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d008      	beq.n	8009336 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800932c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fc29 	bl	800ab86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009334:	e051      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800933a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800933e:	2b00      	cmp	r3, #0
 8009340:	d014      	beq.n	800936c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800934e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d008      	beq.n	800936c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800935e:	2b00      	cmp	r3, #0
 8009360:	d03a      	beq.n	80093d8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
    }
    return;
 800936a:	e035      	b.n	80093d8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800936c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	d009      	beq.n	800938c <HAL_UART_IRQHandler+0x71c>
 8009378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800937c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fbd3 	bl	800ab30 <UART_EndTransmit_IT>
    return;
 800938a:	e026      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800938c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <HAL_UART_IRQHandler+0x73c>
 8009398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800939c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fc02 	bl	800abae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093aa:	e016      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d010      	beq.n	80093da <HAL_UART_IRQHandler+0x76a>
 80093b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da0c      	bge.n	80093da <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 fbea 	bl	800ab9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093c6:	e008      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
      return;
 80093c8:	bf00      	nop
 80093ca:	e006      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
    return;
 80093cc:	bf00      	nop
 80093ce:	e004      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
      return;
 80093d0:	bf00      	nop
 80093d2:	e002      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
      return;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <HAL_UART_IRQHandler+0x76a>
    return;
 80093d8:	bf00      	nop
  }
}
 80093da:	37e8      	adds	r7, #232	@ 0xe8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	effffffe 	.word	0xeffffffe

080093e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b08f      	sub	sp, #60	@ 0x3c
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8009446:	2302      	movs	r3, #2
 8009448:	e042      	b.n	80094d0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2224      	movs	r2, #36	@ 0x24
 8009456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	61fb      	str	r3, [r7, #28]
   return(result);
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	f023 030c 	bic.w	r3, r3, #12
 800946e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800947a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800947e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e6      	bne.n	800945a <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	60bb      	str	r3, [r7, #8]
   return(result);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f043 0308 	orr.w	r3, r3, #8
 80094a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	613b      	str	r3, [r7, #16]
   return(result);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	373c      	adds	r7, #60	@ 0x3c
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80094dc:	b480      	push	{r7}
 80094de:	b08f      	sub	sp, #60	@ 0x3c
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d101      	bne.n	80094f2 <HAL_HalfDuplex_EnableReceiver+0x16>
 80094ee:	2302      	movs	r3, #2
 80094f0:	e042      	b.n	8009578 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2224      	movs	r2, #36	@ 0x24
 80094fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f023 030c 	bic.w	r3, r3, #12
 8009516:	637b      	str	r3, [r7, #52]	@ 0x34
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009522:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e6      	bne.n	8009502 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	e853 3f00 	ldrex	r3, [r3]
 8009540:	60bb      	str	r3, [r7, #8]
   return(result);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f043 0304 	orr.w	r3, r3, #4
 8009548:	633b      	str	r3, [r7, #48]	@ 0x30
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	61bb      	str	r3, [r7, #24]
 8009554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	613b      	str	r3, [r7, #16]
   return(result);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1e6      	bne.n	8009534 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	373c      	adds	r7, #60	@ 0x3c
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009588:	b092      	sub	sp, #72	@ 0x48
 800958a:	af00      	add	r7, sp, #0
 800958c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	431a      	orrs	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	69db      	ldr	r3, [r3, #28]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4bbe      	ldr	r3, [pc, #760]	@ (80098ac <UART_SetConfig+0x328>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095bc:	430b      	orrs	r3, r1
 80095be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4ab3      	ldr	r2, [pc, #716]	@ (80098b0 <UART_SetConfig+0x32c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d004      	beq.n	80095f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095ec:	4313      	orrs	r3, r2
 80095ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	4baf      	ldr	r3, [pc, #700]	@ (80098b4 <UART_SetConfig+0x330>)
 80095f8:	4013      	ands	r3, r2
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009600:	430b      	orrs	r3, r1
 8009602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960a:	f023 010f 	bic.w	r1, r3, #15
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4aa6      	ldr	r2, [pc, #664]	@ (80098b8 <UART_SetConfig+0x334>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d177      	bne.n	8009714 <UART_SetConfig+0x190>
 8009624:	4ba5      	ldr	r3, [pc, #660]	@ (80098bc <UART_SetConfig+0x338>)
 8009626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009628:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800962c:	2b28      	cmp	r3, #40	@ 0x28
 800962e:	d86d      	bhi.n	800970c <UART_SetConfig+0x188>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <UART_SetConfig+0xb4>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	080096dd 	.word	0x080096dd
 800963c:	0800970d 	.word	0x0800970d
 8009640:	0800970d 	.word	0x0800970d
 8009644:	0800970d 	.word	0x0800970d
 8009648:	0800970d 	.word	0x0800970d
 800964c:	0800970d 	.word	0x0800970d
 8009650:	0800970d 	.word	0x0800970d
 8009654:	0800970d 	.word	0x0800970d
 8009658:	080096e5 	.word	0x080096e5
 800965c:	0800970d 	.word	0x0800970d
 8009660:	0800970d 	.word	0x0800970d
 8009664:	0800970d 	.word	0x0800970d
 8009668:	0800970d 	.word	0x0800970d
 800966c:	0800970d 	.word	0x0800970d
 8009670:	0800970d 	.word	0x0800970d
 8009674:	0800970d 	.word	0x0800970d
 8009678:	080096ed 	.word	0x080096ed
 800967c:	0800970d 	.word	0x0800970d
 8009680:	0800970d 	.word	0x0800970d
 8009684:	0800970d 	.word	0x0800970d
 8009688:	0800970d 	.word	0x0800970d
 800968c:	0800970d 	.word	0x0800970d
 8009690:	0800970d 	.word	0x0800970d
 8009694:	0800970d 	.word	0x0800970d
 8009698:	080096f5 	.word	0x080096f5
 800969c:	0800970d 	.word	0x0800970d
 80096a0:	0800970d 	.word	0x0800970d
 80096a4:	0800970d 	.word	0x0800970d
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	0800970d 	.word	0x0800970d
 80096b0:	0800970d 	.word	0x0800970d
 80096b4:	0800970d 	.word	0x0800970d
 80096b8:	080096fd 	.word	0x080096fd
 80096bc:	0800970d 	.word	0x0800970d
 80096c0:	0800970d 	.word	0x0800970d
 80096c4:	0800970d 	.word	0x0800970d
 80096c8:	0800970d 	.word	0x0800970d
 80096cc:	0800970d 	.word	0x0800970d
 80096d0:	0800970d 	.word	0x0800970d
 80096d4:	0800970d 	.word	0x0800970d
 80096d8:	08009705 	.word	0x08009705
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e326      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80096e4:	2304      	movs	r3, #4
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e322      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80096ec:	2308      	movs	r3, #8
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e31e      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80096f4:	2310      	movs	r3, #16
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e31a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80096fc:	2320      	movs	r3, #32
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009702:	e316      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009704:	2340      	movs	r3, #64	@ 0x40
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800970a:	e312      	b.n	8009d32 <UART_SetConfig+0x7ae>
 800970c:	2380      	movs	r3, #128	@ 0x80
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009712:	e30e      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a69      	ldr	r2, [pc, #420]	@ (80098c0 <UART_SetConfig+0x33c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d130      	bne.n	8009780 <UART_SetConfig+0x1fc>
 800971e:	4b67      	ldr	r3, [pc, #412]	@ (80098bc <UART_SetConfig+0x338>)
 8009720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b05      	cmp	r3, #5
 8009728:	d826      	bhi.n	8009778 <UART_SetConfig+0x1f4>
 800972a:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <UART_SetConfig+0x1ac>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009749 	.word	0x08009749
 8009734:	08009751 	.word	0x08009751
 8009738:	08009759 	.word	0x08009759
 800973c:	08009761 	.word	0x08009761
 8009740:	08009769 	.word	0x08009769
 8009744:	08009771 	.word	0x08009771
 8009748:	2300      	movs	r3, #0
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e2f0      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009750:	2304      	movs	r3, #4
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e2ec      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009758:	2308      	movs	r3, #8
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e2e8      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009760:	2310      	movs	r3, #16
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e2e4      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009768:	2320      	movs	r3, #32
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800976e:	e2e0      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009770:	2340      	movs	r3, #64	@ 0x40
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009776:	e2dc      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009778:	2380      	movs	r3, #128	@ 0x80
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800977e:	e2d8      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a4f      	ldr	r2, [pc, #316]	@ (80098c4 <UART_SetConfig+0x340>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d130      	bne.n	80097ec <UART_SetConfig+0x268>
 800978a:	4b4c      	ldr	r3, [pc, #304]	@ (80098bc <UART_SetConfig+0x338>)
 800978c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	2b05      	cmp	r3, #5
 8009794:	d826      	bhi.n	80097e4 <UART_SetConfig+0x260>
 8009796:	a201      	add	r2, pc, #4	@ (adr r2, 800979c <UART_SetConfig+0x218>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097b5 	.word	0x080097b5
 80097a0:	080097bd 	.word	0x080097bd
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	080097cd 	.word	0x080097cd
 80097ac:	080097d5 	.word	0x080097d5
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	2300      	movs	r3, #0
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e2ba      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097bc:	2304      	movs	r3, #4
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e2b6      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097c4:	2308      	movs	r3, #8
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e2b2      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097cc:	2310      	movs	r3, #16
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e2ae      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097d4:	2320      	movs	r3, #32
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097da:	e2aa      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097dc:	2340      	movs	r3, #64	@ 0x40
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097e2:	e2a6      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097e4:	2380      	movs	r3, #128	@ 0x80
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ea:	e2a2      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a35      	ldr	r2, [pc, #212]	@ (80098c8 <UART_SetConfig+0x344>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d130      	bne.n	8009858 <UART_SetConfig+0x2d4>
 80097f6:	4b31      	ldr	r3, [pc, #196]	@ (80098bc <UART_SetConfig+0x338>)
 80097f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d826      	bhi.n	8009850 <UART_SetConfig+0x2cc>
 8009802:	a201      	add	r2, pc, #4	@ (adr r2, 8009808 <UART_SetConfig+0x284>)
 8009804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009808:	08009821 	.word	0x08009821
 800980c:	08009829 	.word	0x08009829
 8009810:	08009831 	.word	0x08009831
 8009814:	08009839 	.word	0x08009839
 8009818:	08009841 	.word	0x08009841
 800981c:	08009849 	.word	0x08009849
 8009820:	2300      	movs	r3, #0
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009826:	e284      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009828:	2304      	movs	r3, #4
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982e:	e280      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009830:	2308      	movs	r3, #8
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009836:	e27c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009838:	2310      	movs	r3, #16
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800983e:	e278      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009840:	2320      	movs	r3, #32
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009846:	e274      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009848:	2340      	movs	r3, #64	@ 0x40
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800984e:	e270      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009850:	2380      	movs	r3, #128	@ 0x80
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009856:	e26c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1b      	ldr	r2, [pc, #108]	@ (80098cc <UART_SetConfig+0x348>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d142      	bne.n	80098e8 <UART_SetConfig+0x364>
 8009862:	4b16      	ldr	r3, [pc, #88]	@ (80098bc <UART_SetConfig+0x338>)
 8009864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009866:	f003 0307 	and.w	r3, r3, #7
 800986a:	2b05      	cmp	r3, #5
 800986c:	d838      	bhi.n	80098e0 <UART_SetConfig+0x35c>
 800986e:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <UART_SetConfig+0x2f0>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	0800988d 	.word	0x0800988d
 8009878:	08009895 	.word	0x08009895
 800987c:	0800989d 	.word	0x0800989d
 8009880:	080098a5 	.word	0x080098a5
 8009884:	080098d1 	.word	0x080098d1
 8009888:	080098d9 	.word	0x080098d9
 800988c:	2300      	movs	r3, #0
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009892:	e24e      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009894:	2304      	movs	r3, #4
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989a:	e24a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 800989c:	2308      	movs	r3, #8
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a2:	e246      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80098a4:	2310      	movs	r3, #16
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098aa:	e242      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80098ac:	cfff69f3 	.word	0xcfff69f3
 80098b0:	58000c00 	.word	0x58000c00
 80098b4:	11fff4ff 	.word	0x11fff4ff
 80098b8:	40011000 	.word	0x40011000
 80098bc:	58024400 	.word	0x58024400
 80098c0:	40004400 	.word	0x40004400
 80098c4:	40004800 	.word	0x40004800
 80098c8:	40004c00 	.word	0x40004c00
 80098cc:	40005000 	.word	0x40005000
 80098d0:	2320      	movs	r3, #32
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d6:	e22c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80098d8:	2340      	movs	r3, #64	@ 0x40
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098de:	e228      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e6:	e224      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4ab1      	ldr	r2, [pc, #708]	@ (8009bb4 <UART_SetConfig+0x630>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d176      	bne.n	80099e0 <UART_SetConfig+0x45c>
 80098f2:	4bb1      	ldr	r3, [pc, #708]	@ (8009bb8 <UART_SetConfig+0x634>)
 80098f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098fa:	2b28      	cmp	r3, #40	@ 0x28
 80098fc:	d86c      	bhi.n	80099d8 <UART_SetConfig+0x454>
 80098fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009904 <UART_SetConfig+0x380>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	080099a9 	.word	0x080099a9
 8009908:	080099d9 	.word	0x080099d9
 800990c:	080099d9 	.word	0x080099d9
 8009910:	080099d9 	.word	0x080099d9
 8009914:	080099d9 	.word	0x080099d9
 8009918:	080099d9 	.word	0x080099d9
 800991c:	080099d9 	.word	0x080099d9
 8009920:	080099d9 	.word	0x080099d9
 8009924:	080099b1 	.word	0x080099b1
 8009928:	080099d9 	.word	0x080099d9
 800992c:	080099d9 	.word	0x080099d9
 8009930:	080099d9 	.word	0x080099d9
 8009934:	080099d9 	.word	0x080099d9
 8009938:	080099d9 	.word	0x080099d9
 800993c:	080099d9 	.word	0x080099d9
 8009940:	080099d9 	.word	0x080099d9
 8009944:	080099b9 	.word	0x080099b9
 8009948:	080099d9 	.word	0x080099d9
 800994c:	080099d9 	.word	0x080099d9
 8009950:	080099d9 	.word	0x080099d9
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099d9 	.word	0x080099d9
 800995c:	080099d9 	.word	0x080099d9
 8009960:	080099d9 	.word	0x080099d9
 8009964:	080099c1 	.word	0x080099c1
 8009968:	080099d9 	.word	0x080099d9
 800996c:	080099d9 	.word	0x080099d9
 8009970:	080099d9 	.word	0x080099d9
 8009974:	080099d9 	.word	0x080099d9
 8009978:	080099d9 	.word	0x080099d9
 800997c:	080099d9 	.word	0x080099d9
 8009980:	080099d9 	.word	0x080099d9
 8009984:	080099c9 	.word	0x080099c9
 8009988:	080099d9 	.word	0x080099d9
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099d9 	.word	0x080099d9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099d9 	.word	0x080099d9
 80099a0:	080099d9 	.word	0x080099d9
 80099a4:	080099d1 	.word	0x080099d1
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ae:	e1c0      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099b0:	2304      	movs	r3, #4
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b6:	e1bc      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099b8:	2308      	movs	r3, #8
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099be:	e1b8      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099c0:	2310      	movs	r3, #16
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c6:	e1b4      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099c8:	2320      	movs	r3, #32
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ce:	e1b0      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099d0:	2340      	movs	r3, #64	@ 0x40
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d6:	e1ac      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099d8:	2380      	movs	r3, #128	@ 0x80
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099de:	e1a8      	b.n	8009d32 <UART_SetConfig+0x7ae>
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a75      	ldr	r2, [pc, #468]	@ (8009bbc <UART_SetConfig+0x638>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d130      	bne.n	8009a4c <UART_SetConfig+0x4c8>
 80099ea:	4b73      	ldr	r3, [pc, #460]	@ (8009bb8 <UART_SetConfig+0x634>)
 80099ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ee:	f003 0307 	and.w	r3, r3, #7
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	d826      	bhi.n	8009a44 <UART_SetConfig+0x4c0>
 80099f6:	a201      	add	r2, pc, #4	@ (adr r2, 80099fc <UART_SetConfig+0x478>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a15 	.word	0x08009a15
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	08009a25 	.word	0x08009a25
 8009a08:	08009a2d 	.word	0x08009a2d
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	2300      	movs	r3, #0
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1a:	e18a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a22:	e186      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a24:	2308      	movs	r3, #8
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2a:	e182      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a32:	e17e      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a34:	2320      	movs	r3, #32
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3a:	e17a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a3c:	2340      	movs	r3, #64	@ 0x40
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a42:	e176      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a44:	2380      	movs	r3, #128	@ 0x80
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a4a:	e172      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a5b      	ldr	r2, [pc, #364]	@ (8009bc0 <UART_SetConfig+0x63c>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d130      	bne.n	8009ab8 <UART_SetConfig+0x534>
 8009a56:	4b58      	ldr	r3, [pc, #352]	@ (8009bb8 <UART_SetConfig+0x634>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d826      	bhi.n	8009ab0 <UART_SetConfig+0x52c>
 8009a62:	a201      	add	r2, pc, #4	@ (adr r2, 8009a68 <UART_SetConfig+0x4e4>)
 8009a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a68:	08009a81 	.word	0x08009a81
 8009a6c:	08009a89 	.word	0x08009a89
 8009a70:	08009a91 	.word	0x08009a91
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009aa1 	.word	0x08009aa1
 8009a7c:	08009aa9 	.word	0x08009aa9
 8009a80:	2300      	movs	r3, #0
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a86:	e154      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a88:	2304      	movs	r3, #4
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a8e:	e150      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a90:	2308      	movs	r3, #8
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a96:	e14c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a9e:	e148      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009aa0:	2320      	movs	r3, #32
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aa6:	e144      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009aa8:	2340      	movs	r3, #64	@ 0x40
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009aae:	e140      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009ab0:	2380      	movs	r3, #128	@ 0x80
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ab6:	e13c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a41      	ldr	r2, [pc, #260]	@ (8009bc4 <UART_SetConfig+0x640>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	f040 8082 	bne.w	8009bc8 <UART_SetConfig+0x644>
 8009ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8009bb8 <UART_SetConfig+0x634>)
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009acc:	2b28      	cmp	r3, #40	@ 0x28
 8009ace:	d86d      	bhi.n	8009bac <UART_SetConfig+0x628>
 8009ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad8 <UART_SetConfig+0x554>)
 8009ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad6:	bf00      	nop
 8009ad8:	08009b7d 	.word	0x08009b7d
 8009adc:	08009bad 	.word	0x08009bad
 8009ae0:	08009bad 	.word	0x08009bad
 8009ae4:	08009bad 	.word	0x08009bad
 8009ae8:	08009bad 	.word	0x08009bad
 8009aec:	08009bad 	.word	0x08009bad
 8009af0:	08009bad 	.word	0x08009bad
 8009af4:	08009bad 	.word	0x08009bad
 8009af8:	08009b85 	.word	0x08009b85
 8009afc:	08009bad 	.word	0x08009bad
 8009b00:	08009bad 	.word	0x08009bad
 8009b04:	08009bad 	.word	0x08009bad
 8009b08:	08009bad 	.word	0x08009bad
 8009b0c:	08009bad 	.word	0x08009bad
 8009b10:	08009bad 	.word	0x08009bad
 8009b14:	08009bad 	.word	0x08009bad
 8009b18:	08009b8d 	.word	0x08009b8d
 8009b1c:	08009bad 	.word	0x08009bad
 8009b20:	08009bad 	.word	0x08009bad
 8009b24:	08009bad 	.word	0x08009bad
 8009b28:	08009bad 	.word	0x08009bad
 8009b2c:	08009bad 	.word	0x08009bad
 8009b30:	08009bad 	.word	0x08009bad
 8009b34:	08009bad 	.word	0x08009bad
 8009b38:	08009b95 	.word	0x08009b95
 8009b3c:	08009bad 	.word	0x08009bad
 8009b40:	08009bad 	.word	0x08009bad
 8009b44:	08009bad 	.word	0x08009bad
 8009b48:	08009bad 	.word	0x08009bad
 8009b4c:	08009bad 	.word	0x08009bad
 8009b50:	08009bad 	.word	0x08009bad
 8009b54:	08009bad 	.word	0x08009bad
 8009b58:	08009b9d 	.word	0x08009b9d
 8009b5c:	08009bad 	.word	0x08009bad
 8009b60:	08009bad 	.word	0x08009bad
 8009b64:	08009bad 	.word	0x08009bad
 8009b68:	08009bad 	.word	0x08009bad
 8009b6c:	08009bad 	.word	0x08009bad
 8009b70:	08009bad 	.word	0x08009bad
 8009b74:	08009bad 	.word	0x08009bad
 8009b78:	08009ba5 	.word	0x08009ba5
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b82:	e0d6      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b8a:	e0d2      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b92:	e0ce      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009b9a:	e0ca      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ba2:	e0c6      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009ba4:	2340      	movs	r3, #64	@ 0x40
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009baa:	e0c2      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009bac:	2380      	movs	r3, #128	@ 0x80
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009bb2:	e0be      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009bb4:	40011400 	.word	0x40011400
 8009bb8:	58024400 	.word	0x58024400
 8009bbc:	40007800 	.word	0x40007800
 8009bc0:	40007c00 	.word	0x40007c00
 8009bc4:	40011800 	.word	0x40011800
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4aad      	ldr	r2, [pc, #692]	@ (8009e84 <UART_SetConfig+0x900>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d176      	bne.n	8009cc0 <UART_SetConfig+0x73c>
 8009bd2:	4bad      	ldr	r3, [pc, #692]	@ (8009e88 <UART_SetConfig+0x904>)
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bda:	2b28      	cmp	r3, #40	@ 0x28
 8009bdc:	d86c      	bhi.n	8009cb8 <UART_SetConfig+0x734>
 8009bde:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <UART_SetConfig+0x660>)
 8009be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be4:	08009c89 	.word	0x08009c89
 8009be8:	08009cb9 	.word	0x08009cb9
 8009bec:	08009cb9 	.word	0x08009cb9
 8009bf0:	08009cb9 	.word	0x08009cb9
 8009bf4:	08009cb9 	.word	0x08009cb9
 8009bf8:	08009cb9 	.word	0x08009cb9
 8009bfc:	08009cb9 	.word	0x08009cb9
 8009c00:	08009cb9 	.word	0x08009cb9
 8009c04:	08009c91 	.word	0x08009c91
 8009c08:	08009cb9 	.word	0x08009cb9
 8009c0c:	08009cb9 	.word	0x08009cb9
 8009c10:	08009cb9 	.word	0x08009cb9
 8009c14:	08009cb9 	.word	0x08009cb9
 8009c18:	08009cb9 	.word	0x08009cb9
 8009c1c:	08009cb9 	.word	0x08009cb9
 8009c20:	08009cb9 	.word	0x08009cb9
 8009c24:	08009c99 	.word	0x08009c99
 8009c28:	08009cb9 	.word	0x08009cb9
 8009c2c:	08009cb9 	.word	0x08009cb9
 8009c30:	08009cb9 	.word	0x08009cb9
 8009c34:	08009cb9 	.word	0x08009cb9
 8009c38:	08009cb9 	.word	0x08009cb9
 8009c3c:	08009cb9 	.word	0x08009cb9
 8009c40:	08009cb9 	.word	0x08009cb9
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009cb9 	.word	0x08009cb9
 8009c4c:	08009cb9 	.word	0x08009cb9
 8009c50:	08009cb9 	.word	0x08009cb9
 8009c54:	08009cb9 	.word	0x08009cb9
 8009c58:	08009cb9 	.word	0x08009cb9
 8009c5c:	08009cb9 	.word	0x08009cb9
 8009c60:	08009cb9 	.word	0x08009cb9
 8009c64:	08009ca9 	.word	0x08009ca9
 8009c68:	08009cb9 	.word	0x08009cb9
 8009c6c:	08009cb9 	.word	0x08009cb9
 8009c70:	08009cb9 	.word	0x08009cb9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cb9 	.word	0x08009cb9
 8009c7c:	08009cb9 	.word	0x08009cb9
 8009c80:	08009cb9 	.word	0x08009cb9
 8009c84:	08009cb1 	.word	0x08009cb1
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c8e:	e050      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009c90:	2304      	movs	r3, #4
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c96:	e04c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009c98:	2308      	movs	r3, #8
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c9e:	e048      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009ca0:	2310      	movs	r3, #16
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e044      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e040      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009cb0:	2340      	movs	r3, #64	@ 0x40
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e03c      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009cb8:	2380      	movs	r3, #128	@ 0x80
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e038      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a71      	ldr	r2, [pc, #452]	@ (8009e8c <UART_SetConfig+0x908>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d130      	bne.n	8009d2c <UART_SetConfig+0x7a8>
 8009cca:	4b6f      	ldr	r3, [pc, #444]	@ (8009e88 <UART_SetConfig+0x904>)
 8009ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cce:	f003 0307 	and.w	r3, r3, #7
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	d826      	bhi.n	8009d24 <UART_SetConfig+0x7a0>
 8009cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <UART_SetConfig+0x758>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009cf5 	.word	0x08009cf5
 8009ce0:	08009cfd 	.word	0x08009cfd
 8009ce4:	08009d05 	.word	0x08009d05
 8009ce8:	08009d0d 	.word	0x08009d0d
 8009cec:	08009d15 	.word	0x08009d15
 8009cf0:	08009d1d 	.word	0x08009d1d
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cfa:	e01a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009cfc:	2304      	movs	r3, #4
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d02:	e016      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d04:	2308      	movs	r3, #8
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d0a:	e012      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d0c:	2310      	movs	r3, #16
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e00e      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d14:	2320      	movs	r3, #32
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e00a      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d1c:	2340      	movs	r3, #64	@ 0x40
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e006      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d24:	2380      	movs	r3, #128	@ 0x80
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e002      	b.n	8009d32 <UART_SetConfig+0x7ae>
 8009d2c:	2380      	movs	r3, #128	@ 0x80
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a55      	ldr	r2, [pc, #340]	@ (8009e8c <UART_SetConfig+0x908>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	f040 80f8 	bne.w	8009f2e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d3e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	dc46      	bgt.n	8009dd4 <UART_SetConfig+0x850>
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	db75      	blt.n	8009e36 <UART_SetConfig+0x8b2>
 8009d4a:	3b02      	subs	r3, #2
 8009d4c:	2b1e      	cmp	r3, #30
 8009d4e:	d872      	bhi.n	8009e36 <UART_SetConfig+0x8b2>
 8009d50:	a201      	add	r2, pc, #4	@ (adr r2, 8009d58 <UART_SetConfig+0x7d4>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009ddb 	.word	0x08009ddb
 8009d5c:	08009e37 	.word	0x08009e37
 8009d60:	08009de3 	.word	0x08009de3
 8009d64:	08009e37 	.word	0x08009e37
 8009d68:	08009e37 	.word	0x08009e37
 8009d6c:	08009e37 	.word	0x08009e37
 8009d70:	08009df3 	.word	0x08009df3
 8009d74:	08009e37 	.word	0x08009e37
 8009d78:	08009e37 	.word	0x08009e37
 8009d7c:	08009e37 	.word	0x08009e37
 8009d80:	08009e37 	.word	0x08009e37
 8009d84:	08009e37 	.word	0x08009e37
 8009d88:	08009e37 	.word	0x08009e37
 8009d8c:	08009e37 	.word	0x08009e37
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009e37 	.word	0x08009e37
 8009d98:	08009e37 	.word	0x08009e37
 8009d9c:	08009e37 	.word	0x08009e37
 8009da0:	08009e37 	.word	0x08009e37
 8009da4:	08009e37 	.word	0x08009e37
 8009da8:	08009e37 	.word	0x08009e37
 8009dac:	08009e37 	.word	0x08009e37
 8009db0:	08009e37 	.word	0x08009e37
 8009db4:	08009e37 	.word	0x08009e37
 8009db8:	08009e37 	.word	0x08009e37
 8009dbc:	08009e37 	.word	0x08009e37
 8009dc0:	08009e37 	.word	0x08009e37
 8009dc4:	08009e37 	.word	0x08009e37
 8009dc8:	08009e37 	.word	0x08009e37
 8009dcc:	08009e37 	.word	0x08009e37
 8009dd0:	08009e29 	.word	0x08009e29
 8009dd4:	2b40      	cmp	r3, #64	@ 0x40
 8009dd6:	d02a      	beq.n	8009e2e <UART_SetConfig+0x8aa>
 8009dd8:	e02d      	b.n	8009e36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009dda:	f7fd f8f5 	bl	8006fc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009dde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009de0:	e02f      	b.n	8009e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fd f904 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df0:	e027      	b.n	8009e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df2:	f107 0318 	add.w	r3, r7, #24
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fd fa50 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e00:	e01f      	b.n	8009e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e02:	4b21      	ldr	r3, [pc, #132]	@ (8009e88 <UART_SetConfig+0x904>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d009      	beq.n	8009e22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e88 <UART_SetConfig+0x904>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	08db      	lsrs	r3, r3, #3
 8009e14:	f003 0303 	and.w	r3, r3, #3
 8009e18:	4a1d      	ldr	r2, [pc, #116]	@ (8009e90 <UART_SetConfig+0x90c>)
 8009e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e20:	e00f      	b.n	8009e42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009e22:	4b1b      	ldr	r3, [pc, #108]	@ (8009e90 <UART_SetConfig+0x90c>)
 8009e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e26:	e00c      	b.n	8009e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e28:	4b1a      	ldr	r3, [pc, #104]	@ (8009e94 <UART_SetConfig+0x910>)
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e2c:	e009      	b.n	8009e42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e34:	e005      	b.n	8009e42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 81ee 	beq.w	800a226 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	4a12      	ldr	r2, [pc, #72]	@ (8009e98 <UART_SetConfig+0x914>)
 8009e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e54:	461a      	mov	r2, r3
 8009e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e5c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	4613      	mov	r3, r2
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d305      	bcc.n	8009e7a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d910      	bls.n	8009e9c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009e80:	e1d1      	b.n	800a226 <UART_SetConfig+0xca2>
 8009e82:	bf00      	nop
 8009e84:	40011c00 	.word	0x40011c00
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	58000c00 	.word	0x58000c00
 8009e90:	03d09000 	.word	0x03d09000
 8009e94:	003d0900 	.word	0x003d0900
 8009e98:	0800af00 	.word	0x0800af00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	60bb      	str	r3, [r7, #8]
 8009ea2:	60fa      	str	r2, [r7, #12]
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea8:	4ac0      	ldr	r2, [pc, #768]	@ (800a1ac <UART_SetConfig+0xc28>)
 8009eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ebe:	f7f6 fa25 	bl	800030c <__aeabi_uldivmod>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4610      	mov	r0, r2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	020b      	lsls	r3, r1, #8
 8009ed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ed8:	0202      	lsls	r2, r0, #8
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	6849      	ldr	r1, [r1, #4]
 8009ede:	0849      	lsrs	r1, r1, #1
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	eb12 0804 	adds.w	r8, r2, r4
 8009eea:	eb43 0905 	adc.w	r9, r3, r5
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	469a      	mov	sl, r3
 8009ef6:	4693      	mov	fp, r2
 8009ef8:	4652      	mov	r2, sl
 8009efa:	465b      	mov	r3, fp
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	f7f6 fa04 	bl	800030c <__aeabi_uldivmod>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4613      	mov	r3, r2
 8009f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f12:	d308      	bcc.n	8009f26 <UART_SetConfig+0x9a2>
 8009f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f1a:	d204      	bcs.n	8009f26 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f22:	60da      	str	r2, [r3, #12]
 8009f24:	e17f      	b.n	800a226 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009f2c:	e17b      	b.n	800a226 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f36:	f040 80bd 	bne.w	800a0b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009f3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	dc48      	bgt.n	8009fd4 <UART_SetConfig+0xa50>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db7b      	blt.n	800a03e <UART_SetConfig+0xaba>
 8009f46:	2b20      	cmp	r3, #32
 8009f48:	d879      	bhi.n	800a03e <UART_SetConfig+0xaba>
 8009f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <UART_SetConfig+0x9cc>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009fdb 	.word	0x08009fdb
 8009f54:	08009fe3 	.word	0x08009fe3
 8009f58:	0800a03f 	.word	0x0800a03f
 8009f5c:	0800a03f 	.word	0x0800a03f
 8009f60:	08009feb 	.word	0x08009feb
 8009f64:	0800a03f 	.word	0x0800a03f
 8009f68:	0800a03f 	.word	0x0800a03f
 8009f6c:	0800a03f 	.word	0x0800a03f
 8009f70:	08009ffb 	.word	0x08009ffb
 8009f74:	0800a03f 	.word	0x0800a03f
 8009f78:	0800a03f 	.word	0x0800a03f
 8009f7c:	0800a03f 	.word	0x0800a03f
 8009f80:	0800a03f 	.word	0x0800a03f
 8009f84:	0800a03f 	.word	0x0800a03f
 8009f88:	0800a03f 	.word	0x0800a03f
 8009f8c:	0800a03f 	.word	0x0800a03f
 8009f90:	0800a00b 	.word	0x0800a00b
 8009f94:	0800a03f 	.word	0x0800a03f
 8009f98:	0800a03f 	.word	0x0800a03f
 8009f9c:	0800a03f 	.word	0x0800a03f
 8009fa0:	0800a03f 	.word	0x0800a03f
 8009fa4:	0800a03f 	.word	0x0800a03f
 8009fa8:	0800a03f 	.word	0x0800a03f
 8009fac:	0800a03f 	.word	0x0800a03f
 8009fb0:	0800a03f 	.word	0x0800a03f
 8009fb4:	0800a03f 	.word	0x0800a03f
 8009fb8:	0800a03f 	.word	0x0800a03f
 8009fbc:	0800a03f 	.word	0x0800a03f
 8009fc0:	0800a03f 	.word	0x0800a03f
 8009fc4:	0800a03f 	.word	0x0800a03f
 8009fc8:	0800a03f 	.word	0x0800a03f
 8009fcc:	0800a03f 	.word	0x0800a03f
 8009fd0:	0800a031 	.word	0x0800a031
 8009fd4:	2b40      	cmp	r3, #64	@ 0x40
 8009fd6:	d02e      	beq.n	800a036 <UART_SetConfig+0xab2>
 8009fd8:	e031      	b.n	800a03e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fda:	f7fb fe29 	bl	8005c30 <HAL_RCC_GetPCLK1Freq>
 8009fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fe0:	e033      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fe2:	f7fb fe3b 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8009fe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009fe8:	e02f      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd f800 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff8:	e027      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffa:	f107 0318 	add.w	r3, r7, #24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fd f94c 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e01f      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00a:	4b69      	ldr	r3, [pc, #420]	@ (800a1b0 <UART_SetConfig+0xc2c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d009      	beq.n	800a02a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a016:	4b66      	ldr	r3, [pc, #408]	@ (800a1b0 <UART_SetConfig+0xc2c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	08db      	lsrs	r3, r3, #3
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	4a64      	ldr	r2, [pc, #400]	@ (800a1b4 <UART_SetConfig+0xc30>)
 800a022:	fa22 f303 	lsr.w	r3, r2, r3
 800a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a028:	e00f      	b.n	800a04a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a02a:	4b62      	ldr	r3, [pc, #392]	@ (800a1b4 <UART_SetConfig+0xc30>)
 800a02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a02e:	e00c      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a030:	4b61      	ldr	r3, [pc, #388]	@ (800a1b8 <UART_SetConfig+0xc34>)
 800a032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a034:	e009      	b.n	800a04a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a03c:	e005      	b.n	800a04a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80ea 	beq.w	800a226 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a056:	4a55      	ldr	r2, [pc, #340]	@ (800a1ac <UART_SetConfig+0xc28>)
 800a058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a05c:	461a      	mov	r2, r3
 800a05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a060:	fbb3 f3f2 	udiv	r3, r3, r2
 800a064:	005a      	lsls	r2, r3, #1
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	441a      	add	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	fbb2 f3f3 	udiv	r3, r2, r3
 800a076:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d916      	bls.n	800a0ac <UART_SetConfig+0xb28>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a084:	d212      	bcs.n	800a0ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f023 030f 	bic.w	r3, r3, #15
 800a08e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	085b      	lsrs	r3, r3, #1
 800a094:	b29b      	uxth	r3, r3
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	e0bc      	b.n	800a226 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a0b2:	e0b8      	b.n	800a226 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a0b8:	2b20      	cmp	r3, #32
 800a0ba:	dc4b      	bgt.n	800a154 <UART_SetConfig+0xbd0>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f2c0 8087 	blt.w	800a1d0 <UART_SetConfig+0xc4c>
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	f200 8084 	bhi.w	800a1d0 <UART_SetConfig+0xc4c>
 800a0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0xb4c>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a15b 	.word	0x0800a15b
 800a0d4:	0800a163 	.word	0x0800a163
 800a0d8:	0800a1d1 	.word	0x0800a1d1
 800a0dc:	0800a1d1 	.word	0x0800a1d1
 800a0e0:	0800a16b 	.word	0x0800a16b
 800a0e4:	0800a1d1 	.word	0x0800a1d1
 800a0e8:	0800a1d1 	.word	0x0800a1d1
 800a0ec:	0800a1d1 	.word	0x0800a1d1
 800a0f0:	0800a17b 	.word	0x0800a17b
 800a0f4:	0800a1d1 	.word	0x0800a1d1
 800a0f8:	0800a1d1 	.word	0x0800a1d1
 800a0fc:	0800a1d1 	.word	0x0800a1d1
 800a100:	0800a1d1 	.word	0x0800a1d1
 800a104:	0800a1d1 	.word	0x0800a1d1
 800a108:	0800a1d1 	.word	0x0800a1d1
 800a10c:	0800a1d1 	.word	0x0800a1d1
 800a110:	0800a18b 	.word	0x0800a18b
 800a114:	0800a1d1 	.word	0x0800a1d1
 800a118:	0800a1d1 	.word	0x0800a1d1
 800a11c:	0800a1d1 	.word	0x0800a1d1
 800a120:	0800a1d1 	.word	0x0800a1d1
 800a124:	0800a1d1 	.word	0x0800a1d1
 800a128:	0800a1d1 	.word	0x0800a1d1
 800a12c:	0800a1d1 	.word	0x0800a1d1
 800a130:	0800a1d1 	.word	0x0800a1d1
 800a134:	0800a1d1 	.word	0x0800a1d1
 800a138:	0800a1d1 	.word	0x0800a1d1
 800a13c:	0800a1d1 	.word	0x0800a1d1
 800a140:	0800a1d1 	.word	0x0800a1d1
 800a144:	0800a1d1 	.word	0x0800a1d1
 800a148:	0800a1d1 	.word	0x0800a1d1
 800a14c:	0800a1d1 	.word	0x0800a1d1
 800a150:	0800a1c3 	.word	0x0800a1c3
 800a154:	2b40      	cmp	r3, #64	@ 0x40
 800a156:	d037      	beq.n	800a1c8 <UART_SetConfig+0xc44>
 800a158:	e03a      	b.n	800a1d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7fb fd69 	bl	8005c30 <HAL_RCC_GetPCLK1Freq>
 800a15e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a160:	e03c      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a162:	f7fb fd7b 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 800a166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a168:	e038      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fc ff40 	bl	8006ff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a178:	e030      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17a:	f107 0318 	add.w	r3, r7, #24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fd f88c 	bl	800729c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a188:	e028      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18a:	4b09      	ldr	r3, [pc, #36]	@ (800a1b0 <UART_SetConfig+0xc2c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d012      	beq.n	800a1bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a196:	4b06      	ldr	r3, [pc, #24]	@ (800a1b0 <UART_SetConfig+0xc2c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	4a04      	ldr	r2, [pc, #16]	@ (800a1b4 <UART_SetConfig+0xc30>)
 800a1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1a8:	e018      	b.n	800a1dc <UART_SetConfig+0xc58>
 800a1aa:	bf00      	nop
 800a1ac:	0800af00 	.word	0x0800af00
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	03d09000 	.word	0x03d09000
 800a1b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a1bc:	4b24      	ldr	r3, [pc, #144]	@ (800a250 <UART_SetConfig+0xccc>)
 800a1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c0:	e00c      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1c2:	4b24      	ldr	r3, [pc, #144]	@ (800a254 <UART_SetConfig+0xcd0>)
 800a1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c6:	e009      	b.n	800a1dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ce:	e005      	b.n	800a1dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1da:	bf00      	nop
    }

    if (pclk != 0U)
 800a1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d021      	beq.n	800a226 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	4a1c      	ldr	r2, [pc, #112]	@ (800a258 <UART_SetConfig+0xcd4>)
 800a1e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	085b      	lsrs	r3, r3, #1
 800a1fa:	441a      	add	r2, r3
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	fbb2 f3f3 	udiv	r3, r2, r3
 800a204:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	2b0f      	cmp	r3, #15
 800a20a:	d909      	bls.n	800a220 <UART_SetConfig+0xc9c>
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a212:	d205      	bcs.n	800a220 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	b29a      	uxth	r2, r3
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60da      	str	r2, [r3, #12]
 800a21e:	e002      	b.n	800a226 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2201      	movs	r2, #1
 800a22a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2201      	movs	r2, #1
 800a232:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2200      	movs	r2, #0
 800a23a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2200      	movs	r2, #0
 800a240:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a242:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a246:	4618      	mov	r0, r3
 800a248:	3748      	adds	r7, #72	@ 0x48
 800a24a:	46bd      	mov	sp, r7
 800a24c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a250:	03d09000 	.word	0x03d09000
 800a254:	003d0900 	.word	0x003d0900
 800a258:	0800af00 	.word	0x0800af00

0800a25c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a268:	f003 0308 	and.w	r3, r3, #8
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00a      	beq.n	800a2ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ce:	f003 0304 	and.w	r3, r3, #4
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00a      	beq.n	800a30e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00a      	beq.n	800a330 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	430a      	orrs	r2, r1
 800a32e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01a      	beq.n	800a372 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a356:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35a:	d10a      	bne.n	800a372 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00a      	beq.n	800a394 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	605a      	str	r2, [r3, #4]
  }
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b098      	sub	sp, #96	@ 0x60
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3b0:	f7f7 f8de 	bl	8001570 <HAL_GetTick>
 800a3b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0308 	and.w	r3, r3, #8
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d12f      	bne.n	800a424 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f88e 	bl	800a4f4 <UART_WaitOnFlagUntilTimeout>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d022      	beq.n	800a424 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	e853 3f00 	ldrex	r3, [r3]
 800a3ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e6      	bne.n	800a3de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e063      	b.n	800a4ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d149      	bne.n	800a4c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a432:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a43a:	2200      	movs	r2, #0
 800a43c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f857 	bl	800a4f4 <UART_WaitOnFlagUntilTimeout>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d03c      	beq.n	800a4c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	623b      	str	r3, [r7, #32]
   return(result);
 800a45a:	6a3b      	ldr	r3, [r7, #32]
 800a45c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	461a      	mov	r2, r3
 800a468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a46a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a46c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e6      	bne.n	800a44c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3308      	adds	r3, #8
 800a484:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	e853 3f00 	ldrex	r3, [r3]
 800a48c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 0301 	bic.w	r3, r3, #1
 800a494:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3308      	adds	r3, #8
 800a49c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a49e:	61fa      	str	r2, [r7, #28]
 800a4a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	69b9      	ldr	r1, [r7, #24]
 800a4a4:	69fa      	ldr	r2, [r7, #28]
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e5      	bne.n	800a47e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e012      	b.n	800a4ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2220      	movs	r2, #32
 800a4d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3758      	adds	r7, #88	@ 0x58
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	4613      	mov	r3, r2
 800a502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a504:	e04f      	b.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50c:	d04b      	beq.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a50e:	f7f7 f82f 	bl	8001570 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d302      	bcc.n	800a524 <UART_WaitOnFlagUntilTimeout+0x30>
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d101      	bne.n	800a528 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a524:	2303      	movs	r3, #3
 800a526:	e04e      	b.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0304 	and.w	r3, r3, #4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d037      	beq.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2b80      	cmp	r3, #128	@ 0x80
 800a53a:	d034      	beq.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b40      	cmp	r3, #64	@ 0x40
 800a540:	d031      	beq.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69db      	ldr	r3, [r3, #28]
 800a548:	f003 0308 	and.w	r3, r3, #8
 800a54c:	2b08      	cmp	r3, #8
 800a54e:	d110      	bne.n	800a572 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2208      	movs	r2, #8
 800a556:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 f921 	bl	800a7a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2208      	movs	r2, #8
 800a562:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e029      	b.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a57c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a580:	d111      	bne.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a58a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 f907 	bl	800a7a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e00f      	b.n	800a5c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69da      	ldr	r2, [r3, #28]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bf0c      	ite	eq
 800a5b6:	2301      	moveq	r3, #1
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d0a0      	beq.n	800a506 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b096      	sub	sp, #88	@ 0x58
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	88fa      	ldrh	r2, [r7, #6]
 800a5e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2222      	movs	r2, #34	@ 0x22
 800a5f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a602:	2b00      	cmp	r3, #0
 800a604:	d02d      	beq.n	800a662 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a60c:	4a40      	ldr	r2, [pc, #256]	@ (800a710 <UART_Start_Receive_DMA+0x140>)
 800a60e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a616:	4a3f      	ldr	r2, [pc, #252]	@ (800a714 <UART_Start_Receive_DMA+0x144>)
 800a618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a620:	4a3d      	ldr	r2, [pc, #244]	@ (800a718 <UART_Start_Receive_DMA+0x148>)
 800a622:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a62a:	2200      	movs	r2, #0
 800a62c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3324      	adds	r3, #36	@ 0x24
 800a63a:	4619      	mov	r1, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a640:	461a      	mov	r2, r3
 800a642:	88fb      	ldrh	r3, [r7, #6]
 800a644:	f7f7 feaa 	bl	800239c <HAL_DMA_Start_IT>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2210      	movs	r2, #16
 800a652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2220      	movs	r2, #32
 800a65a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e051      	b.n	800a706 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d018      	beq.n	800a69c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a67e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a68a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a68e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e6      	bne.n	800a66a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a6:	e853 3f00 	ldrex	r3, [r3]
 800a6aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ae:	f043 0301 	orr.w	r3, r3, #1
 800a6b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a6bc:	637a      	str	r2, [r7, #52]	@ 0x34
 800a6be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a6c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6c4:	e841 2300 	strex	r3, r2, [r1]
 800a6c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d1e5      	bne.n	800a69c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	613b      	str	r3, [r7, #16]
   return(result);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a6f0:	623a      	str	r2, [r7, #32]
 800a6f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	69f9      	ldr	r1, [r7, #28]
 800a6f6:	6a3a      	ldr	r2, [r7, #32]
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e5      	bne.n	800a6d0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3758      	adds	r7, #88	@ 0x58
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	0800a91f 	.word	0x0800a91f
 800a714:	0800aa47 	.word	0x0800aa47
 800a718:	0800aa85 	.word	0x0800aa85

0800a71c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b08f      	sub	sp, #60	@ 0x3c
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	61fb      	str	r3, [r7, #28]
   return(result);
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a738:	637b      	str	r3, [r7, #52]	@ 0x34
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a744:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a74a:	e841 2300 	strex	r3, r2, [r1]
 800a74e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e6      	bne.n	800a724 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3308      	adds	r3, #8
 800a75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	60bb      	str	r3, [r7, #8]
   return(result);
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a76c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3308      	adds	r3, #8
 800a774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a776:	61ba      	str	r2, [r7, #24]
 800a778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	613b      	str	r3, [r7, #16]
   return(result);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e5      	bne.n	800a756 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a792:	bf00      	nop
 800a794:	373c      	adds	r7, #60	@ 0x3c
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
	...

0800a7a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b095      	sub	sp, #84	@ 0x54
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e6      	bne.n	800a7a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7ea:	69fa      	ldr	r2, [r7, #28]
 800a7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <UART_EndRxTransfer+0xc8>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a800:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1e5      	bne.n	800a7da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a812:	2b01      	cmp	r3, #1
 800a814:	d118      	bne.n	800a848 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	60bb      	str	r3, [r7, #8]
   return(result);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f023 0310 	bic.w	r3, r3, #16
 800a82a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a834:	61bb      	str	r3, [r7, #24]
 800a836:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	6979      	ldr	r1, [r7, #20]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	613b      	str	r3, [r7, #16]
   return(result);
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e6      	bne.n	800a816 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a85c:	bf00      	nop
 800a85e:	3754      	adds	r7, #84	@ 0x54
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	effffffe 	.word	0xeffffffe

0800a86c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b090      	sub	sp, #64	@ 0x40
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a882:	d037      	beq.n	800a8f4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a886:	2200      	movs	r2, #0
 800a888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	3308      	adds	r3, #8
 800a892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	623b      	str	r3, [r7, #32]
   return(result);
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b4:	e841 2300 	strex	r3, r2, [r1]
 800a8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1e5      	bne.n	800a88c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8de:	61fb      	str	r3, [r7, #28]
 800a8e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	69b9      	ldr	r1, [r7, #24]
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e6      	bne.n	800a8c0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8f2:	e002      	b.n	800a8fa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a8f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a8f6:	f7f6 fa29 	bl	8000d4c <HAL_UART_TxCpltCallback>
}
 800a8fa:	bf00      	nop
 800a8fc:	3740      	adds	r7, #64	@ 0x40
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7fe fd67 	bl	80093e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a916:	bf00      	nop
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b09c      	sub	sp, #112	@ 0x70
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	69db      	ldr	r3, [r3, #28]
 800a930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a934:	d071      	beq.n	800aa1a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a938:	2200      	movs	r2, #0
 800a93a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a93e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a94c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a94e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a952:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a95c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a95e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a96a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e6      	bne.n	800a93e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a982:	f023 0301 	bic.w	r3, r3, #1
 800a986:	667b      	str	r3, [r7, #100]	@ 0x64
 800a988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a990:	647a      	str	r2, [r7, #68]	@ 0x44
 800a992:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a99e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e5      	bne.n	800a970 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	e853 3f00 	ldrex	r3, [r3]
 800a9b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a9c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9cc:	e841 2300 	strex	r3, r2, [r1]
 800a9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e5      	bne.n	800a9a4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d118      	bne.n	800aa1a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f023 0310 	bic.w	r3, r3, #16
 800a9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa06:	61fb      	str	r3, [r7, #28]
 800aa08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	69b9      	ldr	r1, [r7, #24]
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	617b      	str	r3, [r7, #20]
   return(result);
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e6      	bne.n	800a9e8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d107      	bne.n	800aa38 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa32:	f7f6 f995 	bl	8000d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa36:	e002      	b.n	800aa3e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800aa38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aa3a:	f7fe fcdd 	bl	80093f8 <HAL_UART_RxCpltCallback>
}
 800aa3e:	bf00      	nop
 800aa40:	3770      	adds	r7, #112	@ 0x70
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b084      	sub	sp, #16
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2201      	movs	r2, #1
 800aa58:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d109      	bne.n	800aa76 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa68:	085b      	lsrs	r3, r3, #1
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7f6 f976 	bl	8000d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa74:	e002      	b.n	800aa7c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa76:	68f8      	ldr	r0, [r7, #12]
 800aa78:	f7fe fcc8 	bl	800940c <HAL_UART_RxHalfCpltCallback>
}
 800aa7c:	bf00      	nop
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaac:	2b80      	cmp	r3, #128	@ 0x80
 800aaae:	d109      	bne.n	800aac4 <UART_DMAError+0x40>
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b21      	cmp	r3, #33	@ 0x21
 800aab4:	d106      	bne.n	800aac4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800aabe:	6978      	ldr	r0, [r7, #20]
 800aac0:	f7ff fe2c 	bl	800a71c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aace:	2b40      	cmp	r3, #64	@ 0x40
 800aad0:	d109      	bne.n	800aae6 <UART_DMAError+0x62>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b22      	cmp	r3, #34	@ 0x22
 800aad6:	d106      	bne.n	800aae6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aae0:	6978      	ldr	r0, [r7, #20]
 800aae2:	f7ff fe5d 	bl	800a7a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaec:	f043 0210 	orr.w	r2, r3, #16
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaf6:	6978      	ldr	r0, [r7, #20]
 800aaf8:	f7fe fc92 	bl	8009420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aafc:	bf00      	nop
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7fe fc7c 	bl	8009420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	e853 3f00 	ldrex	r3, [r3]
 800ab44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	61bb      	str	r3, [r7, #24]
 800ab58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	6979      	ldr	r1, [r7, #20]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	613b      	str	r3, [r7, #16]
   return(result);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1e6      	bne.n	800ab38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7f6 f8e7 	bl	8000d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7e:	bf00      	nop
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <HAL_UARTEx_DisableFifoMode+0x16>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e027      	b.n	800ac28 <HAL_UARTEx_DisableFifoMode+0x66>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2224      	movs	r2, #36	@ 0x24
 800abe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f022 0201 	bic.w	r2, r2, #1
 800abfe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ac06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac48:	2302      	movs	r3, #2
 800ac4a:	e02d      	b.n	800aca8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2224      	movs	r2, #36	@ 0x24
 800ac58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0201 	bic.w	r2, r2, #1
 800ac72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	430a      	orrs	r2, r1
 800ac86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f8a3 	bl	800add4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2220      	movs	r2, #32
 800ac9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d101      	bne.n	800acc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acc4:	2302      	movs	r3, #2
 800acc6:	e02d      	b.n	800ad24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2224      	movs	r2, #36	@ 0x24
 800acd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0201 	bic.w	r2, r2, #1
 800acee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	430a      	orrs	r2, r1
 800ad02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f865 	bl	800add4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08c      	sub	sp, #48	@ 0x30
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	4613      	mov	r3, r2
 800ad38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d142      	bne.n	800adca <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d002      	beq.n	800ad50 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e03b      	b.n	800adcc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2201      	movs	r2, #1
 800ad58:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ad60:	88fb      	ldrh	r3, [r7, #6]
 800ad62:	461a      	mov	r2, r3
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fc32 	bl	800a5d0 <UART_Start_Receive_DMA>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ad72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d124      	bne.n	800adc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d11d      	bne.n	800adbe <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2210      	movs	r2, #16
 800ad88:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	617b      	str	r3, [r7, #20]
   return(result);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f043 0310 	orr.w	r3, r3, #16
 800ad9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
 800adaa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6a39      	ldr	r1, [r7, #32]
 800adae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e6      	bne.n	800ad8a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800adbc:	e002      	b.n	800adc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800adc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adc8:	e000      	b.n	800adcc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800adca:	2302      	movs	r3, #2
  }
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3730      	adds	r7, #48	@ 0x30
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d108      	bne.n	800adf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adf4:	e031      	b.n	800ae5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adf6:	2310      	movs	r3, #16
 800adf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adfa:	2310      	movs	r3, #16
 800adfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	0e5b      	lsrs	r3, r3, #25
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	f003 0307 	and.w	r3, r3, #7
 800ae0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	0f5b      	lsrs	r3, r3, #29
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 0307 	and.w	r3, r3, #7
 800ae1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	7b3a      	ldrb	r2, [r7, #12]
 800ae22:	4911      	ldr	r1, [pc, #68]	@ (800ae68 <UARTEx_SetNbDataToProcess+0x94>)
 800ae24:	5c8a      	ldrb	r2, [r1, r2]
 800ae26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae2a:	7b3a      	ldrb	r2, [r7, #12]
 800ae2c:	490f      	ldr	r1, [pc, #60]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x98>)
 800ae2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	7b7a      	ldrb	r2, [r7, #13]
 800ae40:	4909      	ldr	r1, [pc, #36]	@ (800ae68 <UARTEx_SetNbDataToProcess+0x94>)
 800ae42:	5c8a      	ldrb	r2, [r1, r2]
 800ae44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae48:	7b7a      	ldrb	r2, [r7, #13]
 800ae4a:	4908      	ldr	r1, [pc, #32]	@ (800ae6c <UARTEx_SetNbDataToProcess+0x98>)
 800ae4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae5a:	bf00      	nop
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	0800af18 	.word	0x0800af18
 800ae6c:	0800af20 	.word	0x0800af20

0800ae70 <memset>:
 800ae70:	4402      	add	r2, r0
 800ae72:	4603      	mov	r3, r0
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d100      	bne.n	800ae7a <memset+0xa>
 800ae78:	4770      	bx	lr
 800ae7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae7e:	e7f9      	b.n	800ae74 <memset+0x4>

0800ae80 <__libc_init_array>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	4d0d      	ldr	r5, [pc, #52]	@ (800aeb8 <__libc_init_array+0x38>)
 800ae84:	4c0d      	ldr	r4, [pc, #52]	@ (800aebc <__libc_init_array+0x3c>)
 800ae86:	1b64      	subs	r4, r4, r5
 800ae88:	10a4      	asrs	r4, r4, #2
 800ae8a:	2600      	movs	r6, #0
 800ae8c:	42a6      	cmp	r6, r4
 800ae8e:	d109      	bne.n	800aea4 <__libc_init_array+0x24>
 800ae90:	4d0b      	ldr	r5, [pc, #44]	@ (800aec0 <__libc_init_array+0x40>)
 800ae92:	4c0c      	ldr	r4, [pc, #48]	@ (800aec4 <__libc_init_array+0x44>)
 800ae94:	f000 f818 	bl	800aec8 <_init>
 800ae98:	1b64      	subs	r4, r4, r5
 800ae9a:	10a4      	asrs	r4, r4, #2
 800ae9c:	2600      	movs	r6, #0
 800ae9e:	42a6      	cmp	r6, r4
 800aea0:	d105      	bne.n	800aeae <__libc_init_array+0x2e>
 800aea2:	bd70      	pop	{r4, r5, r6, pc}
 800aea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea8:	4798      	blx	r3
 800aeaa:	3601      	adds	r6, #1
 800aeac:	e7ee      	b.n	800ae8c <__libc_init_array+0xc>
 800aeae:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb2:	4798      	blx	r3
 800aeb4:	3601      	adds	r6, #1
 800aeb6:	e7f2      	b.n	800ae9e <__libc_init_array+0x1e>
 800aeb8:	0800af30 	.word	0x0800af30
 800aebc:	0800af30 	.word	0x0800af30
 800aec0:	0800af30 	.word	0x0800af30
 800aec4:	0800af34 	.word	0x0800af34

0800aec8 <_init>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr

0800aed4 <_fini>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	bf00      	nop
 800aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeda:	bc08      	pop	{r3}
 800aedc:	469e      	mov	lr, r3
 800aede:	4770      	bx	lr
