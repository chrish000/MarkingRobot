
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a89c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ab68  0800ab68  0000bb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aba8  0800aba8  0000bba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800abb0  0800abb0  0000bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800abb8  0800abb8  0000bbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800abbc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000560  24000018  0800abd0  0000c018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000578  0800abd0  0000c578  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d8a5  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003246  00000000  00000000  000298e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001408  00000000  00000000  0002cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f9d  00000000  00000000  0002df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033f17  00000000  00000000  0002eed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b34c  00000000  00000000  00062dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152112  00000000  00000000  0007e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d024a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005594  00000000  00000000  001d0290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001d5824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000018 	.word	0x24000018
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800ab50 	.word	0x0800ab50

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	2400001c 	.word	0x2400001c
 8000308:	0800ab50 	.word	0x0800ab50

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <_ZN7TMC2209C1Ev>:
#include "utils.h"

/**
 * @brief  Constructor for the TMC2209 class, initializes default settings.
 */
TMC2209::TMC2209() {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2203      	movs	r2, #3
 8000608:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
	cool_step_enabled_ = false;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
	data_received_flag = false;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
}
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8000630:	f000 fc26 	bl	8000e80 <_ZL10MPU_Configv>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000634:	f000 ff96 	bl	8001564 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000638:	f000 f84e 	bl	80006d8 <_Z18SystemClock_Configv>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800063c:	f000 fa94 	bl	8000b68 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8000640:	f000 fa5a 	bl	8000af8 <_ZL11MX_DMA_Initv>
	MX_UART8_Init();
 8000644:	f000 f998 	bl	8000978 <_ZL13MX_UART8_Initv>
	MX_USART2_UART_Init();
 8000648:	f000 f9f6 	bl	8000a38 <_ZL19MX_USART2_UART_Initv>
	MX_CRC_Init();
 800064c:	f000 f8c2 	bl	80007d4 <_ZL11MX_CRC_Initv>
	MX_TIM2_Init();
 8000650:	f000 f904 	bl	800085c <_ZL12MX_TIM2_Initv>
	/* USER CODE BEGIN 2 */
	/* Peripheral Configuration */
	tmcX.UART_address = huart2;
 8000654:	4a17      	ldr	r2, [pc, #92]	@ (80006b4 <main+0x88>)
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <main+0x8c>)
 8000658:	4610      	mov	r0, r2
 800065a:	4619      	mov	r1, r3
 800065c:	2394      	movs	r3, #148	@ 0x94
 800065e:	461a      	mov	r2, r3
 8000660:	f00a fa68 	bl	800ab34 <memcpy>
	tmcX.hardware_enable_port = X_EN_GPIO_Port;
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <main+0x88>)
 8000666:	4a15      	ldr	r2, [pc, #84]	@ (80006bc <main+0x90>)
 8000668:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	tmcX.hardware_enable_pin = X_EN_Pin;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <main+0x88>)
 800066e:	2240      	movs	r2, #64	@ 0x40
 8000670:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	//tmcX.setup();
	//##################################### Interrupt loop ######################

	tmcZ.UART_address = huart8;
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <main+0x94>)
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <main+0x98>)
 8000678:	4610      	mov	r0, r2
 800067a:	4619      	mov	r1, r3
 800067c:	2394      	movs	r3, #148	@ 0x94
 800067e:	461a      	mov	r2, r3
 8000680:	f00a fa58 	bl	800ab34 <memcpy>
	tmcZ.hardware_enable_port = Z_EN_GPIO_Port;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <main+0x94>)
 8000686:	4a10      	ldr	r2, [pc, #64]	@ (80006c8 <main+0x9c>)
 8000688:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	tmcZ.hardware_enable_pin = Z_EN_Pin;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <main+0x94>)
 800068e:	2201      	movs	r2, #1
 8000690:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
	//tmcZ.setup();

	HAL_HalfDuplex_EnableReceiver(&tmcX.UART_address);
 8000694:	4807      	ldr	r0, [pc, #28]	@ (80006b4 <main+0x88>)
 8000696:	f008 fdaf 	bl	80091f8 <HAL_HalfDuplex_EnableReceiver>
	HAL_UARTEx_ReceiveToIdle_DMA(&tmcX.UART_address, tmcX.rxBufferRaw, 8);
 800069a:	2208      	movs	r2, #8
 800069c:	490b      	ldr	r1, [pc, #44]	@ (80006cc <main+0xa0>)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <main+0x88>)
 80006a0:	f00a f979 	bl	800a996 <HAL_UARTEx_ReceiveToIdle_DMA>
	 HAL_HalfDuplex_EnableReceiver(&huart2);
	 HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx, 8);
	 */

	/* CLK Configuration */
	HAL_TIM_Base_Start_IT(&htim2);
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <main+0xa4>)
 80006a6:	f007 f875 	bl	8007794 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (BatteryAlarm) {
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <main+0xa8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	e7fa      	b.n	80006aa <main+0x7e>
 80006b4:	240003b0 	.word	0x240003b0
 80006b8:	24000138 	.word	0x24000138
 80006bc:	58020c00 	.word	0x58020c00
 80006c0:	24000488 	.word	0x24000488
 80006c4:	240000a4 	.word	0x240000a4
 80006c8:	58021000 	.word	0x58021000
 80006cc:	24000458 	.word	0x24000458
 80006d0:	24000058 	.word	0x24000058
 80006d4:	24000560 	.word	0x24000560

080006d8 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	@ 0x70
 80006dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	224c      	movs	r2, #76	@ 0x4c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00a f9f8 	bl	800aadc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2220      	movs	r2, #32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f00a f9f2 	bl	800aadc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006f8:	2002      	movs	r0, #2
 80006fa:	f004 fa91 	bl	8004c20 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <_Z18SystemClock_Configv+0xf8>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	4a32      	ldr	r2, [pc, #200]	@ (80007d0 <_Z18SystemClock_Configv+0xf8>)
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	6193      	str	r3, [r2, #24]
 800070e:	4b30      	ldr	r3, [pc, #192]	@ (80007d0 <_Z18SystemClock_Configv+0xf8>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800071a:	bf00      	nop
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <_Z18SystemClock_Configv+0xf8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f3      	bne.n	800071c <_Z18SystemClock_Configv+0x44>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000738:	2301      	movs	r3, #1
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 34;
 800074c:	2322      	movs	r3, #34	@ 0x22
 800074e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800075c:	230c      	movs	r3, #12
 800075e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000760:	2300      	movs	r3, #0
 8000762:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000764:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000768:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800076a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fa90 	bl	8004c94 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf14      	ite	ne
 800077a:	2301      	movne	r3, #1
 800077c:	2300      	moveq	r3, #0
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <_Z18SystemClock_Configv+0xb0>
		Error_Handler();
 8000784:	f000 fba8 	bl	8000ed8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000788:	233f      	movs	r3, #63	@ 0x3f
 800078a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000794:	2308      	movs	r3, #8
 8000796:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079c:	2340      	movs	r3, #64	@ 0x40
 800079e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2103      	movs	r1, #3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fe4a 	bl	8005448 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <_Z18SystemClock_Configv+0xf0>
		Error_Handler();
 80007c4:	f000 fb88 	bl	8000ed8 <Error_Handler>
	}
}
 80007c8:	bf00      	nop
 80007ca:	3770      	adds	r7, #112	@ 0x70
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	58024800 	.word	0x58024800

080007d4 <_ZL11MX_CRC_Initv>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CRC_Init 0 */
	__HAL_RCC_CRC_CLK_ENABLE();	//CRC-Clock aktivieren
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <_ZL11MX_CRC_Initv+0x7c>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000850 <_ZL11MX_CRC_Initv+0x7c>)
 80007e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <_ZL11MX_CRC_Initv+0x7c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 80007fa:	4a17      	ldr	r2, [pc, #92]	@ (8000858 <_ZL11MX_CRC_Initv+0x84>)
 80007fc:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000806:	2201      	movs	r2, #1
 8000808:	715a      	strb	r2, [r3, #5]
	hcrc.Init.GeneratingPolynomial = 7;
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 800080c:	2207      	movs	r2, #7
 800080e:	609a      	str	r2, [r3, #8]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000812:	2210      	movs	r2, #16
 8000814:	60da      	str	r2, [r3, #12]
	hcrc.Init.InitValue = 0;
 8000816:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800081c:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 800081e:	2220      	movs	r2, #32
 8000820:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000828:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 800082a:	2201      	movs	r2, #1
 800082c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <_ZL11MX_CRC_Initv+0x80>)
 8000830:	f001 f8d6 	bl	80019e0 <HAL_CRC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	bf14      	ite	ne
 800083a:	2301      	movne	r3, #1
 800083c:	2300      	moveq	r3, #0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <_ZL11MX_CRC_Initv+0x74>
		Error_Handler();
 8000844:	f000 fb48 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58024400 	.word	0x58024400
 8000854:	24000034 	.word	0x24000034
 8000858:	58024c00 	.word	0x58024c00

0800085c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	@ 0x38
 8000860:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000862:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
 800088a:	615a      	str	r2, [r3, #20]
 800088c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000894:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 274;
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 8000898:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800089c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b35      	ldr	r3, [pc, #212]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80008a4:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80008b8:	482e      	ldr	r0, [pc, #184]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008ba:	f006 ff13 	bl	80076e4 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZL12MX_TIM2_Initv+0x76>
		Error_Handler();
 80008ce:	f000 fb03 	bl	8000ed8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80008d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008dc:	4619      	mov	r1, r3
 80008de:	4825      	ldr	r0, [pc, #148]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008e0:	f007 fa5a 	bl	8007d98 <HAL_TIM_ConfigClockSource>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf14      	ite	ne
 80008ea:	2301      	movne	r3, #1
 80008ec:	2300      	moveq	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <_ZL12MX_TIM2_Initv+0x9c>
		Error_Handler();
 80008f4:	f000 faf0 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80008f8:	481e      	ldr	r0, [pc, #120]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 80008fa:	f006 ffd1 	bl	80078a0 <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	bf14      	ite	ne
 8000904:	2301      	movne	r3, #1
 8000906:	2300      	moveq	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <_ZL12MX_TIM2_Initv+0xb6>
		Error_Handler();
 800090e:	f000 fae3 	bl	8000ed8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 8000922:	f007 ff7f 	bl	8008824 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000928:	2b00      	cmp	r3, #0
 800092a:	bf14      	ite	ne
 800092c:	2301      	movne	r3, #1
 800092e:	2300      	moveq	r3, #0
 8000930:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <_ZL12MX_TIM2_Initv+0xde>
		Error_Handler();
 8000936:	f000 facf 	bl	8000ed8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	@ 0x60
 800093c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 500;
 800093e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000942:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <_ZL12MX_TIM2_Initv+0x118>)
 8000954:	f007 f90c 	bl	8007b70 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
			!= HAL_OK) {
 800095a:	2b00      	cmp	r3, #0
 800095c:	bf14      	ite	ne
 800095e:	2301      	movne	r3, #1
 8000960:	2300      	moveq	r3, #0
 8000962:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <_ZL12MX_TIM2_Initv+0x110>
		Error_Handler();
 8000968:	f000 fab6 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	@ 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	24000058 	.word	0x24000058

08000978 <_ZL13MX_UART8_Initv>:
/**
 * @brief UART8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART8_Init(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	/* USER CODE END UART8_Init 0 */

	/* USER CODE BEGIN UART8_Init 1 */

	/* USER CODE END UART8_Init 1 */
	huart8.Instance = UART8;
 800097c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 800097e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a34 <_ZL13MX_UART8_Initv+0xbc>)
 8000980:	601a      	str	r2, [r3, #0]
	huart8.Init.BaudRate = 115200;
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
	huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	huart8.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b27      	ldr	r3, [pc, #156]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
	huart8.Init.Parity = UART_PARITY_NONE;
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	huart8.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
	huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
	huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
	huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart8) != HAL_OK) {
 80009c0:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009c2:	f007 ffe9 	bl	8008998 <HAL_HalfDuplex_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <_ZL13MX_UART8_Initv+0x62>
		Error_Handler();
 80009d6:	f000 fa7f 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80009da:	2100      	movs	r1, #0
 80009dc:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009de:	f009 ff5e 	bl	800a89e <HAL_UARTEx_SetTxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8)
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_ZL13MX_UART8_Initv+0x7e>
		Error_Handler();
 80009f2:	f000 fa71 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 80009f6:	2100      	movs	r1, #0
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 80009fa:	f009 ff8e 	bl	800a91a <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8)
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <_ZL13MX_UART8_Initv+0x9a>
		Error_Handler();
 8000a0e:	f000 fa63 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK) {
 8000a12:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <_ZL13MX_UART8_Initv+0xb8>)
 8000a14:	f009 ff0a 	bl	800a82c <HAL_UARTEx_DisableFifoMode>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bf14      	ite	ne
 8000a1e:	2301      	movne	r3, #1
 8000a20:	2300      	moveq	r3, #0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <_ZL13MX_UART8_Initv+0xb4>
		Error_Handler();
 8000a28:	f000 fa56 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN UART8_Init 2 */

	/* USER CODE END UART8_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	240000a4 	.word	0x240000a4
 8000a34:	40007c00 	.word	0x40007c00

08000a38 <_ZL19MX_USART2_UART_Initv>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000af4 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000a40:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b27      	ldr	r3, [pc, #156]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b26      	ldr	r3, [pc, #152]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8000a80:	481b      	ldr	r0, [pc, #108]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a82:	f007 ff89 	bl	8008998 <HAL_HalfDuplex_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL19MX_USART2_UART_Initv+0x62>
		Error_Handler();
 8000a96:	f000 fa1f 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a9e:	f009 fefe 	bl	800a89e <HAL_UARTEx_SetTxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZL19MX_USART2_UART_Initv+0x7e>
		Error_Handler();
 8000ab2:	f000 fa11 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	480d      	ldr	r0, [pc, #52]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aba:	f009 ff2e 	bl	800a91a <HAL_UARTEx_SetRxFifoThreshold>
 8000abe:	4603      	mov	r3, r0
			!= HAL_OK) {
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf14      	ite	ne
 8000ac4:	2301      	movne	r3, #1
 8000ac6:	2300      	moveq	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <_ZL19MX_USART2_UART_Initv+0x9a>
		Error_Handler();
 8000ace:	f000 fa03 	bl	8000ed8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000ad2:	4807      	ldr	r0, [pc, #28]	@ (8000af0 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ad4:	f009 feaa 	bl	800a82c <HAL_UARTEx_DisableFifoMode>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	bf14      	ite	ne
 8000ade:	2301      	movne	r3, #1
 8000ae0:	2300      	moveq	r3, #0
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <_ZL19MX_USART2_UART_Initv+0xb4>
		Error_Handler();
 8000ae8:	f000 f9f6 	bl	8000ed8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24000138 	.word	0x24000138
 8000af4:	40004400 	.word	0x40004400

08000af8 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <_ZL11MX_DMA_Initv+0x6c>)
 8000b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b04:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <_ZL11MX_DMA_Initv+0x6c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <_ZL11MX_DMA_Initv+0x6c>)
 8000b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	200b      	movs	r0, #11
 8000b22:	f000 feb0 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b26:	200b      	movs	r0, #11
 8000b28:	f000 fec7 	bl	80018ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	200c      	movs	r0, #12
 8000b32:	f000 fea8 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b36:	200c      	movs	r0, #12
 8000b38:	f000 febf 	bl	80018ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	200d      	movs	r0, #13
 8000b42:	f000 fea0 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b46:	200d      	movs	r0, #13
 8000b48:	f000 feb7 	bl	80018ba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	200e      	movs	r0, #14
 8000b52:	f000 fe98 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b56:	200e      	movs	r0, #14
 8000b58:	f000 feaf 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400

08000b68 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b52      	ldr	r3, [pc, #328]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a50      	ldr	r2, [pc, #320]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	4a49      	ldr	r2, [pc, #292]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bac:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a41      	ldr	r2, [pc, #260]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bc2:	f043 0308 	orr.w	r3, r3, #8
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be8:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <_ZL12MX_GPIO_Initv+0x160>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, Z_STEP_Pin | Z_DIR_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	4834      	ldr	r0, [pc, #208]	@ (8000ccc <_ZL12MX_GPIO_Initv+0x164>)
 8000bfc:	f003 ffc2 	bl	8004b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, X_DIR_Pin | X_STEP_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2118      	movs	r1, #24
 8000c04:	4832      	ldr	r0, [pc, #200]	@ (8000cd0 <_ZL12MX_GPIO_Initv+0x168>)
 8000c06:	f003 ffbd 	bl	8004b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2140      	movs	r1, #64	@ 0x40
 8000c0e:	4830      	ldr	r0, [pc, #192]	@ (8000cd0 <_ZL12MX_GPIO_Initv+0x168>)
 8000c10:	f003 ffb8 	bl	8004b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HE0_PWM_GPIO_Port, HE0_PWM_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2108      	movs	r1, #8
 8000c18:	482e      	ldr	r0, [pc, #184]	@ (8000cd4 <_ZL12MX_GPIO_Initv+0x16c>)
 8000c1a:	f003 ffb3 	bl	8004b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Z_EN_GPIO_Port, Z_EN_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2101      	movs	r1, #1
 8000c22:	482a      	ldr	r0, [pc, #168]	@ (8000ccc <_ZL12MX_GPIO_Initv+0x164>)
 8000c24:	f003 ffae 	bl	8004b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Z_STEP_Pin Z_DIR_Pin Z_EN_Pin */
	GPIO_InitStruct.Pin = Z_STEP_Pin | Z_DIR_Pin | Z_EN_Pin;
 8000c28:	230d      	movs	r3, #13
 8000c2a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4823      	ldr	r0, [pc, #140]	@ (8000ccc <_ZL12MX_GPIO_Initv+0x164>)
 8000c40:	f003 fdf8 	bl	8004834 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWRDET_Pin */
	GPIO_InitStruct.Pin = PWRDET_Pin;
 8000c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(PWRDET_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481f      	ldr	r0, [pc, #124]	@ (8000cd8 <_ZL12MX_GPIO_Initv+0x170>)
 8000c5c:	f003 fdea 	bl	8004834 <HAL_GPIO_Init>

	/*Configure GPIO pins : Z_MIN_Pin X_MIN_Pin */
	GPIO_InitStruct.Pin = Z_MIN_Pin | X_MIN_Pin;
 8000c60:	2303      	movs	r3, #3
 8000c62:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4819      	ldr	r0, [pc, #100]	@ (8000cd8 <_ZL12MX_GPIO_Initv+0x170>)
 8000c74:	f003 fdde 	bl	8004834 <HAL_GPIO_Init>

	/*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin | X_STEP_Pin | X_EN_Pin;
 8000c78:	2358      	movs	r3, #88	@ 0x58
 8000c7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4810      	ldr	r0, [pc, #64]	@ (8000cd0 <_ZL12MX_GPIO_Initv+0x168>)
 8000c90:	f003 fdd0 	bl	8004834 <HAL_GPIO_Init>

	/*Configure GPIO pin : HE0_PWM_Pin */
	GPIO_InitStruct.Pin = HE0_PWM_Pin;
 8000c94:	2308      	movs	r3, #8
 8000c96:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HE0_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480a      	ldr	r0, [pc, #40]	@ (8000cd4 <_ZL12MX_GPIO_Initv+0x16c>)
 8000cac:	f003 fdc2 	bl	8004834 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2028      	movs	r0, #40	@ 0x28
 8000cb6:	f000 fde6 	bl	8001886 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cba:	2028      	movs	r0, #40	@ 0x28
 8000cbc:	f000 fdfd 	bl	80018ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	@ 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58021000 	.word	0x58021000
 8000cd0:	58020c00 	.word	0x58020c00
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58020800 	.word	0x58020800

08000cdc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief GPIO External Interrupt Callback Function
 * @param GPIO_Pin GPIO-Pin with active Interrupt
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PWRDET_Pin) {
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000cec:	d102      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x18>
		BatteryAlarm = true;
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x24>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	24000560 	.word	0x24000560

08000d04 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer External Interrupt Callback Function
 * @param htim Pointer to Timer with elapsed Timer Callback
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d14:	d150      	bne.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0xb4>
		if (PWMEnabledX) {
 8000d16:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d046      	beq.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0xb4>
			PWMCounterX++;
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	3301      	adds	r3, #1
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d36:	801a      	strh	r2, [r3, #0]
			if (PWMCounterX >= PWMPeriod) {
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	429a      	cmp	r2, r3
 8000d46:	bf2c      	ite	cs
 8000d48:	2301      	movcs	r3, #1
 8000d4a:	2300      	movcc	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d007      	beq.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x5e>
				PWMCounterX = 0;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	801a      	strh	r2, [r3, #0]
				PWMStepX++;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d60:	6013      	str	r3, [r2, #0]
			}
			if (PWMCounterX < PWMPulseWidth) {
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	bf34      	ite	cc
 8000d72:	2301      	movcc	r3, #1
 8000d74:	2300      	movcs	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x84>
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4814      	ldr	r0, [pc, #80]	@ (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d82:	f003 feff 	bl	8004b84 <HAL_GPIO_WritePin>
 8000d86:	e004      	b.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x8e>
			} else {
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000d8e:	f003 fef9 	bl	8004b84 <HAL_GPIO_WritePin>
			}

			// Überprüfen, ob die Ziel-Schritte erreicht sind
			if (PWMStepX >= TargetStepsX) {
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	bf2c      	ite	cs
 8000d9e:	2301      	movcs	r3, #1
 8000da0:	2300      	movcc	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0xb4>
				PWMEnabledX = false;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2110      	movs	r1, #16
 8000db2:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000db4:	f003 fee6 	bl	8004b84 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24000570 	.word	0x24000570
 8000dc4:	24000568 	.word	0x24000568
 8000dc8:	24000000 	.word	0x24000000
 8000dcc:	24000564 	.word	0x24000564
 8000dd0:	24000002 	.word	0x24000002
 8000dd4:	58020c00 	.word	0x58020c00
 8000dd8:	2400056c 	.word	0x2400056c

08000ddc <HAL_UART_TxCpltCallback>:
/**
 * @brief UART Transmitt Completed Callback Function
 * @param huart Pointer to UART with completed transmitt
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_UART_TxCpltCallback+0x30>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d102      	bne.n	8000df4 <HAL_UART_TxCpltCallback+0x18>
		HAL_HalfDuplex_EnableReceiver(&tmcX.UART_address);
 8000dee:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <HAL_UART_TxCpltCallback+0x34>)
 8000df0:	f008 fa02 	bl	80091f8 <HAL_HalfDuplex_EnableReceiver>
	}
	if (huart->Instance == UART8) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_UART_TxCpltCallback+0x38>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d102      	bne.n	8000e04 <HAL_UART_TxCpltCallback+0x28>
		HAL_HalfDuplex_EnableReceiver(&tmcZ.UART_address);
 8000dfe:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <HAL_UART_TxCpltCallback+0x3c>)
 8000e00:	f008 f9fa 	bl	80091f8 <HAL_HalfDuplex_EnableReceiver>
	}
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	240003b0 	.word	0x240003b0
 8000e14:	40007c00 	.word	0x40007c00
 8000e18:	24000488 	.word	0x24000488

08000e1c <HAL_UARTEx_RxEventCallback>:
 * @brief UART Recive Completed Callback Function
 * @param huart Pointer to UART with recived data
 * @param Size Size of the recived data
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e68 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d108      	bne.n	8000e44 <HAL_UARTEx_RxEventCallback+0x28>
		HAL_UARTEx_ReceiveToIdle_DMA(&tmcX.UART_address,
 8000e32:	2208      	movs	r2, #8
 8000e34:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <HAL_UARTEx_RxEventCallback+0x50>)
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <HAL_UARTEx_RxEventCallback+0x54>)
 8000e38:	f009 fdad 	bl	800a996 <HAL_UARTEx_ReceiveToIdle_DMA>
				(uint8_t*) &tmcX.rxBuffer,
				TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcX.data_received_flag = true;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_UARTEx_RxEventCallback+0x54>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	}
	if (huart->Instance == UART8) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_UARTEx_RxEventCallback+0x58>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d108      	bne.n	8000e60 <HAL_UARTEx_RxEventCallback+0x44>
		HAL_UARTEx_ReceiveToIdle_DMA(&tmcZ.UART_address,
 8000e4e:	2208      	movs	r2, #8
 8000e50:	4909      	ldr	r1, [pc, #36]	@ (8000e78 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000e52:	480a      	ldr	r0, [pc, #40]	@ (8000e7c <HAL_UARTEx_RxEventCallback+0x60>)
 8000e54:	f009 fd9f 	bl	800a996 <HAL_UARTEx_ReceiveToIdle_DMA>
				(uint8_t*) &tmcZ.rxBuffer,
				TMC2209::WRITE_READ_REPLY_DATAGRAM_SIZE);
		tmcZ.data_received_flag = true;
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HAL_UARTEx_RxEventCallback+0x60>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	24000450 	.word	0x24000450
 8000e70:	240003b0 	.word	0x240003b0
 8000e74:	40007c00 	.word	0x40007c00
 8000e78:	24000528 	.word	0x24000528
 8000e7c:	24000488 	.word	0x24000488

08000e80 <_ZL10MPU_Configv>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000e92:	f000 fd2d 	bl	80018f0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000ea6:	2387      	movs	r3, #135	@ 0x87
 8000ea8:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fd4b 	bl	8001960 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f000 fd28 	bl	8001920 <HAL_MPU_Enable>

}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <Error_Handler+0x1c>)
 8000ee4:	f003 fe67 	bl	8004bb6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f000 fbcd 	bl	8001688 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000eee:	bf00      	nop
 8000ef0:	e7f6      	b.n	8000ee0 <Error_Handler+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	58020400 	.word	0x58020400

08000ef8 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d10a      	bne.n	8000f1e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d105      	bne.n	8000f1e <_Z41__static_initialization_and_destruction_0ii+0x26>
TMC2209 tmcX;
 8000f12:	4805      	ldr	r0, [pc, #20]	@ (8000f28 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000f14:	f7ff fb72 	bl	80005fc <_ZN7TMC2209C1Ev>
TMC2209 tmcZ;
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000f1a:	f7ff fb6f 	bl	80005fc <_ZN7TMC2209C1Ev>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240003b0 	.word	0x240003b0
 8000f2c:	24000488 	.word	0x24000488

08000f30 <_GLOBAL__sub_I_hcrc>:
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ffdd 	bl	8000ef8 <_Z41__static_initialization_and_destruction_0ii>
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f4c:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f4e:	f043 0302 	orr.w	r3, r3, #2
 8000f52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x30>)
 8000f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	58024400 	.word	0x58024400

08000f74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb0 <HAL_CRC_MspInit+0x3c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10e      	bne.n	8000fa4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58024c00 	.word	0x58024c00
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc8:	d116      	bne.n	8000ff8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b0d      	ldr	r3, [pc, #52]	@ (8001000 <HAL_TIM_Base_MspInit+0x48>)
 8000fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_TIM_Base_MspInit+0x48>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fda:	4b09      	ldr	r3, [pc, #36]	@ (8001000 <HAL_TIM_Base_MspInit+0x48>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 fc4a 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f000 fc61 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ba      	sub	sp, #232	@ 0xe8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	22b8      	movs	r2, #184	@ 0xb8
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f009 fd59 	bl	800aadc <memset>
  if(huart->Instance==UART8)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4ab0      	ldr	r2, [pc, #704]	@ (80012f0 <HAL_UART_MspInit+0x2ec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	f040 80aa 	bne.w	800118a <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8001036:	f04f 0202 	mov.w	r2, #2
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	4618      	mov	r0, r3
 800104e:	f004 fd87 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001058:	f7ff ff3e 	bl	8000ed8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800105c:	4ba5      	ldr	r3, [pc, #660]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 800105e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001062:	4aa4      	ldr	r2, [pc, #656]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001064:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001068:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800106c:	4ba1      	ldr	r3, [pc, #644]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 800106e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001072:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	4b9e      	ldr	r3, [pc, #632]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a9c      	ldr	r2, [pc, #624]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b9a      	ldr	r3, [pc, #616]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = Z_UART_Pin;
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(Z_UART_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010ba:	4619      	mov	r1, r3
 80010bc:	488e      	ldr	r0, [pc, #568]	@ (80012f8 <HAL_UART_MspInit+0x2f4>)
 80010be:	f003 fbb9 	bl	8004834 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream2;
 80010c2:	4b8e      	ldr	r3, [pc, #568]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010c4:	4a8e      	ldr	r2, [pc, #568]	@ (8001300 <HAL_UART_MspInit+0x2fc>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 80010c8:	4b8c      	ldr	r3, [pc, #560]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010ca:	2252      	movs	r2, #82	@ 0x52
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ce:	4b8b      	ldr	r3, [pc, #556]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010d0:	2240      	movs	r2, #64	@ 0x40
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b89      	ldr	r3, [pc, #548]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b88      	ldr	r3, [pc, #544]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e2:	4b86      	ldr	r3, [pc, #536]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e8:	4b84      	ldr	r3, [pc, #528]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80010ee:	4b83      	ldr	r3, [pc, #524]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f4:	4b81      	ldr	r3, [pc, #516]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fa:	4b80      	ldr	r3, [pc, #512]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001100:	487e      	ldr	r0, [pc, #504]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 8001102:	f000 fd5f 	bl	8001bc4 <HAL_DMA_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800110c:	f7ff fee4 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a7a      	ldr	r2, [pc, #488]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 8001114:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001116:	4a79      	ldr	r2, [pc, #484]	@ (80012fc <HAL_UART_MspInit+0x2f8>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream3;
 800111c:	4b79      	ldr	r3, [pc, #484]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800111e:	4a7a      	ldr	r2, [pc, #488]	@ (8001308 <HAL_UART_MspInit+0x304>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001122:	4b78      	ldr	r3, [pc, #480]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001124:	2251      	movs	r2, #81	@ 0x51
 8001126:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b73      	ldr	r3, [pc, #460]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b71      	ldr	r3, [pc, #452]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001148:	4b6e      	ldr	r3, [pc, #440]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114e:	4b6d      	ldr	r3, [pc, #436]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001154:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800115a:	486a      	ldr	r0, [pc, #424]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800115c:	f000 fd32 	bl	8001bc4 <HAL_DMA_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001166:	f7ff feb7 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_UART_MspInit+0x300>)
 800116e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001172:	4a64      	ldr	r2, [pc, #400]	@ (8001304 <HAL_UART_MspInit+0x300>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2053      	movs	r0, #83	@ 0x53
 800117e:	f000 fb82 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001182:	2053      	movs	r0, #83	@ 0x53
 8001184:	f000 fb99 	bl	80018ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001188:	e0ae      	b.n	80012e8 <HAL_UART_MspInit+0x2e4>
  else if(huart->Instance==USART2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5f      	ldr	r2, [pc, #380]	@ (800130c <HAL_UART_MspInit+0x308>)
 8001190:	4293      	cmp	r3, r2
 8001192:	f040 80a9 	bne.w	80012e8 <HAL_UART_MspInit+0x2e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001196:	f04f 0202 	mov.w	r2, #2
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fcd7 	bl	8005b60 <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80011b8:	f7ff fe8e 	bl	8000ed8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011bc:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c2:	4a4c      	ldr	r2, [pc, #304]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011cc:	4b49      	ldr	r3, [pc, #292]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b46      	ldr	r3, [pc, #280]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	4a44      	ldr	r2, [pc, #272]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011e2:	f043 0308 	orr.w	r3, r3, #8
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ea:	4b42      	ldr	r3, [pc, #264]	@ (80012f4 <HAL_UART_MspInit+0x2f0>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = X_UART_Pin;
 80011f8:	2320      	movs	r3, #32
 80011fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001210:	2307      	movs	r3, #7
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800121a:	4619      	mov	r1, r3
 800121c:	483c      	ldr	r0, [pc, #240]	@ (8001310 <HAL_UART_MspInit+0x30c>)
 800121e:	f003 fb09 	bl	8004834 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream0;
 8001222:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001224:	4a3c      	ldr	r2, [pc, #240]	@ (8001318 <HAL_UART_MspInit+0x314>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001228:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <HAL_UART_MspInit+0x310>)
 800122a:	222c      	movs	r2, #44	@ 0x2c
 800122c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800122e:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001230:	2240      	movs	r2, #64	@ 0x40
 8001232:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001234:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <HAL_UART_MspInit+0x310>)
 800123c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001240:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001242:	4b34      	ldr	r3, [pc, #208]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001248:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <HAL_UART_MspInit+0x310>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800124e:	4b31      	ldr	r3, [pc, #196]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800125a:	4b2e      	ldr	r3, [pc, #184]	@ (8001314 <HAL_UART_MspInit+0x310>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001260:	482c      	ldr	r0, [pc, #176]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001262:	f000 fcaf 	bl	8001bc4 <HAL_DMA_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800126c:	f7ff fe34 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001274:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001276:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <HAL_UART_MspInit+0x310>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream1;
 800127c:	4b27      	ldr	r3, [pc, #156]	@ (800131c <HAL_UART_MspInit+0x318>)
 800127e:	4a28      	ldr	r2, [pc, #160]	@ (8001320 <HAL_UART_MspInit+0x31c>)
 8001280:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <HAL_UART_MspInit+0x318>)
 8001284:	222b      	movs	r2, #43	@ 0x2b
 8001286:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001288:	4b24      	ldr	r3, [pc, #144]	@ (800131c <HAL_UART_MspInit+0x318>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <HAL_UART_MspInit+0x318>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001294:	4b21      	ldr	r3, [pc, #132]	@ (800131c <HAL_UART_MspInit+0x318>)
 8001296:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800129a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <HAL_UART_MspInit+0x318>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80012ba:	4818      	ldr	r0, [pc, #96]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012bc:	f000 fc82 	bl	8001bc4 <HAL_DMA_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 80012c6:	f7ff fe07 	bl	8000ed8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <HAL_UART_MspInit+0x318>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	2026      	movs	r0, #38	@ 0x26
 80012de:	f000 fad2 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012e2:	2026      	movs	r0, #38	@ 0x26
 80012e4:	f000 fae9 	bl	80018ba <HAL_NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	37e8      	adds	r7, #232	@ 0xe8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40007c00 	.word	0x40007c00
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58021000 	.word	0x58021000
 80012fc:	240001cc 	.word	0x240001cc
 8001300:	40020040 	.word	0x40020040
 8001304:	24000244 	.word	0x24000244
 8001308:	40020058 	.word	0x40020058
 800130c:	40004400 	.word	0x40004400
 8001310:	58020c00 	.word	0x58020c00
 8001314:	240002bc 	.word	0x240002bc
 8001318:	40020010 	.word	0x40020010
 800131c:	24000334 	.word	0x24000334
 8001320:	40020028 	.word	0x40020028

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f965 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <DMA1_Stream0_IRQHandler+0x10>)
 800138a:	f001 ff41 	bl	8003210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	240002bc 	.word	0x240002bc

08001398 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <DMA1_Stream1_IRQHandler+0x10>)
 800139e:	f001 ff37 	bl	8003210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	24000334 	.word	0x24000334

080013ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA1_Stream2_IRQHandler+0x10>)
 80013b2:	f001 ff2d 	bl	8003210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	240001cc 	.word	0x240001cc

080013c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA1_Stream3_IRQHandler+0x10>)
 80013c6:	f001 ff23 	bl	8003210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000244 	.word	0x24000244

080013d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <TIM2_IRQHandler+0x10>)
 80013da:	f006 fac2 	bl	8007962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	24000058 	.word	0x24000058

080013e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <USART2_IRQHandler+0x10>)
 80013ee:	f007 fb2b 	bl	8008a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000138 	.word	0x24000138

080013fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWRDET_Pin);
 8001400:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001404:	f003 fbf1 	bl	8004bea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <UART8_IRQHandler+0x10>)
 8001412:	f007 fb19 	bl	8008a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	240000a4 	.word	0x240000a4

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001424:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <SystemInit+0xd0>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a31      	ldr	r2, [pc, #196]	@ (80014f0 <SystemInit+0xd0>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001434:	4b2f      	ldr	r3, [pc, #188]	@ (80014f4 <SystemInit+0xd4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	2b06      	cmp	r3, #6
 800143e:	d807      	bhi.n	8001450 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001440:	4b2c      	ldr	r3, [pc, #176]	@ (80014f4 <SystemInit+0xd4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 030f 	bic.w	r3, r3, #15
 8001448:	4a2a      	ldr	r2, [pc, #168]	@ (80014f4 <SystemInit+0xd4>)
 800144a:	f043 0307 	orr.w	r3, r3, #7
 800144e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <SystemInit+0xd8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <SystemInit+0xd8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <SystemInit+0xd8>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <SystemInit+0xd8>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4924      	ldr	r1, [pc, #144]	@ (80014f8 <SystemInit+0xd8>)
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <SystemInit+0xdc>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800146e:	4b21      	ldr	r3, [pc, #132]	@ (80014f4 <SystemInit+0xd4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <SystemInit+0xd4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 030f 	bic.w	r3, r3, #15
 8001482:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <SystemInit+0xd4>)
 8001484:	f043 0307 	orr.w	r3, r3, #7
 8001488:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <SystemInit+0xd8>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <SystemInit+0xd8>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <SystemInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <SystemInit+0xd8>)
 800149e:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <SystemInit+0xe0>)
 80014a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <SystemInit+0xd8>)
 80014a4:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <SystemInit+0xe4>)
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <SystemInit+0xd8>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <SystemInit+0xe8>)
 80014ac:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <SystemInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014b4:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <SystemInit+0xd8>)
 80014b6:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <SystemInit+0xe8>)
 80014b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <SystemInit+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <SystemInit+0xd8>)
 80014c2:	4a11      	ldr	r2, [pc, #68]	@ (8001508 <SystemInit+0xe8>)
 80014c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <SystemInit+0xd8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <SystemInit+0xd8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <SystemInit+0xd8>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <SystemInit+0xd8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <SystemInit+0xec>)
 80014e0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014e4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	52002000 	.word	0x52002000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001500:	02020200 	.word	0x02020200
 8001504:	01ff0000 	.word	0x01ff0000
 8001508:	01010280 	.word	0x01010280
 800150c:	52004000 	.word	0x52004000

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001548 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001514:	f7ff ff84 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	@ (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f009 fad5 	bl	800aaec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff f873 	bl	800062c <main>
  bx  lr
 8001546:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001548:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800154c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001550:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001554:	0800abbc 	.word	0x0800abbc
  ldr r2, =_sbss
 8001558:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 800155c:	24000578 	.word	0x24000578

08001560 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC3_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 f980 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001570:	f004 f920 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 8001574:	4602      	mov	r2, r0
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_Init+0x68>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	4913      	ldr	r1, [pc, #76]	@ (80015d0 <HAL_Init+0x6c>)
 8001582:	5ccb      	ldrb	r3, [r1, r3]
 8001584:	f003 031f 	and.w	r3, r3, #31
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_Init+0x68>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_Init+0x6c>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	4a0b      	ldr	r2, [pc, #44]	@ (80015d4 <HAL_Init+0x70>)
 80015a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_Init+0x74>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f814 	bl	80015dc <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e002      	b.n	80015c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015be:	f7ff fcbf 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	58024400 	.word	0x58024400
 80015d0:	0800ab68 	.word	0x0800ab68
 80015d4:	24000008 	.word	0x24000008
 80015d8:	24000004 	.word	0x24000004

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015e4:	4b15      	ldr	r3, [pc, #84]	@ (800163c <HAL_InitTick+0x60>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e021      	b.n	8001634 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <HAL_InitTick+0x64>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <HAL_InitTick+0x60>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f965 	bl	80018d6 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f92f 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_InitTick+0x68>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	24000010 	.word	0x24000010
 8001640:	24000004 	.word	0x24000004
 8001644:	2400000c 	.word	0x2400000c

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	24000010 	.word	0x24000010
 800166c:	24000574 	.word	0x24000574

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	24000574 	.word	0x24000574

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24000010 	.word	0x24000010

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	05fa0000 	.word	0x05fa0000

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	@ (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	@ (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	@ (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	@ 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	@ (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff40 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff90 	bl	80017c4 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5f 	bl	8001770 <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff33 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ffa4 	bl	800182c <SysTick_Config>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018f4:	f3bf 8f5f 	dmb	sy
}
 80018f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018fa:	4b07      	ldr	r3, [pc, #28]	@ (8001918 <HAL_MPU_Disable+0x28>)
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_MPU_Disable+0x28>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001904:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_MPU_Disable+0x2c>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	e000ed90 	.word	0xe000ed90

08001920 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001928:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_MPU_Enable+0x38>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_MPU_Enable+0x3c>)
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	4a09      	ldr	r2, [pc, #36]	@ (800195c <HAL_MPU_Enable+0x3c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800193e:	f3bf 8f4f 	dsb	sy
}
 8001942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001944:	f3bf 8f6f 	isb	sy
}
 8001948:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed90 	.word	0xe000ed90
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	785a      	ldrb	r2, [r3, #1]
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <HAL_MPU_ConfigRegion+0x7c>)
 800196e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_MPU_ConfigRegion+0x7c>)
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	4a19      	ldr	r2, [pc, #100]	@ (80019dc <HAL_MPU_ConfigRegion+0x7c>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800197c:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <HAL_MPU_ConfigRegion+0x7c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	7adb      	ldrb	r3, [r3, #11]
 800198e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001990:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7a9b      	ldrb	r3, [r3, #10]
 8001996:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001998:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7b5b      	ldrb	r3, [r3, #13]
 800199e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7b9b      	ldrb	r3, [r3, #14]
 80019a6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7bdb      	ldrb	r3, [r3, #15]
 80019ae:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7a5b      	ldrb	r3, [r3, #9]
 80019b6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a1b      	ldrb	r3, [r3, #8]
 80019be:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019c0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019ca:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019cc:	6113      	str	r3, [r2, #16]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed90 	.word	0xe000ed90

080019e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e054      	b.n	8001a9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7f5b      	ldrb	r3, [r3, #29]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fab6 	bl	8000f74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	791b      	ldrb	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a22      	ldr	r2, [pc, #136]	@ (8001aa4 <HAL_CRC_Init+0xc4>)
 8001a1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0218 	bic.w	r2, r2, #24
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	e00c      	b.n	8001a4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f834 	bl	8001aa8 <HAL_CRCEx_Polynomial_Set>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e028      	b.n	8001a9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	795b      	ldrb	r3, [r3, #5]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5a:	611a      	str	r2, [r3, #16]
 8001a5c:	e004      	b.n	8001a68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6912      	ldr	r2, [r2, #16]
 8001a66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	04c11db7 	.word	0x04c11db7

08001aa8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001ab8:	231f      	movs	r3, #31
 8001aba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
 8001aca:	e063      	b.n	8001b94 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001acc:	bf00      	nop
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	613a      	str	r2, [r7, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <HAL_CRCEx_Polynomial_Set+0x44>
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b18      	cmp	r3, #24
 8001af0:	d846      	bhi.n	8001b80 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001af2:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b87 	.word	0x08001b87
 8001afc:	08001b81 	.word	0x08001b81
 8001b00:	08001b81 	.word	0x08001b81
 8001b04:	08001b81 	.word	0x08001b81
 8001b08:	08001b81 	.word	0x08001b81
 8001b0c:	08001b81 	.word	0x08001b81
 8001b10:	08001b81 	.word	0x08001b81
 8001b14:	08001b81 	.word	0x08001b81
 8001b18:	08001b75 	.word	0x08001b75
 8001b1c:	08001b81 	.word	0x08001b81
 8001b20:	08001b81 	.word	0x08001b81
 8001b24:	08001b81 	.word	0x08001b81
 8001b28:	08001b81 	.word	0x08001b81
 8001b2c:	08001b81 	.word	0x08001b81
 8001b30:	08001b81 	.word	0x08001b81
 8001b34:	08001b81 	.word	0x08001b81
 8001b38:	08001b69 	.word	0x08001b69
 8001b3c:	08001b81 	.word	0x08001b81
 8001b40:	08001b81 	.word	0x08001b81
 8001b44:	08001b81 	.word	0x08001b81
 8001b48:	08001b81 	.word	0x08001b81
 8001b4c:	08001b81 	.word	0x08001b81
 8001b50:	08001b81 	.word	0x08001b81
 8001b54:	08001b81 	.word	0x08001b81
 8001b58:	08001b5d 	.word	0x08001b5d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d913      	bls.n	8001b8a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b66:	e010      	b.n	8001b8a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d90f      	bls.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b72:	e00c      	b.n	8001b8e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	d90b      	bls.n	8001b92 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001b7e:	e008      	b.n	8001b92 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	75fb      	strb	r3, [r7, #23]
        break;
 8001b84:	e006      	b.n	8001b94 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b86:	bf00      	nop
 8001b88:	e004      	b.n	8001b94 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b8a:	bf00      	nop
 8001b8c:	e002      	b.n	8001b94 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001b92:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 0118 	bic.w	r1, r3, #24
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff fd50 	bl	8001670 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e312      	b.n	8002202 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a66      	ldr	r2, [pc, #408]	@ (8001d7c <HAL_DMA_Init+0x1b8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d04a      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <HAL_DMA_Init+0x1bc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d045      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_DMA_Init+0x1c0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a62      	ldr	r2, [pc, #392]	@ (8001d88 <HAL_DMA_Init+0x1c4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d03b      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a60      	ldr	r2, [pc, #384]	@ (8001d8c <HAL_DMA_Init+0x1c8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5f      	ldr	r2, [pc, #380]	@ (8001d90 <HAL_DMA_Init+0x1cc>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d031      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_DMA_Init+0x1d0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02c      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5c      	ldr	r2, [pc, #368]	@ (8001d98 <HAL_DMA_Init+0x1d4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d027      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5a      	ldr	r2, [pc, #360]	@ (8001d9c <HAL_DMA_Init+0x1d8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a59      	ldr	r2, [pc, #356]	@ (8001da0 <HAL_DMA_Init+0x1dc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01d      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a57      	ldr	r2, [pc, #348]	@ (8001da4 <HAL_DMA_Init+0x1e0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a56      	ldr	r2, [pc, #344]	@ (8001da8 <HAL_DMA_Init+0x1e4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a54      	ldr	r2, [pc, #336]	@ (8001dac <HAL_DMA_Init+0x1e8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a53      	ldr	r2, [pc, #332]	@ (8001db0 <HAL_DMA_Init+0x1ec>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	@ (8001db4 <HAL_DMA_Init+0x1f0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_Init+0xb8>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a50      	ldr	r2, [pc, #320]	@ (8001db8 <HAL_DMA_Init+0x1f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Init+0xbc>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_Init+0xbe>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 813c 	beq.w	8001f00 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a37      	ldr	r2, [pc, #220]	@ (8001d7c <HAL_DMA_Init+0x1b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d04a      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a36      	ldr	r2, [pc, #216]	@ (8001d80 <HAL_DMA_Init+0x1bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d045      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a34      	ldr	r2, [pc, #208]	@ (8001d84 <HAL_DMA_Init+0x1c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d040      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a33      	ldr	r2, [pc, #204]	@ (8001d88 <HAL_DMA_Init+0x1c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d03b      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	@ (8001d8c <HAL_DMA_Init+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d036      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a30      	ldr	r2, [pc, #192]	@ (8001d90 <HAL_DMA_Init+0x1cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d031      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <HAL_DMA_Init+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02c      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_DMA_Init+0x1d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d027      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	@ (8001d9c <HAL_DMA_Init+0x1d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d022      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <HAL_DMA_Init+0x1dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d01d      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_DMA_Init+0x1e0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	@ (8001da8 <HAL_DMA_Init+0x1e4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <HAL_DMA_Init+0x1e8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_DMA_Init+0x1ec>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a22      	ldr	r2, [pc, #136]	@ (8001db4 <HAL_DMA_Init+0x1f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Init+0x174>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <HAL_DMA_Init+0x1f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d108      	bne.n	8001d4a <HAL_DMA_Init+0x186>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_DMA_Init+0x196>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d5a:	e02f      	b.n	8001dbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5c:	f7ff fc88 	bl	8001670 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d928      	bls.n	8001dbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2203      	movs	r2, #3
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e242      	b.n	8002202 <HAL_DMA_Init+0x63e>
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	40020028 	.word	0x40020028
 8001d84:	40020040 	.word	0x40020040
 8001d88:	40020058 	.word	0x40020058
 8001d8c:	40020070 	.word	0x40020070
 8001d90:	40020088 	.word	0x40020088
 8001d94:	400200a0 	.word	0x400200a0
 8001d98:	400200b8 	.word	0x400200b8
 8001d9c:	40020410 	.word	0x40020410
 8001da0:	40020428 	.word	0x40020428
 8001da4:	40020440 	.word	0x40020440
 8001da8:	40020458 	.word	0x40020458
 8001dac:	40020470 	.word	0x40020470
 8001db0:	40020488 	.word	0x40020488
 8001db4:	400204a0 	.word	0x400204a0
 8001db8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1c8      	bne.n	8001d5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4b83      	ldr	r3, [pc, #524]	@ (8001fe4 <HAL_DMA_Init+0x420>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001de2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d107      	bne.n	8001e20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b28      	cmp	r3, #40	@ 0x28
 8001e26:	d903      	bls.n	8001e30 <HAL_DMA_Init+0x26c>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e2e:	d91f      	bls.n	8001e70 <HAL_DMA_Init+0x2ac>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e36:	d903      	bls.n	8001e40 <HAL_DMA_Init+0x27c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b42      	cmp	r3, #66	@ 0x42
 8001e3e:	d917      	bls.n	8001e70 <HAL_DMA_Init+0x2ac>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b46      	cmp	r3, #70	@ 0x46
 8001e46:	d903      	bls.n	8001e50 <HAL_DMA_Init+0x28c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b48      	cmp	r3, #72	@ 0x48
 8001e4e:	d90f      	bls.n	8001e70 <HAL_DMA_Init+0x2ac>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b4e      	cmp	r3, #78	@ 0x4e
 8001e56:	d903      	bls.n	8001e60 <HAL_DMA_Init+0x29c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b52      	cmp	r3, #82	@ 0x52
 8001e5e:	d907      	bls.n	8001e70 <HAL_DMA_Init+0x2ac>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b73      	cmp	r3, #115	@ 0x73
 8001e66:	d905      	bls.n	8001e74 <HAL_DMA_Init+0x2b0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b77      	cmp	r3, #119	@ 0x77
 8001e6e:	d801      	bhi.n	8001e74 <HAL_DMA_Init+0x2b0>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_DMA_Init+0x2b2>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f023 0307 	bic.w	r3, r3, #7
 8001e98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d117      	bne.n	8001edc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00e      	beq.n	8001edc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f002 fb2e 	bl	8004520 <DMA_CheckFifoParam>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e192      	b.n	8002202 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f002 fa69 	bl	80043bc <DMA_CalcBaseAndBitshift>
 8001eea:	4603      	mov	r3, r0
 8001eec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	223f      	movs	r2, #63	@ 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e0c8      	b.n	8002092 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a38      	ldr	r2, [pc, #224]	@ (8001fe8 <HAL_DMA_Init+0x424>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d022      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a37      	ldr	r2, [pc, #220]	@ (8001fec <HAL_DMA_Init+0x428>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d01d      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a35      	ldr	r2, [pc, #212]	@ (8001ff0 <HAL_DMA_Init+0x42c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d018      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_DMA_Init+0x430>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a32      	ldr	r2, [pc, #200]	@ (8001ff8 <HAL_DMA_Init+0x434>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a31      	ldr	r2, [pc, #196]	@ (8001ffc <HAL_DMA_Init+0x438>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2f      	ldr	r2, [pc, #188]	@ (8002000 <HAL_DMA_Init+0x43c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_DMA_Init+0x38c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8002004 <HAL_DMA_Init+0x440>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Init+0x390>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_DMA_Init+0x392>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8092 	beq.w	8002080 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_DMA_Init+0x424>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d021      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <HAL_DMA_Init+0x428>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d01c      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_DMA_Init+0x42c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d017      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_DMA_Init+0x430>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d012      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_DMA_Init+0x434>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_DMA_Init+0x438>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_DMA_Init+0x43c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d003      	beq.n	8001faa <HAL_DMA_Init+0x3e6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <HAL_DMA_Init+0x440>)
 8001fa8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_DMA_Init+0x444>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b40      	cmp	r3, #64	@ 0x40
 8001fd0:	d01c      	beq.n	800200c <HAL_DMA_Init+0x448>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b80      	cmp	r3, #128	@ 0x80
 8001fd8:	d102      	bne.n	8001fe0 <HAL_DMA_Init+0x41c>
 8001fda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fde:	e016      	b.n	800200e <HAL_DMA_Init+0x44a>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e014      	b.n	800200e <HAL_DMA_Init+0x44a>
 8001fe4:	fe10803f 	.word	0xfe10803f
 8001fe8:	58025408 	.word	0x58025408
 8001fec:	5802541c 	.word	0x5802541c
 8001ff0:	58025430 	.word	0x58025430
 8001ff4:	58025444 	.word	0x58025444
 8001ff8:	58025458 	.word	0x58025458
 8001ffc:	5802546c 	.word	0x5802546c
 8002000:	58025480 	.word	0x58025480
 8002004:	58025494 	.word	0x58025494
 8002008:	fffe000f 	.word	0xfffe000f
 800200c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68d2      	ldr	r2, [r2, #12]
 8002012:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002014:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800201c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002024:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800202c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800203c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b6e      	ldr	r3, [pc, #440]	@ (800220c <HAL_DMA_Init+0x648>)
 8002054:	4413      	add	r3, r2
 8002056:	4a6e      	ldr	r2, [pc, #440]	@ (8002210 <HAL_DMA_Init+0x64c>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	009a      	lsls	r2, r3, #2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f002 f9a9 	bl	80043bc <DMA_CalcBaseAndBitshift>
 800206a:	4603      	mov	r3, r0
 800206c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2201      	movs	r2, #1
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e008      	b.n	8002092 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0b7      	b.n	8002202 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a5f      	ldr	r2, [pc, #380]	@ (8002214 <HAL_DMA_Init+0x650>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d072      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002218 <HAL_DMA_Init+0x654>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d06d      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_DMA_Init+0x658>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d068      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002220 <HAL_DMA_Init+0x65c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d063      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a59      	ldr	r2, [pc, #356]	@ (8002224 <HAL_DMA_Init+0x660>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a57      	ldr	r2, [pc, #348]	@ (8002228 <HAL_DMA_Init+0x664>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d059      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a56      	ldr	r2, [pc, #344]	@ (800222c <HAL_DMA_Init+0x668>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d054      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a54      	ldr	r2, [pc, #336]	@ (8002230 <HAL_DMA_Init+0x66c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04f      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a53      	ldr	r2, [pc, #332]	@ (8002234 <HAL_DMA_Init+0x670>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a51      	ldr	r2, [pc, #324]	@ (8002238 <HAL_DMA_Init+0x674>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a50      	ldr	r2, [pc, #320]	@ (800223c <HAL_DMA_Init+0x678>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4e      	ldr	r2, [pc, #312]	@ (8002240 <HAL_DMA_Init+0x67c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a4d      	ldr	r2, [pc, #308]	@ (8002244 <HAL_DMA_Init+0x680>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a4b      	ldr	r2, [pc, #300]	@ (8002248 <HAL_DMA_Init+0x684>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <HAL_DMA_Init+0x688>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a48      	ldr	r2, [pc, #288]	@ (8002250 <HAL_DMA_Init+0x68c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a47      	ldr	r2, [pc, #284]	@ (8002254 <HAL_DMA_Init+0x690>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a45      	ldr	r2, [pc, #276]	@ (8002258 <HAL_DMA_Init+0x694>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a44      	ldr	r2, [pc, #272]	@ (800225c <HAL_DMA_Init+0x698>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a42      	ldr	r2, [pc, #264]	@ (8002260 <HAL_DMA_Init+0x69c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a41      	ldr	r2, [pc, #260]	@ (8002264 <HAL_DMA_Init+0x6a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3f      	ldr	r2, [pc, #252]	@ (8002268 <HAL_DMA_Init+0x6a4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a3e      	ldr	r2, [pc, #248]	@ (800226c <HAL_DMA_Init+0x6a8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Init+0x5be>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3c      	ldr	r2, [pc, #240]	@ (8002270 <HAL_DMA_Init+0x6ac>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d101      	bne.n	8002186 <HAL_DMA_Init+0x5c2>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_DMA_Init+0x5c4>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d032      	beq.n	80021f2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f002 fa43 	bl	8004618 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b80      	cmp	r3, #128	@ 0x80
 8002198:	d102      	bne.n	80021a0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_DMA_Init+0x61c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d80c      	bhi.n	80021e0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f002 fac0 	bl	800474c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e008      	b.n	80021f2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	a7fdabf8 	.word	0xa7fdabf8
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	40020010 	.word	0x40020010
 8002218:	40020028 	.word	0x40020028
 800221c:	40020040 	.word	0x40020040
 8002220:	40020058 	.word	0x40020058
 8002224:	40020070 	.word	0x40020070
 8002228:	40020088 	.word	0x40020088
 800222c:	400200a0 	.word	0x400200a0
 8002230:	400200b8 	.word	0x400200b8
 8002234:	40020410 	.word	0x40020410
 8002238:	40020428 	.word	0x40020428
 800223c:	40020440 	.word	0x40020440
 8002240:	40020458 	.word	0x40020458
 8002244:	40020470 	.word	0x40020470
 8002248:	40020488 	.word	0x40020488
 800224c:	400204a0 	.word	0x400204a0
 8002250:	400204b8 	.word	0x400204b8
 8002254:	58025408 	.word	0x58025408
 8002258:	5802541c 	.word	0x5802541c
 800225c:	58025430 	.word	0x58025430
 8002260:	58025444 	.word	0x58025444
 8002264:	58025458 	.word	0x58025458
 8002268:	5802546c 	.word	0x5802546c
 800226c:	58025480 	.word	0x58025480
 8002270:	58025494 	.word	0x58025494

08002274 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e226      	b.n	80026de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_DMA_Start_IT+0x2a>
 800229a:	2302      	movs	r3, #2
 800229c:	e21f      	b.n	80026de <HAL_DMA_Start_IT+0x46a>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	f040 820a 	bne.w	80026c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a68      	ldr	r2, [pc, #416]	@ (8002468 <HAL_DMA_Start_IT+0x1f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d04a      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a66      	ldr	r2, [pc, #408]	@ (800246c <HAL_DMA_Start_IT+0x1f8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d045      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a65      	ldr	r2, [pc, #404]	@ (8002470 <HAL_DMA_Start_IT+0x1fc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d040      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a63      	ldr	r2, [pc, #396]	@ (8002474 <HAL_DMA_Start_IT+0x200>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d03b      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a62      	ldr	r2, [pc, #392]	@ (8002478 <HAL_DMA_Start_IT+0x204>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d036      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a60      	ldr	r2, [pc, #384]	@ (800247c <HAL_DMA_Start_IT+0x208>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d031      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5f      	ldr	r2, [pc, #380]	@ (8002480 <HAL_DMA_Start_IT+0x20c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d02c      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5d      	ldr	r2, [pc, #372]	@ (8002484 <HAL_DMA_Start_IT+0x210>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d027      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5c      	ldr	r2, [pc, #368]	@ (8002488 <HAL_DMA_Start_IT+0x214>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_DMA_Start_IT+0x218>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01d      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a59      	ldr	r2, [pc, #356]	@ (8002490 <HAL_DMA_Start_IT+0x21c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d018      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a57      	ldr	r2, [pc, #348]	@ (8002494 <HAL_DMA_Start_IT+0x220>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a56      	ldr	r2, [pc, #344]	@ (8002498 <HAL_DMA_Start_IT+0x224>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00e      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a54      	ldr	r2, [pc, #336]	@ (800249c <HAL_DMA_Start_IT+0x228>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a53      	ldr	r2, [pc, #332]	@ (80024a0 <HAL_DMA_Start_IT+0x22c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_DMA_Start_IT+0xee>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a51      	ldr	r2, [pc, #324]	@ (80024a4 <HAL_DMA_Start_IT+0x230>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d108      	bne.n	8002374 <HAL_DMA_Start_IT+0x100>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0201 	bic.w	r2, r2, #1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e007      	b.n	8002384 <HAL_DMA_Start_IT+0x110>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f001 fe6a 	bl	8004064 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a34      	ldr	r2, [pc, #208]	@ (8002468 <HAL_DMA_Start_IT+0x1f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04a      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a33      	ldr	r2, [pc, #204]	@ (800246c <HAL_DMA_Start_IT+0x1f8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d045      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a31      	ldr	r2, [pc, #196]	@ (8002470 <HAL_DMA_Start_IT+0x1fc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d040      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_DMA_Start_IT+0x200>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03b      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002478 <HAL_DMA_Start_IT+0x204>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d036      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <HAL_DMA_Start_IT+0x208>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002480 <HAL_DMA_Start_IT+0x20c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02c      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2a      	ldr	r2, [pc, #168]	@ (8002484 <HAL_DMA_Start_IT+0x210>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d027      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a28      	ldr	r2, [pc, #160]	@ (8002488 <HAL_DMA_Start_IT+0x214>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <HAL_DMA_Start_IT+0x218>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <HAL_DMA_Start_IT+0x21c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <HAL_DMA_Start_IT+0x220>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a22      	ldr	r2, [pc, #136]	@ (8002498 <HAL_DMA_Start_IT+0x224>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_DMA_Start_IT+0x228>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1f      	ldr	r2, [pc, #124]	@ (80024a0 <HAL_DMA_Start_IT+0x22c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_DMA_Start_IT+0x1bc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1e      	ldr	r2, [pc, #120]	@ (80024a4 <HAL_DMA_Start_IT+0x230>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Start_IT+0x1c0>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_DMA_Start_IT+0x1c2>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d036      	beq.n	80024a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 021e 	bic.w	r2, r3, #30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0216 	orr.w	r2, r2, #22
 800244c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03e      	beq.n	80024d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0208 	orr.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	e035      	b.n	80024d4 <HAL_DMA_Start_IT+0x260>
 8002468:	40020010 	.word	0x40020010
 800246c:	40020028 	.word	0x40020028
 8002470:	40020040 	.word	0x40020040
 8002474:	40020058 	.word	0x40020058
 8002478:	40020070 	.word	0x40020070
 800247c:	40020088 	.word	0x40020088
 8002480:	400200a0 	.word	0x400200a0
 8002484:	400200b8 	.word	0x400200b8
 8002488:	40020410 	.word	0x40020410
 800248c:	40020428 	.word	0x40020428
 8002490:	40020440 	.word	0x40020440
 8002494:	40020458 	.word	0x40020458
 8002498:	40020470 	.word	0x40020470
 800249c:	40020488 	.word	0x40020488
 80024a0:	400204a0 	.word	0x400204a0
 80024a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 020e 	bic.w	r2, r3, #14
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 020a 	orr.w	r2, r2, #10
 80024ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0204 	orr.w	r2, r2, #4
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a83      	ldr	r2, [pc, #524]	@ (80026e8 <HAL_DMA_Start_IT+0x474>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d072      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a82      	ldr	r2, [pc, #520]	@ (80026ec <HAL_DMA_Start_IT+0x478>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d06d      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a80      	ldr	r2, [pc, #512]	@ (80026f0 <HAL_DMA_Start_IT+0x47c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d068      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7f      	ldr	r2, [pc, #508]	@ (80026f4 <HAL_DMA_Start_IT+0x480>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d063      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7d      	ldr	r2, [pc, #500]	@ (80026f8 <HAL_DMA_Start_IT+0x484>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d05e      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7c      	ldr	r2, [pc, #496]	@ (80026fc <HAL_DMA_Start_IT+0x488>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d059      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7a      	ldr	r2, [pc, #488]	@ (8002700 <HAL_DMA_Start_IT+0x48c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d054      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a79      	ldr	r2, [pc, #484]	@ (8002704 <HAL_DMA_Start_IT+0x490>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d04f      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a77      	ldr	r2, [pc, #476]	@ (8002708 <HAL_DMA_Start_IT+0x494>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d04a      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a76      	ldr	r2, [pc, #472]	@ (800270c <HAL_DMA_Start_IT+0x498>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d045      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a74      	ldr	r2, [pc, #464]	@ (8002710 <HAL_DMA_Start_IT+0x49c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d040      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a73      	ldr	r2, [pc, #460]	@ (8002714 <HAL_DMA_Start_IT+0x4a0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d03b      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a71      	ldr	r2, [pc, #452]	@ (8002718 <HAL_DMA_Start_IT+0x4a4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d036      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a70      	ldr	r2, [pc, #448]	@ (800271c <HAL_DMA_Start_IT+0x4a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d031      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_DMA_Start_IT+0x4ac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d02c      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6d      	ldr	r2, [pc, #436]	@ (8002724 <HAL_DMA_Start_IT+0x4b0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d027      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6b      	ldr	r2, [pc, #428]	@ (8002728 <HAL_DMA_Start_IT+0x4b4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6a      	ldr	r2, [pc, #424]	@ (800272c <HAL_DMA_Start_IT+0x4b8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01d      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a68      	ldr	r2, [pc, #416]	@ (8002730 <HAL_DMA_Start_IT+0x4bc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d018      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a67      	ldr	r2, [pc, #412]	@ (8002734 <HAL_DMA_Start_IT+0x4c0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d013      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_DMA_Start_IT+0x4c4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00e      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a64      	ldr	r2, [pc, #400]	@ (800273c <HAL_DMA_Start_IT+0x4c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a62      	ldr	r2, [pc, #392]	@ (8002740 <HAL_DMA_Start_IT+0x4cc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Start_IT+0x350>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_DMA_Start_IT+0x4d0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_DMA_Start_IT+0x354>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_DMA_Start_IT+0x356>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01a      	beq.n	8002604 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002602:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a37      	ldr	r2, [pc, #220]	@ (80026e8 <HAL_DMA_Start_IT+0x474>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d04a      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a36      	ldr	r2, [pc, #216]	@ (80026ec <HAL_DMA_Start_IT+0x478>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d045      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a34      	ldr	r2, [pc, #208]	@ (80026f0 <HAL_DMA_Start_IT+0x47c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d040      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a33      	ldr	r2, [pc, #204]	@ (80026f4 <HAL_DMA_Start_IT+0x480>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d03b      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a31      	ldr	r2, [pc, #196]	@ (80026f8 <HAL_DMA_Start_IT+0x484>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d036      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <HAL_DMA_Start_IT+0x488>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d031      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2e      	ldr	r2, [pc, #184]	@ (8002700 <HAL_DMA_Start_IT+0x48c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02c      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_DMA_Start_IT+0x490>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d027      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_DMA_Start_IT+0x494>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d022      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2a      	ldr	r2, [pc, #168]	@ (800270c <HAL_DMA_Start_IT+0x498>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d01d      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a28      	ldr	r2, [pc, #160]	@ (8002710 <HAL_DMA_Start_IT+0x49c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d018      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a27      	ldr	r2, [pc, #156]	@ (8002714 <HAL_DMA_Start_IT+0x4a0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a25      	ldr	r2, [pc, #148]	@ (8002718 <HAL_DMA_Start_IT+0x4a4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a24      	ldr	r2, [pc, #144]	@ (800271c <HAL_DMA_Start_IT+0x4a8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_DMA_Start_IT+0x4ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Start_IT+0x430>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_DMA_Start_IT+0x4b0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <HAL_DMA_Start_IT+0x442>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e012      	b.n	80026dc <HAL_DMA_Start_IT+0x468>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e009      	b.n	80026dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40020010 	.word	0x40020010
 80026ec:	40020028 	.word	0x40020028
 80026f0:	40020040 	.word	0x40020040
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40020070 	.word	0x40020070
 80026fc:	40020088 	.word	0x40020088
 8002700:	400200a0 	.word	0x400200a0
 8002704:	400200b8 	.word	0x400200b8
 8002708:	40020410 	.word	0x40020410
 800270c:	40020428 	.word	0x40020428
 8002710:	40020440 	.word	0x40020440
 8002714:	40020458 	.word	0x40020458
 8002718:	40020470 	.word	0x40020470
 800271c:	40020488 	.word	0x40020488
 8002720:	400204a0 	.word	0x400204a0
 8002724:	400204b8 	.word	0x400204b8
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494

08002748 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002750:	f7fe ff8e 	bl	8001670 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e2dc      	b.n	8002d1a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d008      	beq.n	800277e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2280      	movs	r2, #128	@ 0x80
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e2cd      	b.n	8002d1a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a76      	ldr	r2, [pc, #472]	@ (800295c <HAL_DMA_Abort+0x214>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04a      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a74      	ldr	r2, [pc, #464]	@ (8002960 <HAL_DMA_Abort+0x218>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d045      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a73      	ldr	r2, [pc, #460]	@ (8002964 <HAL_DMA_Abort+0x21c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a71      	ldr	r2, [pc, #452]	@ (8002968 <HAL_DMA_Abort+0x220>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03b      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a70      	ldr	r2, [pc, #448]	@ (800296c <HAL_DMA_Abort+0x224>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d036      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002970 <HAL_DMA_Abort+0x228>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6d      	ldr	r2, [pc, #436]	@ (8002974 <HAL_DMA_Abort+0x22c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02c      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002978 <HAL_DMA_Abort+0x230>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a6a      	ldr	r2, [pc, #424]	@ (800297c <HAL_DMA_Abort+0x234>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a68      	ldr	r2, [pc, #416]	@ (8002980 <HAL_DMA_Abort+0x238>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a67      	ldr	r2, [pc, #412]	@ (8002984 <HAL_DMA_Abort+0x23c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a65      	ldr	r2, [pc, #404]	@ (8002988 <HAL_DMA_Abort+0x240>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a64      	ldr	r2, [pc, #400]	@ (800298c <HAL_DMA_Abort+0x244>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a62      	ldr	r2, [pc, #392]	@ (8002990 <HAL_DMA_Abort+0x248>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a61      	ldr	r2, [pc, #388]	@ (8002994 <HAL_DMA_Abort+0x24c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort+0xd6>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a5f      	ldr	r2, [pc, #380]	@ (8002998 <HAL_DMA_Abort+0x250>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Abort+0xda>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_DMA_Abort+0xdc>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 021e 	bic.w	r2, r2, #30
 8002836:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002846:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e00a      	b.n	8002866 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 020e 	bic.w	r2, r2, #14
 800285e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3c      	ldr	r2, [pc, #240]	@ (800295c <HAL_DMA_Abort+0x214>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d072      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3a      	ldr	r2, [pc, #232]	@ (8002960 <HAL_DMA_Abort+0x218>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d06d      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a39      	ldr	r2, [pc, #228]	@ (8002964 <HAL_DMA_Abort+0x21c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d068      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a37      	ldr	r2, [pc, #220]	@ (8002968 <HAL_DMA_Abort+0x220>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d063      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a36      	ldr	r2, [pc, #216]	@ (800296c <HAL_DMA_Abort+0x224>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d05e      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a34      	ldr	r2, [pc, #208]	@ (8002970 <HAL_DMA_Abort+0x228>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d059      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a33      	ldr	r2, [pc, #204]	@ (8002974 <HAL_DMA_Abort+0x22c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d054      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a31      	ldr	r2, [pc, #196]	@ (8002978 <HAL_DMA_Abort+0x230>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d04f      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a30      	ldr	r2, [pc, #192]	@ (800297c <HAL_DMA_Abort+0x234>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d04a      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002980 <HAL_DMA_Abort+0x238>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d045      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_DMA_Abort+0x23c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d040      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <HAL_DMA_Abort+0x240>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d03b      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_DMA_Abort+0x244>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d036      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <HAL_DMA_Abort+0x248>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d031      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_DMA_Abort+0x24c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d02c      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	@ (8002998 <HAL_DMA_Abort+0x250>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d027      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	@ (800299c <HAL_DMA_Abort+0x254>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	@ (80029a0 <HAL_DMA_Abort+0x258>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01d      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_DMA_Abort+0x25c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d018      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	@ (80029a8 <HAL_DMA_Abort+0x260>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	@ (80029ac <HAL_DMA_Abort+0x264>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00e      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <HAL_DMA_Abort+0x268>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_DMA_Abort+0x26c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort+0x20e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	@ (80029b8 <HAL_DMA_Abort+0x270>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d132      	bne.n	80029bc <HAL_DMA_Abort+0x274>
 8002956:	2301      	movs	r3, #1
 8002958:	e031      	b.n	80029be <HAL_DMA_Abort+0x276>
 800295a:	bf00      	nop
 800295c:	40020010 	.word	0x40020010
 8002960:	40020028 	.word	0x40020028
 8002964:	40020040 	.word	0x40020040
 8002968:	40020058 	.word	0x40020058
 800296c:	40020070 	.word	0x40020070
 8002970:	40020088 	.word	0x40020088
 8002974:	400200a0 	.word	0x400200a0
 8002978:	400200b8 	.word	0x400200b8
 800297c:	40020410 	.word	0x40020410
 8002980:	40020428 	.word	0x40020428
 8002984:	40020440 	.word	0x40020440
 8002988:	40020458 	.word	0x40020458
 800298c:	40020470 	.word	0x40020470
 8002990:	40020488 	.word	0x40020488
 8002994:	400204a0 	.word	0x400204a0
 8002998:	400204b8 	.word	0x400204b8
 800299c:	58025408 	.word	0x58025408
 80029a0:	5802541c 	.word	0x5802541c
 80029a4:	58025430 	.word	0x58025430
 80029a8:	58025444 	.word	0x58025444
 80029ac:	58025458 	.word	0x58025458
 80029b0:	5802546c 	.word	0x5802546c
 80029b4:	58025480 	.word	0x58025480
 80029b8:	58025494 	.word	0x58025494
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6d      	ldr	r2, [pc, #436]	@ (8002b8c <HAL_DMA_Abort+0x444>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04a      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002b90 <HAL_DMA_Abort+0x448>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d045      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002b94 <HAL_DMA_Abort+0x44c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d040      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a68      	ldr	r2, [pc, #416]	@ (8002b98 <HAL_DMA_Abort+0x450>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d03b      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a67      	ldr	r2, [pc, #412]	@ (8002b9c <HAL_DMA_Abort+0x454>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d036      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_DMA_Abort+0x458>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d031      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a64      	ldr	r2, [pc, #400]	@ (8002ba4 <HAL_DMA_Abort+0x45c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d02c      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a62      	ldr	r2, [pc, #392]	@ (8002ba8 <HAL_DMA_Abort+0x460>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d027      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a61      	ldr	r2, [pc, #388]	@ (8002bac <HAL_DMA_Abort+0x464>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5f      	ldr	r2, [pc, #380]	@ (8002bb0 <HAL_DMA_Abort+0x468>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb4 <HAL_DMA_Abort+0x46c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb8 <HAL_DMA_Abort+0x470>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bbc <HAL_DMA_Abort+0x474>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a59      	ldr	r2, [pc, #356]	@ (8002bc0 <HAL_DMA_Abort+0x478>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <HAL_DMA_Abort+0x47c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_Abort+0x32a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a56      	ldr	r2, [pc, #344]	@ (8002bc8 <HAL_DMA_Abort+0x480>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <HAL_DMA_Abort+0x33c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e007      	b.n	8002a94 <HAL_DMA_Abort+0x34c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a94:	e013      	b.n	8002abe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a96:	f7fe fdeb 	bl	8001670 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	d90c      	bls.n	8002abe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e12d      	b.n	8002d1a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e5      	bne.n	8002a96 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2f      	ldr	r2, [pc, #188]	@ (8002b8c <HAL_DMA_Abort+0x444>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d04a      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b90 <HAL_DMA_Abort+0x448>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d045      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8002b94 <HAL_DMA_Abort+0x44c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d040      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <HAL_DMA_Abort+0x450>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d03b      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a29      	ldr	r2, [pc, #164]	@ (8002b9c <HAL_DMA_Abort+0x454>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d036      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a27      	ldr	r2, [pc, #156]	@ (8002ba0 <HAL_DMA_Abort+0x458>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ba4 <HAL_DMA_Abort+0x45c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d02c      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a24      	ldr	r2, [pc, #144]	@ (8002ba8 <HAL_DMA_Abort+0x460>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d027      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a23      	ldr	r2, [pc, #140]	@ (8002bac <HAL_DMA_Abort+0x464>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a21      	ldr	r2, [pc, #132]	@ (8002bb0 <HAL_DMA_Abort+0x468>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a20      	ldr	r2, [pc, #128]	@ (8002bb4 <HAL_DMA_Abort+0x46c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_DMA_Abort+0x470>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <HAL_DMA_Abort+0x474>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <HAL_DMA_Abort+0x478>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_DMA_Abort+0x47c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_DMA_Abort+0x422>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <HAL_DMA_Abort+0x480>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_DMA_Abort+0x426>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_Abort+0x428>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d02b      	beq.n	8002bcc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b78:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	223f      	movs	r2, #63	@ 0x3f
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	e02a      	b.n	8002be2 <HAL_DMA_Abort+0x49a>
 8002b8c:	40020010 	.word	0x40020010
 8002b90:	40020028 	.word	0x40020028
 8002b94:	40020040 	.word	0x40020040
 8002b98:	40020058 	.word	0x40020058
 8002b9c:	40020070 	.word	0x40020070
 8002ba0:	40020088 	.word	0x40020088
 8002ba4:	400200a0 	.word	0x400200a0
 8002ba8:	400200b8 	.word	0x400200b8
 8002bac:	40020410 	.word	0x40020410
 8002bb0:	40020428 	.word	0x40020428
 8002bb4:	40020440 	.word	0x40020440
 8002bb8:	40020458 	.word	0x40020458
 8002bbc:	40020470 	.word	0x40020470
 8002bc0:	40020488 	.word	0x40020488
 8002bc4:	400204a0 	.word	0x400204a0
 8002bc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a4f      	ldr	r2, [pc, #316]	@ (8002d24 <HAL_DMA_Abort+0x5dc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d072      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8002d28 <HAL_DMA_Abort+0x5e0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d06d      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4c      	ldr	r2, [pc, #304]	@ (8002d2c <HAL_DMA_Abort+0x5e4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d068      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4a      	ldr	r2, [pc, #296]	@ (8002d30 <HAL_DMA_Abort+0x5e8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d063      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a49      	ldr	r2, [pc, #292]	@ (8002d34 <HAL_DMA_Abort+0x5ec>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d05e      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a47      	ldr	r2, [pc, #284]	@ (8002d38 <HAL_DMA_Abort+0x5f0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d059      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a46      	ldr	r2, [pc, #280]	@ (8002d3c <HAL_DMA_Abort+0x5f4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d054      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a44      	ldr	r2, [pc, #272]	@ (8002d40 <HAL_DMA_Abort+0x5f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d04f      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a43      	ldr	r2, [pc, #268]	@ (8002d44 <HAL_DMA_Abort+0x5fc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d04a      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <HAL_DMA_Abort+0x600>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d045      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a40      	ldr	r2, [pc, #256]	@ (8002d4c <HAL_DMA_Abort+0x604>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d040      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3e      	ldr	r2, [pc, #248]	@ (8002d50 <HAL_DMA_Abort+0x608>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d03b      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8002d54 <HAL_DMA_Abort+0x60c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d036      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3b      	ldr	r2, [pc, #236]	@ (8002d58 <HAL_DMA_Abort+0x610>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d031      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3a      	ldr	r2, [pc, #232]	@ (8002d5c <HAL_DMA_Abort+0x614>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d02c      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a38      	ldr	r2, [pc, #224]	@ (8002d60 <HAL_DMA_Abort+0x618>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d027      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a37      	ldr	r2, [pc, #220]	@ (8002d64 <HAL_DMA_Abort+0x61c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a35      	ldr	r2, [pc, #212]	@ (8002d68 <HAL_DMA_Abort+0x620>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a34      	ldr	r2, [pc, #208]	@ (8002d6c <HAL_DMA_Abort+0x624>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a32      	ldr	r2, [pc, #200]	@ (8002d70 <HAL_DMA_Abort+0x628>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a31      	ldr	r2, [pc, #196]	@ (8002d74 <HAL_DMA_Abort+0x62c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <HAL_DMA_Abort+0x630>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002d7c <HAL_DMA_Abort+0x634>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Abort+0x58a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d80 <HAL_DMA_Abort+0x638>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Abort+0x58e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_Abort+0x590>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ce4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d06:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40020010 	.word	0x40020010
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40020040 	.word	0x40020040
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40020088 	.word	0x40020088
 8002d3c:	400200a0 	.word	0x400200a0
 8002d40:	400200b8 	.word	0x400200b8
 8002d44:	40020410 	.word	0x40020410
 8002d48:	40020428 	.word	0x40020428
 8002d4c:	40020440 	.word	0x40020440
 8002d50:	40020458 	.word	0x40020458
 8002d54:	40020470 	.word	0x40020470
 8002d58:	40020488 	.word	0x40020488
 8002d5c:	400204a0 	.word	0x400204a0
 8002d60:	400204b8 	.word	0x400204b8
 8002d64:	58025408 	.word	0x58025408
 8002d68:	5802541c 	.word	0x5802541c
 8002d6c:	58025430 	.word	0x58025430
 8002d70:	58025444 	.word	0x58025444
 8002d74:	58025458 	.word	0x58025458
 8002d78:	5802546c 	.word	0x5802546c
 8002d7c:	58025480 	.word	0x58025480
 8002d80:	58025494 	.word	0x58025494

08002d84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e237      	b.n	8003206 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d004      	beq.n	8002dac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	@ 0x80
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e22c      	b.n	8003206 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5b      	ldr	r2, [pc, #364]	@ (8002f28 <HAL_DMA_Abort_IT+0x1a4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a59      	ldr	r2, [pc, #356]	@ (8002f2c <HAL_DMA_Abort_IT+0x1a8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a58      	ldr	r2, [pc, #352]	@ (8002f30 <HAL_DMA_Abort_IT+0x1ac>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a55      	ldr	r2, [pc, #340]	@ (8002f38 <HAL_DMA_Abort_IT+0x1b4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a53      	ldr	r2, [pc, #332]	@ (8002f3c <HAL_DMA_Abort_IT+0x1b8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a52      	ldr	r2, [pc, #328]	@ (8002f40 <HAL_DMA_Abort_IT+0x1bc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a50      	ldr	r2, [pc, #320]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4f      	ldr	r2, [pc, #316]	@ (8002f48 <HAL_DMA_Abort_IT+0x1c4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4d      	ldr	r2, [pc, #308]	@ (8002f4c <HAL_DMA_Abort_IT+0x1c8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002f50 <HAL_DMA_Abort_IT+0x1cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a49      	ldr	r2, [pc, #292]	@ (8002f58 <HAL_DMA_Abort_IT+0x1d4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a47      	ldr	r2, [pc, #284]	@ (8002f5c <HAL_DMA_Abort_IT+0x1d8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xc8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a46      	ldr	r2, [pc, #280]	@ (8002f60 <HAL_DMA_Abort_IT+0x1dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_DMA_Abort_IT+0xcc>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_DMA_Abort_IT+0xce>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8086 	beq.w	8002f64 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2f      	ldr	r2, [pc, #188]	@ (8002f24 <HAL_DMA_Abort_IT+0x1a0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f28 <HAL_DMA_Abort_IT+0x1a4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d045      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a2c      	ldr	r2, [pc, #176]	@ (8002f2c <HAL_DMA_Abort_IT+0x1a8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d040      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <HAL_DMA_Abort_IT+0x1ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d03b      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a29      	ldr	r2, [pc, #164]	@ (8002f34 <HAL_DMA_Abort_IT+0x1b0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d036      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a28      	ldr	r2, [pc, #160]	@ (8002f38 <HAL_DMA_Abort_IT+0x1b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d031      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a26      	ldr	r2, [pc, #152]	@ (8002f3c <HAL_DMA_Abort_IT+0x1b8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a25      	ldr	r2, [pc, #148]	@ (8002f40 <HAL_DMA_Abort_IT+0x1bc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d027      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a23      	ldr	r2, [pc, #140]	@ (8002f44 <HAL_DMA_Abort_IT+0x1c0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_DMA_Abort_IT+0x1c4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	@ (8002f4c <HAL_DMA_Abort_IT+0x1c8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f50 <HAL_DMA_Abort_IT+0x1cc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <HAL_DMA_Abort_IT+0x1d0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <HAL_DMA_Abort_IT+0x1d4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f5c <HAL_DMA_Abort_IT+0x1d8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x17c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <HAL_DMA_Abort_IT+0x1dc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <HAL_DMA_Abort_IT+0x18e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e178      	b.n	8003204 <HAL_DMA_Abort_IT+0x480>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e16f      	b.n	8003204 <HAL_DMA_Abort_IT+0x480>
 8002f24:	40020010 	.word	0x40020010
 8002f28:	40020028 	.word	0x40020028
 8002f2c:	40020040 	.word	0x40020040
 8002f30:	40020058 	.word	0x40020058
 8002f34:	40020070 	.word	0x40020070
 8002f38:	40020088 	.word	0x40020088
 8002f3c:	400200a0 	.word	0x400200a0
 8002f40:	400200b8 	.word	0x400200b8
 8002f44:	40020410 	.word	0x40020410
 8002f48:	40020428 	.word	0x40020428
 8002f4c:	40020440 	.word	0x40020440
 8002f50:	40020458 	.word	0x40020458
 8002f54:	40020470 	.word	0x40020470
 8002f58:	40020488 	.word	0x40020488
 8002f5c:	400204a0 	.word	0x400204a0
 8002f60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 020e 	bic.w	r2, r2, #14
 8002f72:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6c      	ldr	r2, [pc, #432]	@ (800312c <HAL_DMA_Abort_IT+0x3a8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d04a      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6b      	ldr	r2, [pc, #428]	@ (8003130 <HAL_DMA_Abort_IT+0x3ac>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d045      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a69      	ldr	r2, [pc, #420]	@ (8003134 <HAL_DMA_Abort_IT+0x3b0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d040      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a68      	ldr	r2, [pc, #416]	@ (8003138 <HAL_DMA_Abort_IT+0x3b4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d03b      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a66      	ldr	r2, [pc, #408]	@ (800313c <HAL_DMA_Abort_IT+0x3b8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d036      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a65      	ldr	r2, [pc, #404]	@ (8003140 <HAL_DMA_Abort_IT+0x3bc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d031      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a63      	ldr	r2, [pc, #396]	@ (8003144 <HAL_DMA_Abort_IT+0x3c0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02c      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a62      	ldr	r2, [pc, #392]	@ (8003148 <HAL_DMA_Abort_IT+0x3c4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d027      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a60      	ldr	r2, [pc, #384]	@ (800314c <HAL_DMA_Abort_IT+0x3c8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d022      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8003150 <HAL_DMA_Abort_IT+0x3cc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01d      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8003154 <HAL_DMA_Abort_IT+0x3d0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d018      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8003158 <HAL_DMA_Abort_IT+0x3d4>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800315c <HAL_DMA_Abort_IT+0x3d8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00e      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a59      	ldr	r2, [pc, #356]	@ (8003160 <HAL_DMA_Abort_IT+0x3dc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d009      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a57      	ldr	r2, [pc, #348]	@ (8003164 <HAL_DMA_Abort_IT+0x3e0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <HAL_DMA_Abort_IT+0x290>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_DMA_Abort_IT+0x3e4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <HAL_DMA_Abort_IT+0x2a2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e007      	b.n	8003036 <HAL_DMA_Abort_IT+0x2b2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3c      	ldr	r2, [pc, #240]	@ (800312c <HAL_DMA_Abort_IT+0x3a8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d072      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	@ (8003130 <HAL_DMA_Abort_IT+0x3ac>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d06d      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a39      	ldr	r2, [pc, #228]	@ (8003134 <HAL_DMA_Abort_IT+0x3b0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d068      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a37      	ldr	r2, [pc, #220]	@ (8003138 <HAL_DMA_Abort_IT+0x3b4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d063      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a36      	ldr	r2, [pc, #216]	@ (800313c <HAL_DMA_Abort_IT+0x3b8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d05e      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a34      	ldr	r2, [pc, #208]	@ (8003140 <HAL_DMA_Abort_IT+0x3bc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d059      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a33      	ldr	r2, [pc, #204]	@ (8003144 <HAL_DMA_Abort_IT+0x3c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d054      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a31      	ldr	r2, [pc, #196]	@ (8003148 <HAL_DMA_Abort_IT+0x3c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d04f      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a30      	ldr	r2, [pc, #192]	@ (800314c <HAL_DMA_Abort_IT+0x3c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04a      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2e      	ldr	r2, [pc, #184]	@ (8003150 <HAL_DMA_Abort_IT+0x3cc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d045      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <HAL_DMA_Abort_IT+0x3d0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d040      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003158 <HAL_DMA_Abort_IT+0x3d4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d03b      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2a      	ldr	r2, [pc, #168]	@ (800315c <HAL_DMA_Abort_IT+0x3d8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d036      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_DMA_Abort_IT+0x3dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a27      	ldr	r2, [pc, #156]	@ (8003164 <HAL_DMA_Abort_IT+0x3e0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d02c      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a25      	ldr	r2, [pc, #148]	@ (8003168 <HAL_DMA_Abort_IT+0x3e4>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d027      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a24      	ldr	r2, [pc, #144]	@ (800316c <HAL_DMA_Abort_IT+0x3e8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a22      	ldr	r2, [pc, #136]	@ (8003170 <HAL_DMA_Abort_IT+0x3ec>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a21      	ldr	r2, [pc, #132]	@ (8003174 <HAL_DMA_Abort_IT+0x3f0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003178 <HAL_DMA_Abort_IT+0x3f4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <HAL_DMA_Abort_IT+0x3f8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1c      	ldr	r2, [pc, #112]	@ (8003180 <HAL_DMA_Abort_IT+0x3fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <HAL_DMA_Abort_IT+0x400>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_Abort_IT+0x3a2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a19      	ldr	r2, [pc, #100]	@ (8003188 <HAL_DMA_Abort_IT+0x404>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d132      	bne.n	800318c <HAL_DMA_Abort_IT+0x408>
 8003126:	2301      	movs	r3, #1
 8003128:	e031      	b.n	800318e <HAL_DMA_Abort_IT+0x40a>
 800312a:	bf00      	nop
 800312c:	40020010 	.word	0x40020010
 8003130:	40020028 	.word	0x40020028
 8003134:	40020040 	.word	0x40020040
 8003138:	40020058 	.word	0x40020058
 800313c:	40020070 	.word	0x40020070
 8003140:	40020088 	.word	0x40020088
 8003144:	400200a0 	.word	0x400200a0
 8003148:	400200b8 	.word	0x400200b8
 800314c:	40020410 	.word	0x40020410
 8003150:	40020428 	.word	0x40020428
 8003154:	40020440 	.word	0x40020440
 8003158:	40020458 	.word	0x40020458
 800315c:	40020470 	.word	0x40020470
 8003160:	40020488 	.word	0x40020488
 8003164:	400204a0 	.word	0x400204a0
 8003168:	400204b8 	.word	0x400204b8
 800316c:	58025408 	.word	0x58025408
 8003170:	5802541c 	.word	0x5802541c
 8003174:	58025430 	.word	0x58025430
 8003178:	58025444 	.word	0x58025444
 800317c:	58025458 	.word	0x58025458
 8003180:	5802546c 	.word	0x5802546c
 8003184:	58025480 	.word	0x58025480
 8003188:	58025494 	.word	0x58025494
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	2201      	movs	r2, #1
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop

08003210 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	@ 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800321c:	4b67      	ldr	r3, [pc, #412]	@ (80033bc <HAL_DMA_IRQHandler+0x1ac>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a67      	ldr	r2, [pc, #412]	@ (80033c0 <HAL_DMA_IRQHandler+0x1b0>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5f      	ldr	r2, [pc, #380]	@ (80033c4 <HAL_DMA_IRQHandler+0x1b4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d04a      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5d      	ldr	r2, [pc, #372]	@ (80033c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5c      	ldr	r2, [pc, #368]	@ (80033cc <HAL_DMA_IRQHandler+0x1bc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d040      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5a      	ldr	r2, [pc, #360]	@ (80033d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d03b      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a59      	ldr	r2, [pc, #356]	@ (80033d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d036      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a57      	ldr	r2, [pc, #348]	@ (80033d8 <HAL_DMA_IRQHandler+0x1c8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d031      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a56      	ldr	r2, [pc, #344]	@ (80033dc <HAL_DMA_IRQHandler+0x1cc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d02c      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a54      	ldr	r2, [pc, #336]	@ (80033e0 <HAL_DMA_IRQHandler+0x1d0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d027      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a53      	ldr	r2, [pc, #332]	@ (80033e4 <HAL_DMA_IRQHandler+0x1d4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a51      	ldr	r2, [pc, #324]	@ (80033e8 <HAL_DMA_IRQHandler+0x1d8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d01d      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a50      	ldr	r2, [pc, #320]	@ (80033ec <HAL_DMA_IRQHandler+0x1dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d018      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	@ (80033f0 <HAL_DMA_IRQHandler+0x1e0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_DMA_IRQHandler+0x1e4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00e      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	@ (80033f8 <HAL_DMA_IRQHandler+0x1e8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4a      	ldr	r2, [pc, #296]	@ (80033fc <HAL_DMA_IRQHandler+0x1ec>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d004      	beq.n	80032e2 <HAL_DMA_IRQHandler+0xd2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a48      	ldr	r2, [pc, #288]	@ (8003400 <HAL_DMA_IRQHandler+0x1f0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_DMA_IRQHandler+0xd6>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_DMA_IRQHandler+0xd8>
 80032e6:	2300      	movs	r3, #0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 842b 	beq.w	8003b44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2208      	movs	r2, #8
 80032f8:	409a      	lsls	r2, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80a2 	beq.w	8003448 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a2e      	ldr	r2, [pc, #184]	@ (80033c4 <HAL_DMA_IRQHandler+0x1b4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2d      	ldr	r2, [pc, #180]	@ (80033c8 <HAL_DMA_IRQHandler+0x1b8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2b      	ldr	r2, [pc, #172]	@ (80033cc <HAL_DMA_IRQHandler+0x1bc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2a      	ldr	r2, [pc, #168]	@ (80033d0 <HAL_DMA_IRQHandler+0x1c0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a28      	ldr	r2, [pc, #160]	@ (80033d4 <HAL_DMA_IRQHandler+0x1c4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <HAL_DMA_IRQHandler+0x1c8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <HAL_DMA_IRQHandler+0x1cc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a24      	ldr	r2, [pc, #144]	@ (80033e0 <HAL_DMA_IRQHandler+0x1d0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a22      	ldr	r2, [pc, #136]	@ (80033e4 <HAL_DMA_IRQHandler+0x1d4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a21      	ldr	r2, [pc, #132]	@ (80033e8 <HAL_DMA_IRQHandler+0x1d8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1f      	ldr	r2, [pc, #124]	@ (80033ec <HAL_DMA_IRQHandler+0x1dc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_DMA_IRQHandler+0x1e0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <HAL_DMA_IRQHandler+0x1e4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <HAL_DMA_IRQHandler+0x1e8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <HAL_DMA_IRQHandler+0x1ec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_DMA_IRQHandler+0x1f0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d12f      	bne.n	8003404 <HAL_DMA_IRQHandler+0x1f4>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e02e      	b.n	8003418 <HAL_DMA_IRQHandler+0x208>
 80033ba:	bf00      	nop
 80033bc:	24000004 	.word	0x24000004
 80033c0:	1b4e81b5 	.word	0x1b4e81b5
 80033c4:	40020010 	.word	0x40020010
 80033c8:	40020028 	.word	0x40020028
 80033cc:	40020040 	.word	0x40020040
 80033d0:	40020058 	.word	0x40020058
 80033d4:	40020070 	.word	0x40020070
 80033d8:	40020088 	.word	0x40020088
 80033dc:	400200a0 	.word	0x400200a0
 80033e0:	400200b8 	.word	0x400200b8
 80033e4:	40020410 	.word	0x40020410
 80033e8:	40020428 	.word	0x40020428
 80033ec:	40020440 	.word	0x40020440
 80033f0:	40020458 	.word	0x40020458
 80033f4:	40020470 	.word	0x40020470
 80033f8:	40020488 	.word	0x40020488
 80033fc:	400204a0 	.word	0x400204a0
 8003400:	400204b8 	.word	0x400204b8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2208      	movs	r2, #8
 8003436:	409a      	lsls	r2, r3
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003440:	f043 0201 	orr.w	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d06e      	beq.n	800353c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a69      	ldr	r2, [pc, #420]	@ (8003608 <HAL_DMA_IRQHandler+0x3f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a67      	ldr	r2, [pc, #412]	@ (800360c <HAL_DMA_IRQHandler+0x3fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a66      	ldr	r2, [pc, #408]	@ (8003610 <HAL_DMA_IRQHandler+0x400>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a64      	ldr	r2, [pc, #400]	@ (8003614 <HAL_DMA_IRQHandler+0x404>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a63      	ldr	r2, [pc, #396]	@ (8003618 <HAL_DMA_IRQHandler+0x408>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a61      	ldr	r2, [pc, #388]	@ (800361c <HAL_DMA_IRQHandler+0x40c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a60      	ldr	r2, [pc, #384]	@ (8003620 <HAL_DMA_IRQHandler+0x410>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003624 <HAL_DMA_IRQHandler+0x414>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003628 <HAL_DMA_IRQHandler+0x418>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5b      	ldr	r2, [pc, #364]	@ (800362c <HAL_DMA_IRQHandler+0x41c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5a      	ldr	r2, [pc, #360]	@ (8003630 <HAL_DMA_IRQHandler+0x420>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a58      	ldr	r2, [pc, #352]	@ (8003634 <HAL_DMA_IRQHandler+0x424>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a57      	ldr	r2, [pc, #348]	@ (8003638 <HAL_DMA_IRQHandler+0x428>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a55      	ldr	r2, [pc, #340]	@ (800363c <HAL_DMA_IRQHandler+0x42c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a54      	ldr	r2, [pc, #336]	@ (8003640 <HAL_DMA_IRQHandler+0x430>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_IRQHandler+0x2ee>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a52      	ldr	r2, [pc, #328]	@ (8003644 <HAL_DMA_IRQHandler+0x434>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d10a      	bne.n	8003514 <HAL_DMA_IRQHandler+0x304>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e003      	b.n	800351c <HAL_DMA_IRQHandler+0x30c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2201      	movs	r2, #1
 800352a:	409a      	lsls	r2, r3
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f043 0202 	orr.w	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2204      	movs	r2, #4
 8003546:	409a      	lsls	r2, r3
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 808f 	beq.w	8003670 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <HAL_DMA_IRQHandler+0x3f8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d04a      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2a      	ldr	r2, [pc, #168]	@ (800360c <HAL_DMA_IRQHandler+0x3fc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d045      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a29      	ldr	r2, [pc, #164]	@ (8003610 <HAL_DMA_IRQHandler+0x400>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d040      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a27      	ldr	r2, [pc, #156]	@ (8003614 <HAL_DMA_IRQHandler+0x404>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d03b      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a26      	ldr	r2, [pc, #152]	@ (8003618 <HAL_DMA_IRQHandler+0x408>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d036      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a24      	ldr	r2, [pc, #144]	@ (800361c <HAL_DMA_IRQHandler+0x40c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d031      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <HAL_DMA_IRQHandler+0x410>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d02c      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a21      	ldr	r2, [pc, #132]	@ (8003624 <HAL_DMA_IRQHandler+0x414>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d027      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a20      	ldr	r2, [pc, #128]	@ (8003628 <HAL_DMA_IRQHandler+0x418>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d022      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <HAL_DMA_IRQHandler+0x41c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01d      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_DMA_IRQHandler+0x420>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003634 <HAL_DMA_IRQHandler+0x424>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003638 <HAL_DMA_IRQHandler+0x428>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a18      	ldr	r2, [pc, #96]	@ (800363c <HAL_DMA_IRQHandler+0x42c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a17      	ldr	r2, [pc, #92]	@ (8003640 <HAL_DMA_IRQHandler+0x430>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x3e2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <HAL_DMA_IRQHandler+0x434>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d12a      	bne.n	8003648 <HAL_DMA_IRQHandler+0x438>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e023      	b.n	8003650 <HAL_DMA_IRQHandler+0x440>
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2204      	movs	r2, #4
 800365e:	409a      	lsls	r2, r3
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2210      	movs	r2, #16
 800367a:	409a      	lsls	r2, r3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80a6 	beq.w	80037d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a85      	ldr	r2, [pc, #532]	@ (80038a0 <HAL_DMA_IRQHandler+0x690>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d04a      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a83      	ldr	r2, [pc, #524]	@ (80038a4 <HAL_DMA_IRQHandler+0x694>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d045      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a82      	ldr	r2, [pc, #520]	@ (80038a8 <HAL_DMA_IRQHandler+0x698>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d040      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a80      	ldr	r2, [pc, #512]	@ (80038ac <HAL_DMA_IRQHandler+0x69c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d03b      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a7f      	ldr	r2, [pc, #508]	@ (80038b0 <HAL_DMA_IRQHandler+0x6a0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d036      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a7d      	ldr	r2, [pc, #500]	@ (80038b4 <HAL_DMA_IRQHandler+0x6a4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d031      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7c      	ldr	r2, [pc, #496]	@ (80038b8 <HAL_DMA_IRQHandler+0x6a8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d02c      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a7a      	ldr	r2, [pc, #488]	@ (80038bc <HAL_DMA_IRQHandler+0x6ac>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d027      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a79      	ldr	r2, [pc, #484]	@ (80038c0 <HAL_DMA_IRQHandler+0x6b0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a77      	ldr	r2, [pc, #476]	@ (80038c4 <HAL_DMA_IRQHandler+0x6b4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01d      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a76      	ldr	r2, [pc, #472]	@ (80038c8 <HAL_DMA_IRQHandler+0x6b8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d018      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a74      	ldr	r2, [pc, #464]	@ (80038cc <HAL_DMA_IRQHandler+0x6bc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a73      	ldr	r2, [pc, #460]	@ (80038d0 <HAL_DMA_IRQHandler+0x6c0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a71      	ldr	r2, [pc, #452]	@ (80038d4 <HAL_DMA_IRQHandler+0x6c4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a70      	ldr	r2, [pc, #448]	@ (80038d8 <HAL_DMA_IRQHandler+0x6c8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_DMA_IRQHandler+0x516>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <HAL_DMA_IRQHandler+0x6cc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <HAL_DMA_IRQHandler+0x52c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e009      	b.n	8003750 <HAL_DMA_IRQHandler+0x540>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	bf14      	ite	ne
 800374a:	2301      	movne	r3, #1
 800374c:	2300      	moveq	r3, #0
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d03e      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2210      	movs	r2, #16
 800375e:	409a      	lsls	r2, r3
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	2b00      	cmp	r3, #0
 8003786:	d024      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
 8003790:	e01f      	b.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01b      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
 80037a2:	e016      	b.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d107      	bne.n	80037c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0208 	bic.w	r2, r2, #8
 80037c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2220      	movs	r2, #32
 80037dc:	409a      	lsls	r2, r3
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8110 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2c      	ldr	r2, [pc, #176]	@ (80038a0 <HAL_DMA_IRQHandler+0x690>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d04a      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2b      	ldr	r2, [pc, #172]	@ (80038a4 <HAL_DMA_IRQHandler+0x694>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d045      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_DMA_IRQHandler+0x698>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d040      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <HAL_DMA_IRQHandler+0x69c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d03b      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a26      	ldr	r2, [pc, #152]	@ (80038b0 <HAL_DMA_IRQHandler+0x6a0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d036      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a25      	ldr	r2, [pc, #148]	@ (80038b4 <HAL_DMA_IRQHandler+0x6a4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d031      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <HAL_DMA_IRQHandler+0x6a8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d02c      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_DMA_IRQHandler+0x6ac>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d027      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a20      	ldr	r2, [pc, #128]	@ (80038c0 <HAL_DMA_IRQHandler+0x6b0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d022      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_DMA_IRQHandler+0x6b4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d01d      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_DMA_IRQHandler+0x6b8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d018      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <HAL_DMA_IRQHandler+0x6bc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d013      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <HAL_DMA_IRQHandler+0x6c0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00e      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_DMA_IRQHandler+0x6c4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d009      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <HAL_DMA_IRQHandler+0x6c8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d004      	beq.n	8003888 <HAL_DMA_IRQHandler+0x678>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a16      	ldr	r2, [pc, #88]	@ (80038dc <HAL_DMA_IRQHandler+0x6cc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d12b      	bne.n	80038e0 <HAL_DMA_IRQHandler+0x6d0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e02a      	b.n	80038f4 <HAL_DMA_IRQHandler+0x6e4>
 800389e:	bf00      	nop
 80038a0:	40020010 	.word	0x40020010
 80038a4:	40020028 	.word	0x40020028
 80038a8:	40020040 	.word	0x40020040
 80038ac:	40020058 	.word	0x40020058
 80038b0:	40020070 	.word	0x40020070
 80038b4:	40020088 	.word	0x40020088
 80038b8:	400200a0 	.word	0x400200a0
 80038bc:	400200b8 	.word	0x400200b8
 80038c0:	40020410 	.word	0x40020410
 80038c4:	40020428 	.word	0x40020428
 80038c8:	40020440 	.word	0x40020440
 80038cc:	40020458 	.word	0x40020458
 80038d0:	40020470 	.word	0x40020470
 80038d4:	40020488 	.word	0x40020488
 80038d8:	400204a0 	.word	0x400204a0
 80038dc:	400204b8 	.word	0x400204b8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf14      	ite	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	2300      	moveq	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8087 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2220      	movs	r2, #32
 8003904:	409a      	lsls	r2, r3
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b04      	cmp	r3, #4
 8003914:	d139      	bne.n	800398a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0216 	bic.w	r2, r2, #22
 8003924:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003934:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <HAL_DMA_IRQHandler+0x736>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0208 	bic.w	r2, r2, #8
 8003954:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	223f      	movs	r2, #63	@ 0x3f
 8003960:	409a      	lsls	r2, r3
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 834a 	beq.w	8004014 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
          }
          return;
 8003988:	e344      	b.n	8004014 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d018      	beq.n	80039ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02c      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e027      	b.n	8003a08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d023      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
 80039c8:	e01e      	b.n	8003a08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10f      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0210 	bic.w	r2, r2, #16
 80039e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8306 	beq.w	800401e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8088 	beq.w	8003b30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2204      	movs	r2, #4
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c18 <HAL_DMA_IRQHandler+0xa08>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d04a      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a79      	ldr	r2, [pc, #484]	@ (8003c1c <HAL_DMA_IRQHandler+0xa0c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d045      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a77      	ldr	r2, [pc, #476]	@ (8003c20 <HAL_DMA_IRQHandler+0xa10>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d040      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a76      	ldr	r2, [pc, #472]	@ (8003c24 <HAL_DMA_IRQHandler+0xa14>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d03b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a74      	ldr	r2, [pc, #464]	@ (8003c28 <HAL_DMA_IRQHandler+0xa18>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d036      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a73      	ldr	r2, [pc, #460]	@ (8003c2c <HAL_DMA_IRQHandler+0xa1c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d031      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a71      	ldr	r2, [pc, #452]	@ (8003c30 <HAL_DMA_IRQHandler+0xa20>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a70      	ldr	r2, [pc, #448]	@ (8003c34 <HAL_DMA_IRQHandler+0xa24>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d027      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c38 <HAL_DMA_IRQHandler+0xa28>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d022      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a6d      	ldr	r2, [pc, #436]	@ (8003c3c <HAL_DMA_IRQHandler+0xa2c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6b      	ldr	r2, [pc, #428]	@ (8003c40 <HAL_DMA_IRQHandler+0xa30>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d018      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8003c44 <HAL_DMA_IRQHandler+0xa34>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a68      	ldr	r2, [pc, #416]	@ (8003c48 <HAL_DMA_IRQHandler+0xa38>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a67      	ldr	r2, [pc, #412]	@ (8003c4c <HAL_DMA_IRQHandler+0xa3c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d009      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a65      	ldr	r2, [pc, #404]	@ (8003c50 <HAL_DMA_IRQHandler+0xa40>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x8b8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a64      	ldr	r2, [pc, #400]	@ (8003c54 <HAL_DMA_IRQHandler+0xa44>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <HAL_DMA_IRQHandler+0x8ca>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e007      	b.n	8003aea <HAL_DMA_IRQHandler+0x8da>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d307      	bcc.n	8003b06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f2      	bne.n	8003aea <HAL_DMA_IRQHandler+0x8da>
 8003b04:	e000      	b.n	8003b08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003b06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b1e:	e003      	b.n	8003b28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8272 	beq.w	800401e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e26c      	b.n	800401e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a43      	ldr	r2, [pc, #268]	@ (8003c58 <HAL_DMA_IRQHandler+0xa48>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d022      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a42      	ldr	r2, [pc, #264]	@ (8003c5c <HAL_DMA_IRQHandler+0xa4c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d01d      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a40      	ldr	r2, [pc, #256]	@ (8003c60 <HAL_DMA_IRQHandler+0xa50>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d018      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3f      	ldr	r2, [pc, #252]	@ (8003c64 <HAL_DMA_IRQHandler+0xa54>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d013      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3d      	ldr	r2, [pc, #244]	@ (8003c68 <HAL_DMA_IRQHandler+0xa58>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00e      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c6c <HAL_DMA_IRQHandler+0xa5c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d009      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3a      	ldr	r2, [pc, #232]	@ (8003c70 <HAL_DMA_IRQHandler+0xa60>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x984>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a39      	ldr	r2, [pc, #228]	@ (8003c74 <HAL_DMA_IRQHandler+0xa64>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d101      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x988>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_DMA_IRQHandler+0x98a>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 823f 	beq.w	800401e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80cd 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xb48>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80c7 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d049      	beq.n	8003c78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8210 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c00:	e20a      	b.n	8004018 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8206 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c14:	e200      	b.n	8004018 <HAL_DMA_IRQHandler+0xe08>
 8003c16:	bf00      	nop
 8003c18:	40020010 	.word	0x40020010
 8003c1c:	40020028 	.word	0x40020028
 8003c20:	40020040 	.word	0x40020040
 8003c24:	40020058 	.word	0x40020058
 8003c28:	40020070 	.word	0x40020070
 8003c2c:	40020088 	.word	0x40020088
 8003c30:	400200a0 	.word	0x400200a0
 8003c34:	400200b8 	.word	0x400200b8
 8003c38:	40020410 	.word	0x40020410
 8003c3c:	40020428 	.word	0x40020428
 8003c40:	40020440 	.word	0x40020440
 8003c44:	40020458 	.word	0x40020458
 8003c48:	40020470 	.word	0x40020470
 8003c4c:	40020488 	.word	0x40020488
 8003c50:	400204a0 	.word	0x400204a0
 8003c54:	400204b8 	.word	0x400204b8
 8003c58:	58025408 	.word	0x58025408
 8003c5c:	5802541c 	.word	0x5802541c
 8003c60:	58025430 	.word	0x58025430
 8003c64:	58025444 	.word	0x58025444
 8003c68:	58025458 	.word	0x58025458
 8003c6c:	5802546c 	.word	0x5802546c
 8003c70:	58025480 	.word	0x58025480
 8003c74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d160      	bne.n	8003d44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7f      	ldr	r2, [pc, #508]	@ (8003e84 <HAL_DMA_IRQHandler+0xc74>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d04a      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a7d      	ldr	r2, [pc, #500]	@ (8003e88 <HAL_DMA_IRQHandler+0xc78>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d045      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e8c <HAL_DMA_IRQHandler+0xc7c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d040      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8003e90 <HAL_DMA_IRQHandler+0xc80>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d03b      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a79      	ldr	r2, [pc, #484]	@ (8003e94 <HAL_DMA_IRQHandler+0xc84>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d036      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a77      	ldr	r2, [pc, #476]	@ (8003e98 <HAL_DMA_IRQHandler+0xc88>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d031      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a76      	ldr	r2, [pc, #472]	@ (8003e9c <HAL_DMA_IRQHandler+0xc8c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d02c      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a74      	ldr	r2, [pc, #464]	@ (8003ea0 <HAL_DMA_IRQHandler+0xc90>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d027      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a73      	ldr	r2, [pc, #460]	@ (8003ea4 <HAL_DMA_IRQHandler+0xc94>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d022      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a71      	ldr	r2, [pc, #452]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc98>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a70      	ldr	r2, [pc, #448]	@ (8003eac <HAL_DMA_IRQHandler+0xc9c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d018      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb0 <HAL_DMA_IRQHandler+0xca0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb4 <HAL_DMA_IRQHandler+0xca4>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a6b      	ldr	r2, [pc, #428]	@ (8003eb8 <HAL_DMA_IRQHandler+0xca8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6a      	ldr	r2, [pc, #424]	@ (8003ebc <HAL_DMA_IRQHandler+0xcac>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xb12>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a68      	ldr	r2, [pc, #416]	@ (8003ec0 <HAL_DMA_IRQHandler+0xcb0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <HAL_DMA_IRQHandler+0xb24>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0208 	bic.w	r2, r2, #8
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e007      	b.n	8003d44 <HAL_DMA_IRQHandler+0xb34>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8165 	beq.w	8004018 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d56:	e15f      	b.n	8004018 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2202      	movs	r2, #2
 8003d62:	409a      	lsls	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80c5 	beq.w	8003ef8 <HAL_DMA_IRQHandler+0xce8>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80bf 	beq.w	8003ef8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f003 031f 	and.w	r3, r3, #31
 8003d82:	2202      	movs	r2, #2
 8003d84:	409a      	lsls	r2, r3
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 813a 	beq.w	800401c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003db0:	e134      	b.n	800401c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8130 	beq.w	800401c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dc4:	e12a      	b.n	800401c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f040 8089 	bne.w	8003ee4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_DMA_IRQHandler+0xc74>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <HAL_DMA_IRQHandler+0xc78>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <HAL_DMA_IRQHandler+0xc7c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <HAL_DMA_IRQHandler+0xc80>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a25      	ldr	r2, [pc, #148]	@ (8003e94 <HAL_DMA_IRQHandler+0xc84>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <HAL_DMA_IRQHandler+0xc88>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <HAL_DMA_IRQHandler+0xc8c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <HAL_DMA_IRQHandler+0xc90>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_DMA_IRQHandler+0xc94>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_DMA_IRQHandler+0xc98>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <HAL_DMA_IRQHandler+0xc9c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <HAL_DMA_IRQHandler+0xca0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a19      	ldr	r2, [pc, #100]	@ (8003eb4 <HAL_DMA_IRQHandler+0xca4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a17      	ldr	r2, [pc, #92]	@ (8003eb8 <HAL_DMA_IRQHandler+0xca8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_DMA_IRQHandler+0xcac>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_IRQHandler+0xc62>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <HAL_DMA_IRQHandler+0xcb0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d128      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0xcb4>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0214 	bic.w	r2, r2, #20
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e027      	b.n	8003ed4 <HAL_DMA_IRQHandler+0xcc4>
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 020a 	bic.w	r2, r2, #10
 8003ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8097 	beq.w	800401c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ef6:	e091      	b.n	800401c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2208      	movs	r2, #8
 8003f02:	409a      	lsls	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8088 	beq.w	800401e <HAL_DMA_IRQHandler+0xe0e>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8082 	beq.w	800401e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a41      	ldr	r2, [pc, #260]	@ (8004024 <HAL_DMA_IRQHandler+0xe14>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04a      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a3f      	ldr	r2, [pc, #252]	@ (8004028 <HAL_DMA_IRQHandler+0xe18>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d045      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <HAL_DMA_IRQHandler+0xe1c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d040      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004030 <HAL_DMA_IRQHandler+0xe20>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d03b      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_DMA_IRQHandler+0xe24>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d036      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a39      	ldr	r2, [pc, #228]	@ (8004038 <HAL_DMA_IRQHandler+0xe28>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d031      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a38      	ldr	r2, [pc, #224]	@ (800403c <HAL_DMA_IRQHandler+0xe2c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d02c      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a36      	ldr	r2, [pc, #216]	@ (8004040 <HAL_DMA_IRQHandler+0xe30>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d027      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a35      	ldr	r2, [pc, #212]	@ (8004044 <HAL_DMA_IRQHandler+0xe34>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a33      	ldr	r2, [pc, #204]	@ (8004048 <HAL_DMA_IRQHandler+0xe38>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a32      	ldr	r2, [pc, #200]	@ (800404c <HAL_DMA_IRQHandler+0xe3c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a30      	ldr	r2, [pc, #192]	@ (8004050 <HAL_DMA_IRQHandler+0xe40>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2f      	ldr	r2, [pc, #188]	@ (8004054 <HAL_DMA_IRQHandler+0xe44>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <HAL_DMA_IRQHandler+0xe48>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	@ (800405c <HAL_DMA_IRQHandler+0xe4c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_DMA_IRQHandler+0xdaa>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <HAL_DMA_IRQHandler+0xe50>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <HAL_DMA_IRQHandler+0xdbc>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 021c 	bic.w	r2, r2, #28
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e007      	b.n	8003fdc <HAL_DMA_IRQHandler+0xdcc>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 020e 	bic.w	r2, r2, #14
 8003fda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4798      	blx	r3
 8004012:	e004      	b.n	800401e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800401c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800401e:	3728      	adds	r7, #40	@ 0x28
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	40020040 	.word	0x40020040
 8004030:	40020058 	.word	0x40020058
 8004034:	40020070 	.word	0x40020070
 8004038:	40020088 	.word	0x40020088
 800403c:	400200a0 	.word	0x400200a0
 8004040:	400200b8 	.word	0x400200b8
 8004044:	40020410 	.word	0x40020410
 8004048:	40020428 	.word	0x40020428
 800404c:	40020440 	.word	0x40020440
 8004050:	40020458 	.word	0x40020458
 8004054:	40020470 	.word	0x40020470
 8004058:	40020488 	.word	0x40020488
 800405c:	400204a0 	.word	0x400204a0
 8004060:	400204b8 	.word	0x400204b8

08004064 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7f      	ldr	r2, [pc, #508]	@ (8004280 <DMA_SetConfig+0x21c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d072      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a7d      	ldr	r2, [pc, #500]	@ (8004284 <DMA_SetConfig+0x220>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d06d      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7c      	ldr	r2, [pc, #496]	@ (8004288 <DMA_SetConfig+0x224>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d068      	beq.n	800416e <DMA_SetConfig+0x10a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a7a      	ldr	r2, [pc, #488]	@ (800428c <DMA_SetConfig+0x228>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d063      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a79      	ldr	r2, [pc, #484]	@ (8004290 <DMA_SetConfig+0x22c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d05e      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a77      	ldr	r2, [pc, #476]	@ (8004294 <DMA_SetConfig+0x230>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d059      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a76      	ldr	r2, [pc, #472]	@ (8004298 <DMA_SetConfig+0x234>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d054      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a74      	ldr	r2, [pc, #464]	@ (800429c <DMA_SetConfig+0x238>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04f      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a73      	ldr	r2, [pc, #460]	@ (80042a0 <DMA_SetConfig+0x23c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d04a      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a71      	ldr	r2, [pc, #452]	@ (80042a4 <DMA_SetConfig+0x240>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d045      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a70      	ldr	r2, [pc, #448]	@ (80042a8 <DMA_SetConfig+0x244>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d040      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6e      	ldr	r2, [pc, #440]	@ (80042ac <DMA_SetConfig+0x248>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d03b      	beq.n	800416e <DMA_SetConfig+0x10a>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a6d      	ldr	r2, [pc, #436]	@ (80042b0 <DMA_SetConfig+0x24c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d036      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6b      	ldr	r2, [pc, #428]	@ (80042b4 <DMA_SetConfig+0x250>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d031      	beq.n	800416e <DMA_SetConfig+0x10a>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6a      	ldr	r2, [pc, #424]	@ (80042b8 <DMA_SetConfig+0x254>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d02c      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a68      	ldr	r2, [pc, #416]	@ (80042bc <DMA_SetConfig+0x258>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d027      	beq.n	800416e <DMA_SetConfig+0x10a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a67      	ldr	r2, [pc, #412]	@ (80042c0 <DMA_SetConfig+0x25c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a65      	ldr	r2, [pc, #404]	@ (80042c4 <DMA_SetConfig+0x260>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a64      	ldr	r2, [pc, #400]	@ (80042c8 <DMA_SetConfig+0x264>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <DMA_SetConfig+0x10a>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a62      	ldr	r2, [pc, #392]	@ (80042cc <DMA_SetConfig+0x268>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a61      	ldr	r2, [pc, #388]	@ (80042d0 <DMA_SetConfig+0x26c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a5f      	ldr	r2, [pc, #380]	@ (80042d4 <DMA_SetConfig+0x270>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <DMA_SetConfig+0x10a>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a5e      	ldr	r2, [pc, #376]	@ (80042d8 <DMA_SetConfig+0x274>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <DMA_SetConfig+0x10a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a5c      	ldr	r2, [pc, #368]	@ (80042dc <DMA_SetConfig+0x278>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <DMA_SetConfig+0x10e>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <DMA_SetConfig+0x110>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00d      	beq.n	8004194 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004180:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004192:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a39      	ldr	r2, [pc, #228]	@ (8004280 <DMA_SetConfig+0x21c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a38      	ldr	r2, [pc, #224]	@ (8004284 <DMA_SetConfig+0x220>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a36      	ldr	r2, [pc, #216]	@ (8004288 <DMA_SetConfig+0x224>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a35      	ldr	r2, [pc, #212]	@ (800428c <DMA_SetConfig+0x228>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a33      	ldr	r2, [pc, #204]	@ (8004290 <DMA_SetConfig+0x22c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a32      	ldr	r2, [pc, #200]	@ (8004294 <DMA_SetConfig+0x230>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a30      	ldr	r2, [pc, #192]	@ (8004298 <DMA_SetConfig+0x234>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2f      	ldr	r2, [pc, #188]	@ (800429c <DMA_SetConfig+0x238>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2d      	ldr	r2, [pc, #180]	@ (80042a0 <DMA_SetConfig+0x23c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <DMA_SetConfig+0x240>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2a      	ldr	r2, [pc, #168]	@ (80042a8 <DMA_SetConfig+0x244>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <DMA_SetConfig+0x248>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a27      	ldr	r2, [pc, #156]	@ (80042b0 <DMA_SetConfig+0x24c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a26      	ldr	r2, [pc, #152]	@ (80042b4 <DMA_SetConfig+0x250>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a24      	ldr	r2, [pc, #144]	@ (80042b8 <DMA_SetConfig+0x254>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <DMA_SetConfig+0x1d0>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a23      	ldr	r2, [pc, #140]	@ (80042bc <DMA_SetConfig+0x258>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <DMA_SetConfig+0x1d4>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <DMA_SetConfig+0x1d6>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d059      	beq.n	80042f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	223f      	movs	r2, #63	@ 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800425c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b40      	cmp	r3, #64	@ 0x40
 800426c:	d138      	bne.n	80042e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800427e:	e086      	b.n	800438e <DMA_SetConfig+0x32a>
 8004280:	40020010 	.word	0x40020010
 8004284:	40020028 	.word	0x40020028
 8004288:	40020040 	.word	0x40020040
 800428c:	40020058 	.word	0x40020058
 8004290:	40020070 	.word	0x40020070
 8004294:	40020088 	.word	0x40020088
 8004298:	400200a0 	.word	0x400200a0
 800429c:	400200b8 	.word	0x400200b8
 80042a0:	40020410 	.word	0x40020410
 80042a4:	40020428 	.word	0x40020428
 80042a8:	40020440 	.word	0x40020440
 80042ac:	40020458 	.word	0x40020458
 80042b0:	40020470 	.word	0x40020470
 80042b4:	40020488 	.word	0x40020488
 80042b8:	400204a0 	.word	0x400204a0
 80042bc:	400204b8 	.word	0x400204b8
 80042c0:	58025408 	.word	0x58025408
 80042c4:	5802541c 	.word	0x5802541c
 80042c8:	58025430 	.word	0x58025430
 80042cc:	58025444 	.word	0x58025444
 80042d0:	58025458 	.word	0x58025458
 80042d4:	5802546c 	.word	0x5802546c
 80042d8:	58025480 	.word	0x58025480
 80042dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	60da      	str	r2, [r3, #12]
}
 80042f0:	e04d      	b.n	800438e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a29      	ldr	r2, [pc, #164]	@ (800439c <DMA_SetConfig+0x338>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <DMA_SetConfig+0x2de>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a27      	ldr	r2, [pc, #156]	@ (80043a0 <DMA_SetConfig+0x33c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <DMA_SetConfig+0x2de>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a26      	ldr	r2, [pc, #152]	@ (80043a4 <DMA_SetConfig+0x340>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <DMA_SetConfig+0x2de>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a24      	ldr	r2, [pc, #144]	@ (80043a8 <DMA_SetConfig+0x344>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <DMA_SetConfig+0x2de>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a23      	ldr	r2, [pc, #140]	@ (80043ac <DMA_SetConfig+0x348>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <DMA_SetConfig+0x2de>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a21      	ldr	r2, [pc, #132]	@ (80043b0 <DMA_SetConfig+0x34c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <DMA_SetConfig+0x2de>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <DMA_SetConfig+0x350>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <DMA_SetConfig+0x2de>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <DMA_SetConfig+0x354>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <DMA_SetConfig+0x2e2>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <DMA_SetConfig+0x2e4>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2201      	movs	r2, #1
 8004356:	409a      	lsls	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d108      	bne.n	800437e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	60da      	str	r2, [r3, #12]
}
 800437c:	e007      	b.n	800438e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58025408 	.word	0x58025408
 80043a0:	5802541c 	.word	0x5802541c
 80043a4:	58025430 	.word	0x58025430
 80043a8:	58025444 	.word	0x58025444
 80043ac:	58025458 	.word	0x58025458
 80043b0:	5802546c 	.word	0x5802546c
 80043b4:	58025480 	.word	0x58025480
 80043b8:	58025494 	.word	0x58025494

080043bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a42      	ldr	r2, [pc, #264]	@ (80044d4 <DMA_CalcBaseAndBitshift+0x118>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d04a      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a41      	ldr	r2, [pc, #260]	@ (80044d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d045      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3f      	ldr	r2, [pc, #252]	@ (80044dc <DMA_CalcBaseAndBitshift+0x120>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d040      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a3e      	ldr	r2, [pc, #248]	@ (80044e0 <DMA_CalcBaseAndBitshift+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d03b      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3c      	ldr	r2, [pc, #240]	@ (80044e4 <DMA_CalcBaseAndBitshift+0x128>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d036      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a3b      	ldr	r2, [pc, #236]	@ (80044e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d031      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a39      	ldr	r2, [pc, #228]	@ (80044ec <DMA_CalcBaseAndBitshift+0x130>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02c      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a38      	ldr	r2, [pc, #224]	@ (80044f0 <DMA_CalcBaseAndBitshift+0x134>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d027      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a36      	ldr	r2, [pc, #216]	@ (80044f4 <DMA_CalcBaseAndBitshift+0x138>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d022      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a35      	ldr	r2, [pc, #212]	@ (80044f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d01d      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a33      	ldr	r2, [pc, #204]	@ (80044fc <DMA_CalcBaseAndBitshift+0x140>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d018      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a32      	ldr	r2, [pc, #200]	@ (8004500 <DMA_CalcBaseAndBitshift+0x144>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d013      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a30      	ldr	r2, [pc, #192]	@ (8004504 <DMA_CalcBaseAndBitshift+0x148>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00e      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2f      	ldr	r2, [pc, #188]	@ (8004508 <DMA_CalcBaseAndBitshift+0x14c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d009      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a2d      	ldr	r2, [pc, #180]	@ (800450c <DMA_CalcBaseAndBitshift+0x150>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <DMA_CalcBaseAndBitshift+0xa8>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a2c      	ldr	r2, [pc, #176]	@ (8004510 <DMA_CalcBaseAndBitshift+0x154>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <DMA_CalcBaseAndBitshift+0xac>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <DMA_CalcBaseAndBitshift+0xae>
 8004468:	2300      	movs	r3, #0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d024      	beq.n	80044b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	3b10      	subs	r3, #16
 8004476:	4a27      	ldr	r2, [pc, #156]	@ (8004514 <DMA_CalcBaseAndBitshift+0x158>)
 8004478:	fba2 2303 	umull	r2, r3, r2, r3
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	4a24      	ldr	r2, [pc, #144]	@ (8004518 <DMA_CalcBaseAndBitshift+0x15c>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d908      	bls.n	80044a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <DMA_CalcBaseAndBitshift+0x160>)
 800449e:	4013      	ands	r3, r2
 80044a0:	1d1a      	adds	r2, r3, #4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80044a6:	e00d      	b.n	80044c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <DMA_CalcBaseAndBitshift+0x160>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b6:	e005      	b.n	80044c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
 8004514:	aaaaaaab 	.word	0xaaaaaaab
 8004518:	0800ab78 	.word	0x0800ab78
 800451c:	fffffc00 	.word	0xfffffc00

08004520 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d120      	bne.n	8004576 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	2b03      	cmp	r3, #3
 800453a:	d858      	bhi.n	80045ee <DMA_CheckFifoParam+0xce>
 800453c:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <DMA_CheckFifoParam+0x24>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004555 	.word	0x08004555
 8004548:	08004567 	.word	0x08004567
 800454c:	08004555 	.word	0x08004555
 8004550:	080045ef 	.word	0x080045ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d048      	beq.n	80045f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004564:	e045      	b.n	80045f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800456e:	d142      	bne.n	80045f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004574:	e03f      	b.n	80045f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457e:	d123      	bne.n	80045c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	2b03      	cmp	r3, #3
 8004586:	d838      	bhi.n	80045fa <DMA_CheckFifoParam+0xda>
 8004588:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <DMA_CheckFifoParam+0x70>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045a7 	.word	0x080045a7
 8004598:	080045a1 	.word	0x080045a1
 800459c:	080045b9 	.word	0x080045b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
        break;
 80045a4:	e030      	b.n	8004608 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d025      	beq.n	80045fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045b6:	e022      	b.n	80045fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045c0:	d11f      	bne.n	8004602 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045c6:	e01c      	b.n	8004602 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <DMA_CheckFifoParam+0xb6>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d003      	beq.n	80045dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045d4:	e018      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        break;
 80045da:	e015      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
    break;
 80045ec:	e00b      	b.n	8004606 <DMA_CheckFifoParam+0xe6>
        break;
 80045ee:	bf00      	nop
 80045f0:	e00a      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        break;
 80045f2:	bf00      	nop
 80045f4:	e008      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        break;
 80045f6:	bf00      	nop
 80045f8:	e006      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <DMA_CheckFifoParam+0xe8>
    break;
 8004606:	bf00      	nop
    }
  }

  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a38      	ldr	r2, [pc, #224]	@ (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d022      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a36      	ldr	r2, [pc, #216]	@ (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a35      	ldr	r2, [pc, #212]	@ (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d018      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a33      	ldr	r2, [pc, #204]	@ (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a32      	ldr	r2, [pc, #200]	@ (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a30      	ldr	r2, [pc, #192]	@ (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2d      	ldr	r2, [pc, #180]	@ (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01a      	beq.n	80046b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	3b08      	subs	r3, #8
 8004688:	4a28      	ldr	r2, [pc, #160]	@ (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4b26      	ldr	r3, [pc, #152]	@ (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a24      	ldr	r2, [pc, #144]	@ (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2201      	movs	r2, #1
 80046ae:	409a      	lsls	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046b4:	e024      	b.n	8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3b10      	subs	r3, #16
 80046be:	4a1e      	ldr	r2, [pc, #120]	@ (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	@ (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d806      	bhi.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d902      	bls.n	80046de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3308      	adds	r3, #8
 80046dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	461a      	mov	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	@ (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2201      	movs	r2, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	58025408 	.word	0x58025408
 8004710:	5802541c 	.word	0x5802541c
 8004714:	58025430 	.word	0x58025430
 8004718:	58025444 	.word	0x58025444
 800471c:	58025458 	.word	0x58025458
 8004720:	5802546c 	.word	0x5802546c
 8004724:	58025480 	.word	0x58025480
 8004728:	58025494 	.word	0x58025494
 800472c:	cccccccd 	.word	0xcccccccd
 8004730:	16009600 	.word	0x16009600
 8004734:	58025880 	.word	0x58025880
 8004738:	aaaaaaab 	.word	0xaaaaaaab
 800473c:	400204b8 	.word	0x400204b8
 8004740:	4002040f 	.word	0x4002040f
 8004744:	10008200 	.word	0x10008200
 8004748:	40020880 	.word	0x40020880

0800474c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04a      	beq.n	80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d847      	bhi.n	80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a25      	ldr	r2, [pc, #148]	@ (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a24      	ldr	r2, [pc, #144]	@ (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d01d      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a22      	ldr	r2, [pc, #136]	@ (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1f      	ldr	r2, [pc, #124]	@ (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d101      	bne.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4b17      	ldr	r3, [pc, #92]	@ (8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80047d6:	e009      	b.n	80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4b14      	ldr	r3, [pc, #80]	@ (800482c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a11      	ldr	r2, [pc, #68]	@ (8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	58025408 	.word	0x58025408
 8004808:	5802541c 	.word	0x5802541c
 800480c:	58025430 	.word	0x58025430
 8004810:	58025444 	.word	0x58025444
 8004814:	58025458 	.word	0x58025458
 8004818:	5802546c 	.word	0x5802546c
 800481c:	58025480 	.word	0x58025480
 8004820:	58025494 	.word	0x58025494
 8004824:	1600963f 	.word	0x1600963f
 8004828:	58025940 	.word	0x58025940
 800482c:	1000823f 	.word	0x1000823f
 8004830:	40020940 	.word	0x40020940

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	@ 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004842:	4b86      	ldr	r3, [pc, #536]	@ (8004a5c <HAL_GPIO_Init+0x228>)
 8004844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004846:	e18c      	b.n	8004b62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	2101      	movs	r1, #1
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 817e 	beq.w	8004b5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d005      	beq.n	8004878 <HAL_GPIO_Init+0x44>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d130      	bne.n	80048da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ae:	2201      	movs	r2, #1
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	091b      	lsrs	r3, r3, #4
 80048c4:	f003 0201 	and.w	r2, r3, #1
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d017      	beq.n	8004916 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d123      	bne.n	800496a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	08da      	lsrs	r2, r3, #3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3208      	adds	r2, #8
 800492a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	08da      	lsrs	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3208      	adds	r2, #8
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2203      	movs	r2, #3
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f003 0203 	and.w	r2, r3, #3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80d8 	beq.w	8004b5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004a60 <HAL_GPIO_Init+0x22c>)
 80049ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <HAL_GPIO_Init+0x22c>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049bc:	4b28      	ldr	r3, [pc, #160]	@ (8004a60 <HAL_GPIO_Init+0x22c>)
 80049be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ca:	4a26      	ldr	r2, [pc, #152]	@ (8004a64 <HAL_GPIO_Init+0x230>)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	220f      	movs	r2, #15
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_GPIO_Init+0x234>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d04a      	beq.n	8004a8c <HAL_GPIO_Init+0x258>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_GPIO_Init+0x238>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d02b      	beq.n	8004a56 <HAL_GPIO_Init+0x222>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <HAL_GPIO_Init+0x23c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d025      	beq.n	8004a52 <HAL_GPIO_Init+0x21e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	@ (8004a74 <HAL_GPIO_Init+0x240>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01f      	beq.n	8004a4e <HAL_GPIO_Init+0x21a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a19      	ldr	r2, [pc, #100]	@ (8004a78 <HAL_GPIO_Init+0x244>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d019      	beq.n	8004a4a <HAL_GPIO_Init+0x216>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_GPIO_Init+0x248>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_GPIO_Init+0x212>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a17      	ldr	r2, [pc, #92]	@ (8004a80 <HAL_GPIO_Init+0x24c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00d      	beq.n	8004a42 <HAL_GPIO_Init+0x20e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a16      	ldr	r2, [pc, #88]	@ (8004a84 <HAL_GPIO_Init+0x250>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <HAL_GPIO_Init+0x20a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a15      	ldr	r2, [pc, #84]	@ (8004a88 <HAL_GPIO_Init+0x254>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_GPIO_Init+0x206>
 8004a36:	2309      	movs	r3, #9
 8004a38:	e029      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a3a:	230a      	movs	r3, #10
 8004a3c:	e027      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a3e:	2307      	movs	r3, #7
 8004a40:	e025      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a42:	2306      	movs	r3, #6
 8004a44:	e023      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a46:	2305      	movs	r3, #5
 8004a48:	e021      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	e01f      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e01d      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e01b      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e019      	b.n	8004a8e <HAL_GPIO_Init+0x25a>
 8004a5a:	bf00      	nop
 8004a5c:	58000080 	.word	0x58000080
 8004a60:	58024400 	.word	0x58024400
 8004a64:	58000400 	.word	0x58000400
 8004a68:	58020000 	.word	0x58020000
 8004a6c:	58020400 	.word	0x58020400
 8004a70:	58020800 	.word	0x58020800
 8004a74:	58020c00 	.word	0x58020c00
 8004a78:	58021000 	.word	0x58021000
 8004a7c:	58021400 	.word	0x58021400
 8004a80:	58021800 	.word	0x58021800
 8004a84:	58021c00 	.word	0x58021c00
 8004a88:	58022400 	.word	0x58022400
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	f002 0203 	and.w	r2, r2, #3
 8004a94:	0092      	lsls	r2, r2, #2
 8004a96:	4093      	lsls	r3, r2
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9e:	4938      	ldr	r1, [pc, #224]	@ (8004b80 <HAL_GPIO_Init+0x34c>)
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	089b      	lsrs	r3, r3, #2
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f47f ae6b 	bne.w	8004848 <HAL_GPIO_Init+0x14>
  }
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	3724      	adds	r7, #36	@ 0x24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	58000400 	.word	0x58000400

08004b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
 8004b90:	4613      	mov	r3, r2
 8004b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b94:	787b      	ldrb	r3, [r7, #1]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9a:	887a      	ldrh	r2, [r7, #2]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ba0:	e003      	b.n	8004baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ba2:	887b      	ldrh	r3, [r7, #2]
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	619a      	str	r2, [r3, #24]
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bc8:	887a      	ldrh	r2, [r7, #2]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	041a      	lsls	r2, r3, #16
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	43d9      	mvns	r1, r3
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	619a      	str	r2, [r3, #24]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fc f863 	bl	8000cdc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c28:	4b19      	ldr	r3, [pc, #100]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d00a      	beq.n	8004c4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c34:	4b16      	ldr	r3, [pc, #88]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d001      	beq.n	8004c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e01f      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e01d      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c4a:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	490f      	ldr	r1, [pc, #60]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c5a:	f7fc fd09 	bl	8001670 <HAL_GetTick>
 8004c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c60:	e009      	b.n	8004c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c62:	f7fc fd05 	bl	8001670 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c70:	d901      	bls.n	8004c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e007      	b.n	8004c86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c76:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_PWREx_ConfigSupply+0x70>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c82:	d1ee      	bne.n	8004c62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024800 	.word	0x58024800

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e3c8      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8087 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb4:	4b88      	ldr	r3, [pc, #544]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cbe:	4b86      	ldr	r3, [pc, #536]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d007      	beq.n	8004cda <HAL_RCC_OscConfig+0x46>
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b18      	cmp	r3, #24
 8004cce:	d110      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x5e>
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d10b      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cda:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d06c      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x12c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d168      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e3a2      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x76>
 8004cfc:	4b76      	ldr	r3, [pc, #472]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a75      	ldr	r2, [pc, #468]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e02e      	b.n	8004d68 <HAL_RCC_OscConfig+0xd4>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x98>
 8004d12:	4b71      	ldr	r3, [pc, #452]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a70      	ldr	r2, [pc, #448]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6d      	ldr	r2, [pc, #436]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e01d      	b.n	8004d68 <HAL_RCC_OscConfig+0xd4>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0xbc>
 8004d36:	4b68      	ldr	r3, [pc, #416]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a67      	ldr	r2, [pc, #412]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b65      	ldr	r3, [pc, #404]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a64      	ldr	r2, [pc, #400]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0xd4>
 8004d50:	4b61      	ldr	r3, [pc, #388]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a60      	ldr	r2, [pc, #384]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fc fc7e 	bl	8001670 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fc fc7a 	bl	8001670 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e356      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d8a:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xe4>
 8004d96:	e014      	b.n	8004dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc fc6a 	bl	8001670 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fc fc66 	bl	8001670 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e342      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004db2:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x10c>
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 808c 	beq.w	8004ee8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd0:	4b41      	ldr	r3, [pc, #260]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dda:	4b3f      	ldr	r3, [pc, #252]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <HAL_RCC_OscConfig+0x162>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b18      	cmp	r3, #24
 8004dea:	d137      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1c8>
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d132      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df6:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_RCC_OscConfig+0x17a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e314      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e0e:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0219 	bic.w	r2, r3, #25
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	492f      	ldr	r1, [pc, #188]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fc fc26 	bl	8001670 <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fc fc22 	bl	8001670 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e2fe      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b24      	ldr	r3, [pc, #144]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	061b      	lsls	r3, r3, #24
 8004e54:	4920      	ldr	r1, [pc, #128]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e5a:	e045      	b.n	8004ee8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d026      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 0219 	bic.w	r2, r3, #25
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4919      	ldr	r1, [pc, #100]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7fc fbfb 	bl	8001670 <HAL_GetTick>
 8004e7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7fc fbf7 	bl	8001670 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e2d3      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	490b      	ldr	r1, [pc, #44]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
 8004eb0:	e01a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a08      	ldr	r2, [pc, #32]	@ (8004ed8 <HAL_RCC_OscConfig+0x244>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fc fbd7 	bl	8001670 <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec6:	f7fc fbd3 	bl	8001670 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d903      	bls.n	8004edc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e2af      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
 8004ed8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004edc:	4b96      	ldr	r3, [pc, #600]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d06a      	beq.n	8004fca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef4:	4b90      	ldr	r3, [pc, #576]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004efe:	4b8e      	ldr	r3, [pc, #568]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d007      	beq.n	8004f1a <HAL_RCC_OscConfig+0x286>
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b18      	cmp	r3, #24
 8004f0e:	d11b      	bne.n	8004f48 <HAL_RCC_OscConfig+0x2b4>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d116      	bne.n	8004f48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f1a:	4b87      	ldr	r3, [pc, #540]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_RCC_OscConfig+0x29e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b80      	cmp	r3, #128	@ 0x80
 8004f2c:	d001      	beq.n	8004f32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e282      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f32:	4b81      	ldr	r3, [pc, #516]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	497d      	ldr	r1, [pc, #500]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f46:	e040      	b.n	8004fca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f50:	4b79      	ldr	r3, [pc, #484]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a78      	ldr	r2, [pc, #480]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc fb88 	bl	8001670 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f64:	f7fc fb84 	bl	8001670 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e260      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f76:	4b70      	ldr	r3, [pc, #448]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f82:	4b6d      	ldr	r3, [pc, #436]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	4969      	ldr	r1, [pc, #420]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60cb      	str	r3, [r1, #12]
 8004f96:	e018      	b.n	8004fca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f98:	4b67      	ldr	r3, [pc, #412]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a66      	ldr	r2, [pc, #408]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fb64 	bl	8001670 <HAL_GetTick>
 8004fa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004fac:	f7fc fb60 	bl	8001670 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e23c      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d036      	beq.n	8005044 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d019      	beq.n	8005012 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b56      	ldr	r3, [pc, #344]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fe2:	4a55      	ldr	r2, [pc, #340]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fc fb41 	bl	8001670 <HAL_GetTick>
 8004fee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc fb3d 	bl	8001670 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e219      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005004:	4b4c      	ldr	r3, [pc, #304]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x35e>
 8005010:	e018      	b.n	8005044 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005012:	4b49      	ldr	r3, [pc, #292]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005016:	4a48      	ldr	r2, [pc, #288]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005018:	f023 0301 	bic.w	r3, r3, #1
 800501c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fc fb27 	bl	8001670 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005026:	f7fc fb23 	bl	8001670 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1ff      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005038:	4b3f      	ldr	r3, [pc, #252]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d036      	beq.n	80050be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d019      	beq.n	800508c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005058:	4b37      	ldr	r3, [pc, #220]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a36      	ldr	r2, [pc, #216]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800505e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005062:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005064:	f7fc fb04 	bl	8001670 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800506c:	f7fc fb00 	bl	8001670 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1dc      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800507e:	4b2e      	ldr	r3, [pc, #184]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x3d8>
 800508a:	e018      	b.n	80050be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800508c:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a29      	ldr	r2, [pc, #164]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005098:	f7fc faea 	bl	8001670 <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050a0:	f7fc fae6 	bl	8001670 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1c2      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050b2:	4b21      	ldr	r3, [pc, #132]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8086 	beq.w	80051d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <HAL_RCC_OscConfig+0x4a8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1a      	ldr	r2, [pc, #104]	@ (800513c <HAL_RCC_OscConfig+0x4a8>)
 80050d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d8:	f7fc faca 	bl	8001670 <HAL_GetTick>
 80050dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e0:	f7fc fac6 	bl	8001670 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	@ 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e1a2      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050f2:	4b12      	ldr	r3, [pc, #72]	@ (800513c <HAL_RCC_OscConfig+0x4a8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d106      	bne.n	8005114 <HAL_RCC_OscConfig+0x480>
 8005106:	4b0c      	ldr	r3, [pc, #48]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510a:	4a0b      	ldr	r2, [pc, #44]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	@ 0x70
 8005112:	e032      	b.n	800517a <HAL_RCC_OscConfig+0x4e6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d111      	bne.n	8005140 <HAL_RCC_OscConfig+0x4ac>
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005120:	4a05      	ldr	r2, [pc, #20]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 8005122:	f023 0301 	bic.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	@ 0x70
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800512a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512c:	4a02      	ldr	r2, [pc, #8]	@ (8005138 <HAL_RCC_OscConfig+0x4a4>)
 800512e:	f023 0304 	bic.w	r3, r3, #4
 8005132:	6713      	str	r3, [r2, #112]	@ 0x70
 8005134:	e021      	b.n	800517a <HAL_RCC_OscConfig+0x4e6>
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	58024800 	.word	0x58024800
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	2b05      	cmp	r3, #5
 8005146:	d10c      	bne.n	8005162 <HAL_RCC_OscConfig+0x4ce>
 8005148:	4b83      	ldr	r3, [pc, #524]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	4a82      	ldr	r2, [pc, #520]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800514e:	f043 0304 	orr.w	r3, r3, #4
 8005152:	6713      	str	r3, [r2, #112]	@ 0x70
 8005154:	4b80      	ldr	r3, [pc, #512]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a7f      	ldr	r2, [pc, #508]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800515a:	f043 0301 	orr.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005160:	e00b      	b.n	800517a <HAL_RCC_OscConfig+0x4e6>
 8005162:	4b7d      	ldr	r3, [pc, #500]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	4a7c      	ldr	r2, [pc, #496]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6713      	str	r3, [r2, #112]	@ 0x70
 800516e:	4b7a      	ldr	r3, [pc, #488]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005172:	4a79      	ldr	r2, [pc, #484]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d015      	beq.n	80051ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005182:	f7fc fa75 	bl	8001670 <HAL_GetTick>
 8005186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005188:	e00a      	b.n	80051a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518a:	f7fc fa71 	bl	8001670 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005198:	4293      	cmp	r3, r2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e14b      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0ee      	beq.n	800518a <HAL_RCC_OscConfig+0x4f6>
 80051ac:	e014      	b.n	80051d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ae:	f7fc fa5f 	bl	8001670 <HAL_GetTick>
 80051b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051b4:	e00a      	b.n	80051cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f7fc fa5b 	bl	8001670 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e135      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051cc:	4b62      	ldr	r3, [pc, #392]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ee      	bne.n	80051b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 812a 	beq.w	8005436 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051ea:	2b18      	cmp	r3, #24
 80051ec:	f000 80ba 	beq.w	8005364 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f040 8095 	bne.w	8005324 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a56      	ldr	r2, [pc, #344]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005206:	f7fc fa33 	bl	8001670 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520c:	e008      	b.n	8005220 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520e:	f7fc fa2f 	bl	8001670 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e10b      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005220:	4b4d      	ldr	r3, [pc, #308]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522c:	4b4a      	ldr	r3, [pc, #296]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005230:	4b4a      	ldr	r3, [pc, #296]	@ (800535c <HAL_RCC_OscConfig+0x6c8>)
 8005232:	4013      	ands	r3, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800523c:	0112      	lsls	r2, r2, #4
 800523e:	430a      	orrs	r2, r1
 8005240:	4945      	ldr	r1, [pc, #276]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005242:	4313      	orrs	r3, r2
 8005244:	628b      	str	r3, [r1, #40]	@ 0x28
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524a:	3b01      	subs	r3, #1
 800524c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005254:	3b01      	subs	r3, #1
 8005256:	025b      	lsls	r3, r3, #9
 8005258:	b29b      	uxth	r3, r3
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	3b01      	subs	r3, #1
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526e:	3b01      	subs	r3, #1
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005276:	4938      	ldr	r1, [pc, #224]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005278:	4313      	orrs	r3, r2
 800527a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800527c:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800527e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005280:	4a35      	ldr	r2, [pc, #212]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005288:	4b33      	ldr	r3, [pc, #204]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800528a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800528c:	4b34      	ldr	r3, [pc, #208]	@ (8005360 <HAL_RCC_OscConfig+0x6cc>)
 800528e:	4013      	ands	r3, r2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005294:	00d2      	lsls	r2, r2, #3
 8005296:	4930      	ldr	r1, [pc, #192]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800529c:	4b2e      	ldr	r3, [pc, #184]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a0:	f023 020c 	bic.w	r2, r3, #12
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a8:	492b      	ldr	r1, [pc, #172]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80052ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	f023 0202 	bic.w	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	4927      	ldr	r1, [pc, #156]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052c0:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a24      	ldr	r2, [pc, #144]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052cc:	4b22      	ldr	r3, [pc, #136]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	4a21      	ldr	r2, [pc, #132]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80052e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052f0:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 80052f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fc f9b8 	bl	8001670 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005304:	f7fc f9b4 	bl	8001670 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e090      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x670>
 8005322:	e088      	b.n	8005436 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0b      	ldr	r2, [pc, #44]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800532a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800532e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fc f99e 	bl	8001670 <HAL_GetTick>
 8005334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005338:	f7fc f99a 	bl	8001670 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e076      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800534a:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <HAL_RCC_OscConfig+0x6c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x6a4>
 8005356:	e06e      	b.n	8005436 <HAL_RCC_OscConfig+0x7a2>
 8005358:	58024400 	.word	0x58024400
 800535c:	fffffc0c 	.word	0xfffffc0c
 8005360:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005364:	4b36      	ldr	r3, [pc, #216]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800536a:	4b35      	ldr	r3, [pc, #212]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	2b01      	cmp	r3, #1
 8005376:	d031      	beq.n	80053dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0203 	and.w	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d12a      	bne.n	80053dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	429a      	cmp	r2, r3
 8005394:	d122      	bne.n	80053dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d11a      	bne.n	80053dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d111      	bne.n	80053dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0e1b      	lsrs	r3, r3, #24
 80053ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d001      	beq.n	80053e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e02b      	b.n	8005438 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80053e0:	4b17      	ldr	r3, [pc, #92]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 80053e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d01f      	beq.n	8005436 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80053f6:	4b12      	ldr	r3, [pc, #72]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	4a11      	ldr	r2, [pc, #68]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 80053fc:	f023 0301 	bic.w	r3, r3, #1
 8005400:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005402:	f7fc f935 	bl	8001670 <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005408:	bf00      	nop
 800540a:	f7fc f931 	bl	8001670 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	4293      	cmp	r3, r2
 8005414:	d0f9      	beq.n	800540a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005416:	4b0a      	ldr	r3, [pc, #40]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 8005418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541a:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <HAL_RCC_OscConfig+0x7b0>)
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005422:	00d2      	lsls	r2, r2, #3
 8005424:	4906      	ldr	r1, [pc, #24]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 8005426:	4313      	orrs	r3, r2
 8005428:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800542a:	4b05      	ldr	r3, [pc, #20]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	4a04      	ldr	r2, [pc, #16]	@ (8005440 <HAL_RCC_OscConfig+0x7ac>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3730      	adds	r7, #48	@ 0x30
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	58024400 	.word	0x58024400
 8005444:	ffff0007 	.word	0xffff0007

08005448 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e19c      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800545c:	4b8a      	ldr	r3, [pc, #552]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d910      	bls.n	800548c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b87      	ldr	r3, [pc, #540]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	4985      	ldr	r1, [pc, #532]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b83      	ldr	r3, [pc, #524]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e184      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	4b7b      	ldr	r3, [pc, #492]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d908      	bls.n	80054ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054a8:	4b78      	ldr	r3, [pc, #480]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	4975      	ldr	r1, [pc, #468]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d010      	beq.n	80054e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	4b70      	ldr	r3, [pc, #448]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d908      	bls.n	80054e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054d6:	4b6d      	ldr	r3, [pc, #436]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	496a      	ldr	r1, [pc, #424]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	4b64      	ldr	r3, [pc, #400]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005500:	429a      	cmp	r2, r3
 8005502:	d908      	bls.n	8005516 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005504:	4b61      	ldr	r3, [pc, #388]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	495e      	ldr	r1, [pc, #376]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005512:	4313      	orrs	r3, r2
 8005514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69da      	ldr	r2, [r3, #28]
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800552e:	429a      	cmp	r2, r3
 8005530:	d908      	bls.n	8005544 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005532:	4b56      	ldr	r3, [pc, #344]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	4953      	ldr	r1, [pc, #332]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005540:	4313      	orrs	r3, r2
 8005542:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	4b4d      	ldr	r3, [pc, #308]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	429a      	cmp	r2, r3
 800555e:	d908      	bls.n	8005572 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005560:	4b4a      	ldr	r3, [pc, #296]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f023 020f 	bic.w	r2, r3, #15
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4947      	ldr	r1, [pc, #284]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800556e:	4313      	orrs	r3, r2
 8005570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d055      	beq.n	800562a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800557e:	4b43      	ldr	r3, [pc, #268]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	4940      	ldr	r1, [pc, #256]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800558c:	4313      	orrs	r3, r2
 800558e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d107      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005598:	4b3c      	ldr	r3, [pc, #240]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d121      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0f6      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d107      	bne.n	80055c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d115      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0ea      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055c8:	4b30      	ldr	r3, [pc, #192]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0de      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d8:	4b2c      	ldr	r3, [pc, #176]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0d6      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055e8:	4b28      	ldr	r3, [pc, #160]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	f023 0207 	bic.w	r2, r3, #7
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4925      	ldr	r1, [pc, #148]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055fa:	f7fc f839 	bl	8001670 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005600:	e00a      	b.n	8005618 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005602:	f7fc f835 	bl	8001670 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e0be      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	429a      	cmp	r2, r3
 8005628:	d1eb      	bne.n	8005602 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	4b14      	ldr	r3, [pc, #80]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	429a      	cmp	r2, r3
 8005644:	d208      	bcs.n	8005658 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005646:	4b11      	ldr	r3, [pc, #68]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f023 020f 	bic.w	r2, r3, #15
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	490e      	ldr	r1, [pc, #56]	@ (800568c <HAL_RCC_ClockConfig+0x244>)
 8005654:	4313      	orrs	r3, r2
 8005656:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d214      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 020f 	bic.w	r2, r3, #15
 800566e:	4906      	ldr	r1, [pc, #24]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b04      	ldr	r3, [pc, #16]	@ (8005688 <HAL_RCC_ClockConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d005      	beq.n	8005690 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e086      	b.n	8005796 <HAL_RCC_ClockConfig+0x34e>
 8005688:	52002000 	.word	0x52002000
 800568c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	4b3f      	ldr	r3, [pc, #252]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d208      	bcs.n	80056be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056ac:	4b3c      	ldr	r3, [pc, #240]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	4939      	ldr	r1, [pc, #228]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d010      	beq.n	80056ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	4b34      	ldr	r3, [pc, #208]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d208      	bcs.n	80056ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056da:	4b31      	ldr	r3, [pc, #196]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	492e      	ldr	r1, [pc, #184]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005704:	429a      	cmp	r2, r3
 8005706:	d208      	bcs.n	800571a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005708:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	4922      	ldr	r1, [pc, #136]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 8005716:	4313      	orrs	r3, r2
 8005718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	4b1d      	ldr	r3, [pc, #116]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005732:	429a      	cmp	r2, r3
 8005734:	d208      	bcs.n	8005748 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005736:	4b1a      	ldr	r3, [pc, #104]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	4917      	ldr	r1, [pc, #92]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 8005744:	4313      	orrs	r3, r2
 8005746:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005748:	f000 f834 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b14      	ldr	r3, [pc, #80]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	4912      	ldr	r1, [pc, #72]	@ (80057a4 <HAL_RCC_ClockConfig+0x35c>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005766:	4b0e      	ldr	r3, [pc, #56]	@ (80057a0 <HAL_RCC_ClockConfig+0x358>)
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	4a0d      	ldr	r2, [pc, #52]	@ (80057a4 <HAL_RCC_ClockConfig+0x35c>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
 800577c:	4a0a      	ldr	r2, [pc, #40]	@ (80057a8 <HAL_RCC_ClockConfig+0x360>)
 800577e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005780:	4a0a      	ldr	r2, [pc, #40]	@ (80057ac <HAL_RCC_ClockConfig+0x364>)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005786:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <HAL_RCC_ClockConfig+0x368>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f7fb ff26 	bl	80015dc <HAL_InitTick>
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	58024400 	.word	0x58024400
 80057a4:	0800ab68 	.word	0x0800ab68
 80057a8:	24000008 	.word	0x24000008
 80057ac:	24000004 	.word	0x24000004
 80057b0:	2400000c 	.word	0x2400000c

080057b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b089      	sub	sp, #36	@ 0x24
 80057b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ba:	4bb3      	ldr	r3, [pc, #716]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c2:	2b18      	cmp	r3, #24
 80057c4:	f200 8155 	bhi.w	8005a72 <HAL_RCC_GetSysClockFreq+0x2be>
 80057c8:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	08005835 	.word	0x08005835
 80057d4:	08005a73 	.word	0x08005a73
 80057d8:	08005a73 	.word	0x08005a73
 80057dc:	08005a73 	.word	0x08005a73
 80057e0:	08005a73 	.word	0x08005a73
 80057e4:	08005a73 	.word	0x08005a73
 80057e8:	08005a73 	.word	0x08005a73
 80057ec:	08005a73 	.word	0x08005a73
 80057f0:	0800585b 	.word	0x0800585b
 80057f4:	08005a73 	.word	0x08005a73
 80057f8:	08005a73 	.word	0x08005a73
 80057fc:	08005a73 	.word	0x08005a73
 8005800:	08005a73 	.word	0x08005a73
 8005804:	08005a73 	.word	0x08005a73
 8005808:	08005a73 	.word	0x08005a73
 800580c:	08005a73 	.word	0x08005a73
 8005810:	08005861 	.word	0x08005861
 8005814:	08005a73 	.word	0x08005a73
 8005818:	08005a73 	.word	0x08005a73
 800581c:	08005a73 	.word	0x08005a73
 8005820:	08005a73 	.word	0x08005a73
 8005824:	08005a73 	.word	0x08005a73
 8005828:	08005a73 	.word	0x08005a73
 800582c:	08005a73 	.word	0x08005a73
 8005830:	08005867 	.word	0x08005867
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005834:	4b94      	ldr	r3, [pc, #592]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0320 	and.w	r3, r3, #32
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005840:	4b91      	ldr	r3, [pc, #580]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	08db      	lsrs	r3, r3, #3
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	4a90      	ldr	r2, [pc, #576]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
 8005850:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005852:	e111      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005854:	4b8d      	ldr	r3, [pc, #564]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005856:	61bb      	str	r3, [r7, #24]
      break;
 8005858:	e10e      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800585a:	4b8d      	ldr	r3, [pc, #564]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800585c:	61bb      	str	r3, [r7, #24]
      break;
 800585e:	e10b      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005860:	4b8c      	ldr	r3, [pc, #560]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005862:	61bb      	str	r3, [r7, #24]
      break;
 8005864:	e108      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005866:	4b88      	ldr	r3, [pc, #544]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005870:	4b85      	ldr	r3, [pc, #532]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800587a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800587c:	4b82      	ldr	r3, [pc, #520]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005886:	4b80      	ldr	r3, [pc, #512]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588a:	08db      	lsrs	r3, r3, #3
 800588c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800589e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80e1 	beq.w	8005a6c <HAL_RCC_GetSysClockFreq+0x2b8>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	f000 8083 	beq.w	80059b8 <HAL_RCC_GetSysClockFreq+0x204>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	f200 80a1 	bhi.w	80059fc <HAL_RCC_GetSysClockFreq+0x248>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCC_GetSysClockFreq+0x114>
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d056      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058c6:	e099      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02d      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	4a6b      	ldr	r2, [pc, #428]	@ (8005a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b62      	ldr	r3, [pc, #392]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005912:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800592e:	e087      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b51      	ldr	r3, [pc, #324]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a02 	vldr	s12, [r7, #8]
 8005956:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005972:	e065      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b40      	ldr	r3, [pc, #256]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a02 	vldr	s12, [r7, #8]
 800599a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059b6:	e043      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005aa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	ed97 6a02 	vldr	s12, [r7, #8]
 80059de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059fa:	e021      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005a3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a40:	4b11      	ldr	r3, [pc, #68]	@ (8005a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a44:	0a5b      	lsrs	r3, r3, #9
 8005a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a64:	ee17 3a90 	vmov	r3, s15
 8005a68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005a6a:	e005      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	61bb      	str	r3, [r7, #24]
      break;
 8005a70:	e002      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005a72:	4b07      	ldr	r3, [pc, #28]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a74:	61bb      	str	r3, [r7, #24]
      break;
 8005a76:	bf00      	nop
  }

  return sysclockfreq;
 8005a78:	69bb      	ldr	r3, [r7, #24]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3724      	adds	r7, #36	@ 0x24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	03d09000 	.word	0x03d09000
 8005a90:	003d0900 	.word	0x003d0900
 8005a94:	017d7840 	.word	0x017d7840
 8005a98:	46000000 	.word	0x46000000
 8005a9c:	4c742400 	.word	0x4c742400
 8005aa0:	4a742400 	.word	0x4a742400
 8005aa4:	4bbebc20 	.word	0x4bbebc20

08005aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005aae:	f7ff fe81 	bl	80057b4 <HAL_RCC_GetSysClockFreq>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	0a1b      	lsrs	r3, r3, #8
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	490f      	ldr	r1, [pc, #60]	@ (8005afc <HAL_RCC_GetHCLKFreq+0x54>)
 8005ac0:	5ccb      	ldrb	r3, [r1, r3]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005acc:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	4a09      	ldr	r2, [pc, #36]	@ (8005afc <HAL_RCC_GetHCLKFreq+0x54>)
 8005ad6:	5cd3      	ldrb	r3, [r2, r3]
 8005ad8:	f003 031f 	and.w	r3, r3, #31
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae2:	4a07      	ldr	r2, [pc, #28]	@ (8005b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005ae4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ae6:	4a07      	ldr	r2, [pc, #28]	@ (8005b04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005aec:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005aee:	681b      	ldr	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	58024400 	.word	0x58024400
 8005afc:	0800ab68 	.word	0x0800ab68
 8005b00:	24000008 	.word	0x24000008
 8005b04:	24000004 	.word	0x24000004

08005b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b0c:	f7ff ffcc 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005b10:	4602      	mov	r2, r0
 8005b12:	4b06      	ldr	r3, [pc, #24]	@ (8005b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	091b      	lsrs	r3, r3, #4
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b1e:	5ccb      	ldrb	r3, [r1, r3]
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	58024400 	.word	0x58024400
 8005b30:	0800ab68 	.word	0x0800ab68

08005b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b38:	f7ff ffb6 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	4904      	ldr	r1, [pc, #16]	@ (8005b5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	58024400 	.word	0x58024400
 8005b5c:	0800ab68 	.word	0x0800ab68

08005b60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b64:	b0c6      	sub	sp, #280	@ 0x118
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b72:	2300      	movs	r3, #0
 8005b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005b84:	2500      	movs	r5, #0
 8005b86:	ea54 0305 	orrs.w	r3, r4, r5
 8005b8a:	d049      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b96:	d02f      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005b98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b9c:	d828      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ba2:	d01a      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ba4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ba8:	d822      	bhi.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bb2:	d007      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bb4:	e01c      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb6:	4bab      	ldr	r3, [pc, #684]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4aaa      	ldr	r2, [pc, #680]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bc2:	e01a      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bc8:	3308      	adds	r3, #8
 8005bca:	2102      	movs	r1, #2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fc25 	bl	800741c <RCCEx_PLL2_Config>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bd8:	e00f      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	3328      	adds	r3, #40	@ 0x28
 8005be0:	2102      	movs	r1, #2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fccc 	bl	8007580 <RCCEx_PLL3_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005bee:	e004      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bf6:	e000      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c02:	4b98      	ldr	r3, [pc, #608]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c10:	4a94      	ldr	r2, [pc, #592]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c12:	430b      	orrs	r3, r1
 8005c14:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c16:	e003      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005c2c:	f04f 0900 	mov.w	r9, #0
 8005c30:	ea58 0309 	orrs.w	r3, r8, r9
 8005c34:	d047      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d82a      	bhi.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005c40:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c5d 	.word	0x08005c5d
 8005c4c:	08005c6b 	.word	0x08005c6b
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005c9f 	.word	0x08005c9f
 8005c58:	08005c9f 	.word	0x08005c9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c5c:	4b81      	ldr	r3, [pc, #516]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	4a80      	ldr	r2, [pc, #512]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c68:	e01a      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c6e:	3308      	adds	r3, #8
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fbd2 	bl	800741c <RCCEx_PLL2_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e00f      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	3328      	adds	r3, #40	@ 0x28
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f001 fc79 	bl	8007580 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c94:	e004      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c9c:	e000      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ca8:	4b6e      	ldr	r3, [pc, #440]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cac:	f023 0107 	bic.w	r1, r3, #7
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005cd2:	f04f 0b00 	mov.w	fp, #0
 8005cd6:	ea5a 030b 	orrs.w	r3, sl, fp
 8005cda:	d05b      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ce4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ce8:	d03b      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005cea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005cee:	d834      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cf4:	d037      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cfa:	d82e      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005cfc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d00:	d033      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005d02:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005d06:	d828      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d12:	d822      	bhi.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d1c:	d007      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005d1e:	e01c      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d20:	4b50      	ldr	r3, [pc, #320]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	4a4f      	ldr	r2, [pc, #316]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d2c:	e01e      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d32:	3308      	adds	r3, #8
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fb70 	bl	800741c <RCCEx_PLL2_Config>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d42:	e013      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d48:	3328      	adds	r3, #40	@ 0x28
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f001 fc17 	bl	8007580 <RCCEx_PLL3_Config>
 8005d52:	4603      	mov	r3, r0
 8005d54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d58:	e008      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d60:	e004      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d62:	bf00      	nop
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d66:	bf00      	nop
 8005d68:	e000      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d74:	4b3b      	ldr	r3, [pc, #236]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d84:	4a37      	ldr	r2, [pc, #220]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005d86:	430b      	orrs	r3, r1
 8005d88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d8a:	e003      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005daa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dae:	460b      	mov	r3, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	d05d      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005dbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005dc0:	d03b      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005dc2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005dc6:	d834      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dcc:	d037      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005dce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dd2:	d82e      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dd8:	d033      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005dda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005dde:	d828      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005de4:	d01a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dea:	d822      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005df4:	d007      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005df6:	e01c      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e04:	e01e      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 fb04 	bl	800741c <RCCEx_PLL2_Config>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005e1a:	e013      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e20:	3328      	adds	r3, #40	@ 0x28
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 fbab 	bl	8007580 <RCCEx_PLL3_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e30:	e008      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e38:	e004      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e5c:	4a01      	ldr	r2, [pc, #4]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e62:	e005      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d03a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e96:	2b30      	cmp	r3, #48	@ 0x30
 8005e98:	d01f      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005e9a:	2b30      	cmp	r3, #48	@ 0x30
 8005e9c:	d819      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d00c      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d815      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d019      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d111      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eae:	4baa      	ldr	r3, [pc, #680]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	4aa9      	ldr	r2, [pc, #676]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005eba:	e011      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	2102      	movs	r1, #2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 faa9 	bl	800741c <RCCEx_PLL2_Config>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005ed0:	e006      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ed8:	e002      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ee8:	4b9b      	ldr	r3, [pc, #620]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef6:	4a98      	ldr	r2, [pc, #608]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005efc:	e003      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f20:	460b      	mov	r3, r1
 8005f22:	4313      	orrs	r3, r2
 8005f24:	d051      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f30:	d035      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005f32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f36:	d82e      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f3c:	d031      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f42:	d828      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f48:	d01a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4e:	d822      	bhi.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f58:	d007      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f60:	4a7d      	ldr	r2, [pc, #500]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f68:	e01c      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f6e:	3308      	adds	r3, #8
 8005f70:	2100      	movs	r1, #0
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fa52 	bl	800741c <RCCEx_PLL2_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f7e:	e011      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f84:	3328      	adds	r3, #40	@ 0x28
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 faf9 	bl	8007580 <RCCEx_PLL3_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005f94:	e006      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f9c:	e002      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005f9e:	bf00      	nop
 8005fa0:	e000      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fac:	4b6a      	ldr	r3, [pc, #424]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fba:	4a67      	ldr	r2, [pc, #412]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fc0:	e003      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005fd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fe0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d053      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ff4:	d033      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005ff6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ffa:	d82c      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ffc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006000:	d02f      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006006:	d826      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800600c:	d02b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800600e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006012:	d820      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006018:	d012      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800601a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800601e:	d81a      	bhi.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d022      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d115      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800602a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800602e:	3308      	adds	r3, #8
 8006030:	2101      	movs	r1, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f9f2 	bl	800741c <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800603e:	e015      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006044:	3328      	adds	r3, #40	@ 0x28
 8006046:	2101      	movs	r1, #1
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fa99 	bl	8007580 <RCCEx_PLL3_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006054:	e00a      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800605c:	e006      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800605e:	bf00      	nop
 8006060:	e004      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006062:	bf00      	nop
 8006064:	e002      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006066:	bf00      	nop
 8006068:	e000      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800606a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006074:	4b38      	ldr	r3, [pc, #224]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006078:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006082:	4a35      	ldr	r2, [pc, #212]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006084:	430b      	orrs	r3, r1
 8006086:	6513      	str	r3, [r2, #80]	@ 0x50
 8006088:	e003      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800608e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800609e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060a8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d058      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060be:	d033      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80060c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060c4:	d82c      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ca:	d02f      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d0:	d826      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060d6:	d02b      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80060d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80060dc:	d820      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e2:	d012      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80060e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060e8:	d81a      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d022      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80060ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060f2:	d115      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f8:	3308      	adds	r3, #8
 80060fa:	2101      	movs	r1, #1
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f98d 	bl	800741c <RCCEx_PLL2_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006108:	e015      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800610a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610e:	3328      	adds	r3, #40	@ 0x28
 8006110:	2101      	movs	r1, #1
 8006112:	4618      	mov	r0, r3
 8006114:	f001 fa34 	bl	8007580 <RCCEx_PLL3_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800611e:	e00a      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006126:	e006      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006128:	bf00      	nop
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800612c:	bf00      	nop
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10e      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800613e:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006142:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800614a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800614e:	4a02      	ldr	r2, [pc, #8]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6593      	str	r3, [r2, #88]	@ 0x58
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006174:	2300      	movs	r3, #0
 8006176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800617a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800617e:	460b      	mov	r3, r1
 8006180:	4313      	orrs	r3, r2
 8006182:	d037      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800618a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800618e:	d00e      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006194:	d816      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800619a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800619e:	d111      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a0:	4bc4      	ldr	r3, [pc, #784]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	4ac3      	ldr	r2, [pc, #780]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061ac:	e00f      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b2:	3308      	adds	r3, #8
 80061b4:	2101      	movs	r1, #1
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f930 	bl	800741c <RCCEx_PLL2_Config>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80061c2:	e004      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061ca:	e000      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80061cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10a      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061d6:	4bb7      	ldr	r3, [pc, #732]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e4:	4ab3      	ldr	r2, [pc, #716]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80061ea:	e003      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800620a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800620e:	460b      	mov	r3, r1
 8006210:	4313      	orrs	r3, r2
 8006212:	d039      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800621a:	2b03      	cmp	r3, #3
 800621c:	d81c      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006261 	.word	0x08006261
 8006228:	08006235 	.word	0x08006235
 800622c:	08006243 	.word	0x08006243
 8006230:	08006261 	.word	0x08006261
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b9f      	ldr	r3, [pc, #636]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006238:	4a9e      	ldr	r2, [pc, #632]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006240:	e00f      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006246:	3308      	adds	r3, #8
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 f8e6 	bl	800741c <RCCEx_PLL2_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006256:	e004      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800626a:	4b92      	ldr	r3, [pc, #584]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800626c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626e:	f023 0103 	bic.w	r1, r3, #3
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006278:	4a8e      	ldr	r2, [pc, #568]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800627a:	430b      	orrs	r3, r1
 800627c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006294:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800629e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4313      	orrs	r3, r2
 80062a6:	f000 8099 	beq.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062aa:	4b83      	ldr	r3, [pc, #524]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a82      	ldr	r2, [pc, #520]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062b6:	f7fb f9db 	bl	8001670 <HAL_GetTick>
 80062ba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062be:	e00b      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c0:	f7fb f9d6 	bl	8001670 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b64      	cmp	r3, #100	@ 0x64
 80062ce:	d903      	bls.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062d6:	e005      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062d8:	4b77      	ldr	r3, [pc, #476]	@ (80064b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0ed      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80062e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d173      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80062ec:	4b71      	ldr	r3, [pc, #452]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80062ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f8:	4053      	eors	r3, r2
 80062fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d015      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006302:	4b6c      	ldr	r3, [pc, #432]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800630a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800630e:	4b69      	ldr	r3, [pc, #420]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006312:	4a68      	ldr	r2, [pc, #416]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006318:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800631a:	4b66      	ldr	r3, [pc, #408]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631e:	4a65      	ldr	r2, [pc, #404]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006324:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006326:	4a63      	ldr	r2, [pc, #396]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006328:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800632c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800632e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633a:	d118      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fb f998 	bl	8001670 <HAL_GetTick>
 8006340:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006344:	e00d      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006346:	f7fb f993 	bl	8001670 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006356:	429a      	cmp	r2, r3
 8006358:	d903      	bls.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8006360:	e005      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006362:	4b54      	ldr	r3, [pc, #336]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0eb      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800636e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006372:	2b00      	cmp	r3, #0
 8006374:	d129      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800637e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006386:	d10e      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006388:	4b4a      	ldr	r3, [pc, #296]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006398:	091a      	lsrs	r2, r3, #4
 800639a:	4b48      	ldr	r3, [pc, #288]	@ (80064bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800639c:	4013      	ands	r3, r2
 800639e:	4a45      	ldr	r2, [pc, #276]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6113      	str	r3, [r2, #16]
 80063a4:	e005      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80063a6:	4b43      	ldr	r3, [pc, #268]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	4a42      	ldr	r2, [pc, #264]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063b0:	6113      	str	r3, [r2, #16]
 80063b2:	4b40      	ldr	r3, [pc, #256]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c2:	4a3c      	ldr	r2, [pc, #240]	@ (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c8:	e008      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 0301 	and.w	r3, r2, #1
 80063e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f000 808f 	beq.w	800651c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006404:	2b28      	cmp	r3, #40	@ 0x28
 8006406:	d871      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006408:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	080064f5 	.word	0x080064f5
 8006414:	080064ed 	.word	0x080064ed
 8006418:	080064ed 	.word	0x080064ed
 800641c:	080064ed 	.word	0x080064ed
 8006420:	080064ed 	.word	0x080064ed
 8006424:	080064ed 	.word	0x080064ed
 8006428:	080064ed 	.word	0x080064ed
 800642c:	080064ed 	.word	0x080064ed
 8006430:	080064c1 	.word	0x080064c1
 8006434:	080064ed 	.word	0x080064ed
 8006438:	080064ed 	.word	0x080064ed
 800643c:	080064ed 	.word	0x080064ed
 8006440:	080064ed 	.word	0x080064ed
 8006444:	080064ed 	.word	0x080064ed
 8006448:	080064ed 	.word	0x080064ed
 800644c:	080064ed 	.word	0x080064ed
 8006450:	080064d7 	.word	0x080064d7
 8006454:	080064ed 	.word	0x080064ed
 8006458:	080064ed 	.word	0x080064ed
 800645c:	080064ed 	.word	0x080064ed
 8006460:	080064ed 	.word	0x080064ed
 8006464:	080064ed 	.word	0x080064ed
 8006468:	080064ed 	.word	0x080064ed
 800646c:	080064ed 	.word	0x080064ed
 8006470:	080064f5 	.word	0x080064f5
 8006474:	080064ed 	.word	0x080064ed
 8006478:	080064ed 	.word	0x080064ed
 800647c:	080064ed 	.word	0x080064ed
 8006480:	080064ed 	.word	0x080064ed
 8006484:	080064ed 	.word	0x080064ed
 8006488:	080064ed 	.word	0x080064ed
 800648c:	080064ed 	.word	0x080064ed
 8006490:	080064f5 	.word	0x080064f5
 8006494:	080064ed 	.word	0x080064ed
 8006498:	080064ed 	.word	0x080064ed
 800649c:	080064ed 	.word	0x080064ed
 80064a0:	080064ed 	.word	0x080064ed
 80064a4:	080064ed 	.word	0x080064ed
 80064a8:	080064ed 	.word	0x080064ed
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	58024400 	.word	0x58024400
 80064b8:	58024800 	.word	0x58024800
 80064bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	3308      	adds	r3, #8
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ffa7 	bl	800741c <RCCEx_PLL2_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064d4:	e00f      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064da:	3328      	adds	r3, #40	@ 0x28
 80064dc:	2101      	movs	r1, #1
 80064de:	4618      	mov	r0, r3
 80064e0:	f001 f84e 	bl	8007580 <RCCEx_PLL3_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80064ea:	e004      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064f2:	e000      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80064f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80064fe:	4bbf      	ldr	r3, [pc, #764]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006502:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800650c:	4abb      	ldr	r2, [pc, #748]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800650e:	430b      	orrs	r3, r1
 8006510:	6553      	str	r3, [r2, #84]	@ 0x54
 8006512:	e003      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f002 0302 	and.w	r3, r2, #2
 8006528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006532:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d041      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	2b05      	cmp	r3, #5
 8006544:	d824      	bhi.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006599 	.word	0x08006599
 8006550:	08006565 	.word	0x08006565
 8006554:	0800657b 	.word	0x0800657b
 8006558:	08006599 	.word	0x08006599
 800655c:	08006599 	.word	0x08006599
 8006560:	08006599 	.word	0x08006599
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006568:	3308      	adds	r3, #8
 800656a:	2101      	movs	r1, #1
 800656c:	4618      	mov	r0, r3
 800656e:	f000 ff55 	bl	800741c <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006578:	e00f      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	3328      	adds	r3, #40	@ 0x28
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fffc 	bl	8007580 <RCCEx_PLL3_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800658e:	e004      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80065a2:	4b96      	ldr	r3, [pc, #600]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a6:	f023 0107 	bic.w	r1, r3, #7
 80065aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b0:	4a92      	ldr	r2, [pc, #584]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b6:	e003      	b.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f002 0304 	and.w	r3, r2, #4
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065d0:	2300      	movs	r3, #0
 80065d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065da:	460b      	mov	r3, r1
 80065dc:	4313      	orrs	r3, r2
 80065de:	d044      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e8:	2b05      	cmp	r3, #5
 80065ea:	d825      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80065ec:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	08006641 	.word	0x08006641
 80065f8:	0800660d 	.word	0x0800660d
 80065fc:	08006623 	.word	0x08006623
 8006600:	08006641 	.word	0x08006641
 8006604:	08006641 	.word	0x08006641
 8006608:	08006641 	.word	0x08006641
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006610:	3308      	adds	r3, #8
 8006612:	2101      	movs	r1, #1
 8006614:	4618      	mov	r0, r3
 8006616:	f000 ff01 	bl	800741c <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006620:	e00f      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006626:	3328      	adds	r3, #40	@ 0x28
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f000 ffa8 	bl	8007580 <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006636:	e004      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800663e:	e000      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800664a:	4b6c      	ldr	r3, [pc, #432]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800664e:	f023 0107 	bic.w	r1, r3, #7
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800665a:	4a68      	ldr	r2, [pc, #416]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800665c:	430b      	orrs	r3, r1
 800665e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006660:	e003      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006666:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f002 0320 	and.w	r3, r2, #32
 8006676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800667a:	2300      	movs	r3, #0
 800667c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006680:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006684:	460b      	mov	r3, r1
 8006686:	4313      	orrs	r3, r2
 8006688:	d055      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006692:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006696:	d033      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800669c:	d82c      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a2:	d02f      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a8:	d826      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066ae:	d02b      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80066b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066b4:	d820      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ba:	d012      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80066bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066c0:	d81a      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d022      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80066c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ca:	d115      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	3308      	adds	r3, #8
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 fea1 	bl	800741c <RCCEx_PLL2_Config>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066e0:	e015      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	3328      	adds	r3, #40	@ 0x28
 80066e8:	2102      	movs	r1, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ff48 	bl	8007580 <RCCEx_PLL3_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80066f6:	e00a      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066fe:	e006      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006700:	bf00      	nop
 8006702:	e004      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006704:	bf00      	nop
 8006706:	e002      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800670c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800670e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006716:	4b39      	ldr	r3, [pc, #228]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006726:	4a35      	ldr	r2, [pc, #212]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6553      	str	r3, [r2, #84]	@ 0x54
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006742:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800674c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d058      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800675e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006762:	d033      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006764:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006768:	d82c      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800676e:	d02f      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006774:	d826      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006776:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800677a:	d02b      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800677c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006780:	d820      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006782:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006786:	d012      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800678c:	d81a      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d022      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006796:	d115      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679c:	3308      	adds	r3, #8
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fe3b 	bl	800741c <RCCEx_PLL2_Config>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067ac:	e015      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b2:	3328      	adds	r3, #40	@ 0x28
 80067b4:	2102      	movs	r1, #2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fee2 	bl	8007580 <RCCEx_PLL3_Config>
 80067bc:	4603      	mov	r3, r0
 80067be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80067c2:	e00a      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80067ca:	e006      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067cc:	bf00      	nop
 80067ce:	e004      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80067d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10e      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80067e2:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80067ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067f2:	4a02      	ldr	r2, [pc, #8]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80067f4:	430b      	orrs	r3, r1
 80067f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80067f8:	e006      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80067fa:	bf00      	nop
 80067fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006814:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800681e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d055      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006830:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006834:	d033      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006836:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800683a:	d82c      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006840:	d02f      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006846:	d826      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006848:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800684c:	d02b      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800684e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006852:	d820      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006858:	d012      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800685a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800685e:	d81a      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d022      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006868:	d115      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	3308      	adds	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fdd2 	bl	800741c <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800687e:	e015      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	3328      	adds	r3, #40	@ 0x28
 8006886:	2102      	movs	r1, #2
 8006888:	4618      	mov	r0, r3
 800688a:	f000 fe79 	bl	8007580 <RCCEx_PLL3_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006894:	e00a      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800689c:	e006      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800689e:	bf00      	nop
 80068a0:	e004      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80068aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80068b4:	4ba0      	ldr	r3, [pc, #640]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068c4:	4a9c      	ldr	r2, [pc, #624]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068c6:	430b      	orrs	r3, r1
 80068c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80068ca:	e003      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068dc:	f002 0308 	and.w	r3, r2, #8
 80068e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068e4:	2300      	movs	r3, #0
 80068e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d01e      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006900:	d10c      	bne.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	3328      	adds	r3, #40	@ 0x28
 8006908:	2102      	movs	r1, #2
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fe38 	bl	8007580 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800691c:	4b86      	ldr	r3, [pc, #536]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800691e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006920:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800692c:	4a82      	ldr	r2, [pc, #520]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800692e:	430b      	orrs	r3, r1
 8006930:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	f002 0310 	and.w	r3, r2, #16
 800693e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006942:	2300      	movs	r3, #0
 8006944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006948:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800694c:	460b      	mov	r3, r1
 800694e:	4313      	orrs	r3, r2
 8006950:	d01e      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800695a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800695e:	d10c      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	3328      	adds	r3, #40	@ 0x28
 8006966:	2102      	movs	r1, #2
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fe09 	bl	8007580 <RCCEx_PLL3_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800697a:	4b6f      	ldr	r3, [pc, #444]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800698a:	4a6b      	ldr	r2, [pc, #428]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800698c:	430b      	orrs	r3, r1
 800698e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800699c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800699e:	2300      	movs	r3, #0
 80069a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069a6:	460b      	mov	r3, r1
 80069a8:	4313      	orrs	r3, r2
 80069aa:	d03e      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80069b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069b8:	d022      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80069ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069be:	d81b      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c8:	d00b      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80069ca:	e015      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d0:	3308      	adds	r3, #8
 80069d2:	2100      	movs	r1, #0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fd21 	bl	800741c <RCCEx_PLL2_Config>
 80069da:	4603      	mov	r3, r0
 80069dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069e0:	e00f      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e6:	3328      	adds	r3, #40	@ 0x28
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fdc8 	bl	8007580 <RCCEx_PLL3_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80069f6:	e004      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a1a:	4a47      	ldr	r2, [pc, #284]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a20:	e003      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006a36:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a38:	2300      	movs	r3, #0
 8006a3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d03b      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a52:	d01f      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006a54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a58:	d818      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5e:	d003      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006a60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a64:	d007      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006a66:	e011      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4b33      	ldr	r3, [pc, #204]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	4a32      	ldr	r2, [pc, #200]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a74:	e00f      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	3328      	adds	r3, #40	@ 0x28
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fd7e 	bl	8007580 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006a8a:	e004      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a9e:	4b26      	ldr	r3, [pc, #152]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aae:	4a22      	ldr	r2, [pc, #136]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ab4:	e003      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006aca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006acc:	2300      	movs	r3, #0
 8006ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ad0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	d034      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae8:	d007      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006aea:	e011      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aec:	4b12      	ldr	r3, [pc, #72]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	4a11      	ldr	r2, [pc, #68]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006af8:	e00e      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	3308      	adds	r3, #8
 8006b00:	2102      	movs	r1, #2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fc8a 	bl	800741c <RCCEx_PLL2_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2e:	4a02      	ldr	r2, [pc, #8]	@ (8006b38 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b34:	e006      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006b36:	bf00      	nop
 8006b38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b52:	2300      	movs	r3, #0
 8006b54:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b56:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	d00c      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	3328      	adds	r3, #40	@ 0x28
 8006b66:	2102      	movs	r1, #2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fd09 	bl	8007580 <RCCEx_PLL3_Config>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b88:	2300      	movs	r3, #0
 8006b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b8c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b90:	460b      	mov	r3, r1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	d036      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba0:	d018      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ba6:	d811      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bac:	d014      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb2:	d80b      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bbc:	d106      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bbe:	4bb7      	ldr	r3, [pc, #732]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc2:	4ab6      	ldr	r2, [pc, #728]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bd2:	e004      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e002      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bd8:	bf00      	nop
 8006bda:	e000      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006be6:	4bad      	ldr	r3, [pc, #692]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bf4:	4aa9      	ldr	r2, [pc, #676]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006bfa:	e003      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006c10:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c12:	2300      	movs	r3, #0
 8006c14:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c20:	4b9e      	ldr	r3, [pc, #632]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2e:	4a9b      	ldr	r2, [pc, #620]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c42:	2300      	movs	r3, #0
 8006c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c50:	4b92      	ldr	r3, [pc, #584]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c54:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c5e:	4a8f      	ldr	r2, [pc, #572]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c72:	2300      	movs	r3, #0
 8006c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c80:	4b86      	ldr	r3, [pc, #536]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	4a85      	ldr	r2, [pc, #532]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c8a:	6113      	str	r3, [r2, #16]
 8006c8c:	4b83      	ldr	r3, [pc, #524]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c8e:	6919      	ldr	r1, [r3, #16]
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c98:	4a80      	ldr	r2, [pc, #512]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cac:	2300      	movs	r3, #0
 8006cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cba:	4b78      	ldr	r3, [pc, #480]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cbe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc8:	4a74      	ldr	r2, [pc, #464]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cca:	430b      	orrs	r3, r1
 8006ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cdc:	2300      	movs	r3, #0
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d00a      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cea:	4b6c      	ldr	r3, [pc, #432]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfa:	4a68      	ldr	r2, [pc, #416]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	2100      	movs	r1, #0
 8006d0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006d16:	460b      	mov	r3, r1
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	d011      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	3308      	adds	r3, #8
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fb79 	bl	800741c <RCCEx_PLL2_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6239      	str	r1, [r7, #32]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d56:	460b      	mov	r3, r1
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	d011      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	3308      	adds	r3, #8
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fb59 	bl	800741c <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	61b9      	str	r1, [r7, #24]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d96:	460b      	mov	r3, r1
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	d011      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	3308      	adds	r3, #8
 8006da2:	2102      	movs	r1, #2
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fb39 	bl	800741c <RCCEx_PLL2_Config>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	6139      	str	r1, [r7, #16]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d011      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de0:	3328      	adds	r3, #40	@ 0x28
 8006de2:	2100      	movs	r1, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fbcb 	bl	8007580 <RCCEx_PLL3_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006dfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d011      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	3328      	adds	r3, #40	@ 0x28
 8006e22:	2101      	movs	r1, #1
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fbab 	bl	8007580 <RCCEx_PLL3_Config>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6039      	str	r1, [r7, #0]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e56:	460b      	mov	r3, r1
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	d011      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	3328      	adds	r3, #40	@ 0x28
 8006e62:	2102      	movs	r1, #2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 fb8b 	bl	8007580 <RCCEx_PLL3_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006e80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006e94:	46bd      	mov	sp, r7
 8006e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400

08006ea0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ea4:	f7fe fe00 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	091b      	lsrs	r3, r3, #4
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	4904      	ldr	r1, [pc, #16]	@ (8006ec8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006eb6:	5ccb      	ldrb	r3, [r1, r3]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58024400 	.word	0x58024400
 8006ec8:	0800ab68 	.word	0x0800ab68

08006ecc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	@ 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ed4:	4ba1      	ldr	r3, [pc, #644]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ede:	4b9f      	ldr	r3, [pc, #636]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee2:	0b1b      	lsrs	r3, r3, #12
 8006ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ee8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006eea:	4b9c      	ldr	r3, [pc, #624]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006ef6:	4b99      	ldr	r3, [pc, #612]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	08db      	lsrs	r3, r3, #3
 8006efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8111 	beq.w	800713c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	f000 8083 	beq.w	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	f200 80a1 	bhi.w	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d056      	beq.n	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f36:	e099      	b.n	800706c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f38:	4b88      	ldr	r3, [pc, #544]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0320 	and.w	r3, r3, #32
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d02d      	beq.n	8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f44:	4b85      	ldr	r3, [pc, #532]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	08db      	lsrs	r3, r3, #3
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	4a84      	ldr	r2, [pc, #528]	@ (8007160 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
 8006f54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006f9e:	e087      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007168 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe2:	e065      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800716c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff6:	4b59      	ldr	r3, [pc, #356]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007006:	ed97 6a03 	vldr	s12, [r7, #12]
 800700a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800701a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007026:	e043      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007032:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703a:	4b48      	ldr	r3, [pc, #288]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704a:	ed97 6a03 	vldr	s12, [r7, #12]
 800704e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800705e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800706a:	e021      	b.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	ee07 3a90 	vmov	s15, r3
 8007072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007076:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800716c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b37      	ldr	r3, [pc, #220]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007092:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070b0:	4b2a      	ldr	r3, [pc, #168]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	0a5b      	lsrs	r3, r3, #9
 80070b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070d6:	ee17 2a90 	vmov	r2, s15
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80070de:	4b1f      	ldr	r3, [pc, #124]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007104:	ee17 2a90 	vmov	r2, s15
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007110:	0e1b      	lsrs	r3, r3, #24
 8007112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007126:	edd7 6a07 	vldr	s13, [r7, #28]
 800712a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800712e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007132:	ee17 2a90 	vmov	r2, s15
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800713a:	e008      	b.n	800714e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	609a      	str	r2, [r3, #8]
}
 800714e:	bf00      	nop
 8007150:	3724      	adds	r7, #36	@ 0x24
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	58024400 	.word	0x58024400
 8007160:	03d09000 	.word	0x03d09000
 8007164:	46000000 	.word	0x46000000
 8007168:	4c742400 	.word	0x4c742400
 800716c:	4a742400 	.word	0x4a742400
 8007170:	4bbebc20 	.word	0x4bbebc20

08007174 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007174:	b480      	push	{r7}
 8007176:	b089      	sub	sp, #36	@ 0x24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800717c:	4ba1      	ldr	r3, [pc, #644]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007186:	4b9f      	ldr	r3, [pc, #636]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718a:	0d1b      	lsrs	r3, r3, #20
 800718c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007190:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007192:	4b9c      	ldr	r3, [pc, #624]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007196:	0a1b      	lsrs	r3, r3, #8
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800719e:	4b99      	ldr	r3, [pc, #612]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a2:	08db      	lsrs	r3, r3, #3
 80071a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8111 	beq.w	80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f000 8083 	beq.w	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	f200 80a1 	bhi.w	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d056      	beq.n	800728c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071de:	e099      	b.n	8007314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e0:	4b88      	ldr	r3, [pc, #544]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02d      	beq.n	8007248 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ec:	4b85      	ldr	r3, [pc, #532]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	08db      	lsrs	r3, r3, #3
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	4a84      	ldr	r2, [pc, #528]	@ (8007408 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b7b      	ldr	r3, [pc, #492]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a03 	vldr	s12, [r7, #12]
 800722a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007246:	e087      	b.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007410 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	4b6a      	ldr	r3, [pc, #424]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726a:	ed97 6a03 	vldr	s12, [r7, #12]
 800726e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728a:	e065      	b.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800729a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729e:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ce:	e043      	b.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b48      	ldr	r3, [pc, #288]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007312:	e021      	b.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b37      	ldr	r3, [pc, #220]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007356:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007358:	4b2a      	ldr	r3, [pc, #168]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735c:	0a5b      	lsrs	r3, r3, #9
 800735e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800736e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007372:	edd7 6a07 	vldr	s13, [r7, #28]
 8007376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800737a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800737e:	ee17 2a90 	vmov	r2, s15
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007386:	4b1f      	ldr	r3, [pc, #124]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800739c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ac:	ee17 2a90 	vmov	r2, s15
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073b4:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	0e1b      	lsrs	r3, r3, #24
 80073ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80073d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073da:	ee17 2a90 	vmov	r2, s15
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073e2:	e008      	b.n	80073f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	609a      	str	r2, [r3, #8]
}
 80073f6:	bf00      	nop
 80073f8:	3724      	adds	r7, #36	@ 0x24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	58024400 	.word	0x58024400
 8007408:	03d09000 	.word	0x03d09000
 800740c:	46000000 	.word	0x46000000
 8007410:	4c742400 	.word	0x4c742400
 8007414:	4a742400 	.word	0x4a742400
 8007418:	4bbebc20 	.word	0x4bbebc20

0800741c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800742a:	4b53      	ldr	r3, [pc, #332]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800742c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b03      	cmp	r3, #3
 8007434:	d101      	bne.n	800743a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e099      	b.n	800756e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800743a:	4b4f      	ldr	r3, [pc, #316]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a4e      	ldr	r2, [pc, #312]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007440:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007446:	f7fa f913 	bl	8001670 <HAL_GetTick>
 800744a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800744c:	e008      	b.n	8007460 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800744e:	f7fa f90f 	bl	8001670 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e086      	b.n	800756e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007460:	4b45      	ldr	r3, [pc, #276]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800746c:	4b42      	ldr	r3, [pc, #264]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800746e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007470:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	031b      	lsls	r3, r3, #12
 800747a:	493f      	ldr	r1, [pc, #252]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800747c:	4313      	orrs	r3, r2
 800747e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	3b01      	subs	r3, #1
 8007486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	3b01      	subs	r3, #1
 8007490:	025b      	lsls	r3, r3, #9
 8007492:	b29b      	uxth	r3, r3
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	3b01      	subs	r3, #1
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	061b      	lsls	r3, r3, #24
 80074ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074b0:	4931      	ldr	r1, [pc, #196]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074b6:	4b30      	ldr	r3, [pc, #192]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	492d      	ldr	r1, [pc, #180]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	f023 0220 	bic.w	r2, r3, #32
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	4928      	ldr	r1, [pc, #160]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074da:	4b27      	ldr	r3, [pc, #156]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074de:	4a26      	ldr	r2, [pc, #152]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	f023 0310 	bic.w	r3, r3, #16
 80074e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074e6:	4b24      	ldr	r3, [pc, #144]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ea:	4b24      	ldr	r3, [pc, #144]	@ (800757c <RCCEx_PLL2_Config+0x160>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	69d2      	ldr	r2, [r2, #28]
 80074f2:	00d2      	lsls	r2, r2, #3
 80074f4:	4920      	ldr	r1, [pc, #128]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	4a1e      	ldr	r2, [pc, #120]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007500:	f043 0310 	orr.w	r3, r3, #16
 8007504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800750c:	4b1a      	ldr	r3, [pc, #104]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	4a19      	ldr	r2, [pc, #100]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007512:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007518:	e00f      	b.n	800753a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d106      	bne.n	800752e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007520:	4b15      	ldr	r3, [pc, #84]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	4a14      	ldr	r2, [pc, #80]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800752a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800752c:	e005      	b.n	800753a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800752e:	4b12      	ldr	r3, [pc, #72]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007532:	4a11      	ldr	r2, [pc, #68]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007538:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800753a:	4b0f      	ldr	r3, [pc, #60]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a0e      	ldr	r2, [pc, #56]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007540:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007546:	f7fa f893 	bl	8001670 <HAL_GetTick>
 800754a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800754c:	e008      	b.n	8007560 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800754e:	f7fa f88f 	bl	8001670 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	2b02      	cmp	r3, #2
 800755a:	d901      	bls.n	8007560 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e006      	b.n	800756e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007560:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <RCCEx_PLL2_Config+0x15c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d0f0      	beq.n	800754e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	58024400 	.word	0x58024400
 800757c:	ffff0007 	.word	0xffff0007

08007580 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800758e:	4b53      	ldr	r3, [pc, #332]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	f003 0303 	and.w	r3, r3, #3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d101      	bne.n	800759e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e099      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800759e:	4b4f      	ldr	r3, [pc, #316]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4e      	ldr	r2, [pc, #312]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075aa:	f7fa f861 	bl	8001670 <HAL_GetTick>
 80075ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075b0:	e008      	b.n	80075c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075b2:	f7fa f85d 	bl	8001670 <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e086      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075c4:	4b45      	ldr	r3, [pc, #276]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f0      	bne.n	80075b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075d0:	4b42      	ldr	r3, [pc, #264]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	051b      	lsls	r3, r3, #20
 80075de:	493f      	ldr	r1, [pc, #252]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	025b      	lsls	r3, r3, #9
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	3b01      	subs	r3, #1
 8007600:	041b      	lsls	r3, r3, #16
 8007602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	061b      	lsls	r3, r3, #24
 8007610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007614:	4931      	ldr	r1, [pc, #196]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800761a:	4b30      	ldr	r3, [pc, #192]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	492d      	ldr	r1, [pc, #180]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800762c:	4b2b      	ldr	r3, [pc, #172]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007630:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	4928      	ldr	r1, [pc, #160]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800763a:	4313      	orrs	r3, r2
 800763c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800763e:	4b27      	ldr	r3, [pc, #156]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007642:	4a26      	ldr	r2, [pc, #152]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800764a:	4b24      	ldr	r3, [pc, #144]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800764c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800764e:	4b24      	ldr	r3, [pc, #144]	@ (80076e0 <RCCEx_PLL3_Config+0x160>)
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	69d2      	ldr	r2, [r2, #28]
 8007656:	00d2      	lsls	r2, r2, #3
 8007658:	4920      	ldr	r1, [pc, #128]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800765a:	4313      	orrs	r3, r2
 800765c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800765e:	4b1f      	ldr	r3, [pc, #124]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	4a1e      	ldr	r2, [pc, #120]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007670:	4b1a      	ldr	r3, [pc, #104]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007674:	4a19      	ldr	r2, [pc, #100]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007676:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800767a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800767c:	e00f      	b.n	800769e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d106      	bne.n	8007692 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007684:	4b15      	ldr	r3, [pc, #84]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007688:	4a14      	ldr	r2, [pc, #80]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 800768a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800768e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007690:	e005      	b.n	800769e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007692:	4b12      	ldr	r3, [pc, #72]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	4a11      	ldr	r2, [pc, #68]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 8007698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800769c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800769e:	4b0f      	ldr	r3, [pc, #60]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a0e      	ldr	r2, [pc, #56]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076aa:	f7f9 ffe1 	bl	8001670 <HAL_GetTick>
 80076ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b0:	e008      	b.n	80076c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076b2:	f7f9 ffdd 	bl	8001670 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e006      	b.n	80076d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <RCCEx_PLL3_Config+0x15c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400
 80076e0:	ffff0007 	.word	0xffff0007

080076e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e049      	b.n	800778a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7f9 fc54 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3304      	adds	r3, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f000 fc58 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d001      	beq.n	80077ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e05e      	b.n	800786a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68da      	ldr	r2, [r3, #12]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007878 <HAL_TIM_Base_Start_IT+0xe4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d02c      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077d6:	d027      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a27      	ldr	r2, [pc, #156]	@ (800787c <HAL_TIM_Base_Start_IT+0xe8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d022      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a26      	ldr	r2, [pc, #152]	@ (8007880 <HAL_TIM_Base_Start_IT+0xec>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d01d      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a24      	ldr	r2, [pc, #144]	@ (8007884 <HAL_TIM_Base_Start_IT+0xf0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d018      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a23      	ldr	r2, [pc, #140]	@ (8007888 <HAL_TIM_Base_Start_IT+0xf4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d013      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a21      	ldr	r2, [pc, #132]	@ (800788c <HAL_TIM_Base_Start_IT+0xf8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00e      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <HAL_TIM_Base_Start_IT+0xfc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1e      	ldr	r2, [pc, #120]	@ (8007894 <HAL_TIM_Base_Start_IT+0x100>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_TIM_Base_Start_IT+0x94>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <HAL_TIM_Base_Start_IT+0x104>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d115      	bne.n	8007854 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	4b1b      	ldr	r3, [pc, #108]	@ (800789c <HAL_TIM_Base_Start_IT+0x108>)
 8007830:	4013      	ands	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b06      	cmp	r3, #6
 8007838:	d015      	beq.n	8007866 <HAL_TIM_Base_Start_IT+0xd2>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007840:	d011      	beq.n	8007866 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e008      	b.n	8007866 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e000      	b.n	8007868 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40010400 	.word	0x40010400
 800788c:	40001800 	.word	0x40001800
 8007890:	40014000 	.word	0x40014000
 8007894:	4000e000 	.word	0x4000e000
 8007898:	4000e400 	.word	0x4000e400
 800789c:	00010007 	.word	0x00010007

080078a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e049      	b.n	8007946 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f841 	bl	800794e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f000 fb7a 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr

08007962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d020      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01b      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f06f 0202 	mvn.w	r2, #2
 8007996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 faf5 	bl	8007f9c <HAL_TIM_IC_CaptureCallback>
 80079b2:	e005      	b.n	80079c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fae7 	bl	8007f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 faf8 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d020      	beq.n	8007a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01b      	beq.n	8007a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f06f 0204 	mvn.w	r2, #4
 80079e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 facf 	bl	8007f9c <HAL_TIM_IC_CaptureCallback>
 80079fe:	e005      	b.n	8007a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fac1 	bl	8007f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fad2 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d020      	beq.n	8007a5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0308 	and.w	r3, r3, #8
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01b      	beq.n	8007a5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f06f 0208 	mvn.w	r2, #8
 8007a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2204      	movs	r2, #4
 8007a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 faa9 	bl	8007f9c <HAL_TIM_IC_CaptureCallback>
 8007a4a:	e005      	b.n	8007a58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fa9b 	bl	8007f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 faac 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f003 0310 	and.w	r3, r3, #16
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d020      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01b      	beq.n	8007aaa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f06f 0210 	mvn.w	r2, #16
 8007a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2208      	movs	r2, #8
 8007a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa83 	bl	8007f9c <HAL_TIM_IC_CaptureCallback>
 8007a96:	e005      	b.n	8007aa4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa75 	bl	8007f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fa86 	bl	8007fb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f06f 0201 	mvn.w	r2, #1
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7f9 f91b 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 ff3a 	bl	8008970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 ff32 	bl	8008984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa40 	bl	8007fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00c      	beq.n	8007b68 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0220 	mvn.w	r2, #32
 8007b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fefa 	bl	800895c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0ff      	b.n	8007d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b14      	cmp	r3, #20
 8007b9a:	f200 80f0 	bhi.w	8007d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007d7f 	.word	0x08007d7f
 8007bac:	08007d7f 	.word	0x08007d7f
 8007bb0:	08007d7f 	.word	0x08007d7f
 8007bb4:	08007c39 	.word	0x08007c39
 8007bb8:	08007d7f 	.word	0x08007d7f
 8007bbc:	08007d7f 	.word	0x08007d7f
 8007bc0:	08007d7f 	.word	0x08007d7f
 8007bc4:	08007c7b 	.word	0x08007c7b
 8007bc8:	08007d7f 	.word	0x08007d7f
 8007bcc:	08007d7f 	.word	0x08007d7f
 8007bd0:	08007d7f 	.word	0x08007d7f
 8007bd4:	08007cbb 	.word	0x08007cbb
 8007bd8:	08007d7f 	.word	0x08007d7f
 8007bdc:	08007d7f 	.word	0x08007d7f
 8007be0:	08007d7f 	.word	0x08007d7f
 8007be4:	08007cfd 	.word	0x08007cfd
 8007be8:	08007d7f 	.word	0x08007d7f
 8007bec:	08007d7f 	.word	0x08007d7f
 8007bf0:	08007d7f 	.word	0x08007d7f
 8007bf4:	08007d3d 	.word	0x08007d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fa9c 	bl	800813c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0208 	orr.w	r2, r2, #8
 8007c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0204 	bic.w	r2, r2, #4
 8007c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6999      	ldr	r1, [r3, #24]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	619a      	str	r2, [r3, #24]
      break;
 8007c36:	e0a5      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fb0c 	bl	800825c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6999      	ldr	r1, [r3, #24]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	021a      	lsls	r2, r3, #8
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	619a      	str	r2, [r3, #24]
      break;
 8007c78:	e084      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb75 	bl	8008370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0208 	orr.w	r2, r2, #8
 8007c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0204 	bic.w	r2, r2, #4
 8007ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69d9      	ldr	r1, [r3, #28]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	61da      	str	r2, [r3, #28]
      break;
 8007cb8:	e064      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fbdd 	bl	8008480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69d9      	ldr	r1, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	021a      	lsls	r2, r3, #8
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	61da      	str	r2, [r3, #28]
      break;
 8007cfa:	e043      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68b9      	ldr	r1, [r7, #8]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fc26 	bl	8008554 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0208 	orr.w	r2, r2, #8
 8007d16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0204 	bic.w	r2, r2, #4
 8007d26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	691a      	ldr	r2, [r3, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d3a:	e023      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fc6a 	bl	800861c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	021a      	lsls	r2, r3, #8
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d7c:	e002      	b.n	8007d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop

08007d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIM_ConfigClockSource+0x1c>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e0dc      	b.n	8007f6e <HAL_TIM_ConfigClockSource+0x1d6>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4b6a      	ldr	r3, [pc, #424]	@ (8007f78 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a64      	ldr	r2, [pc, #400]	@ (8007f7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	f000 80a9 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007df0:	4a62      	ldr	r2, [pc, #392]	@ (8007f7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	f200 80ae 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007df8:	4a61      	ldr	r2, [pc, #388]	@ (8007f80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	f000 80a1 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e00:	4a5f      	ldr	r2, [pc, #380]	@ (8007f80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	f200 80a6 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e08:	4a5e      	ldr	r2, [pc, #376]	@ (8007f84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	f000 8099 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e10:	4a5c      	ldr	r2, [pc, #368]	@ (8007f84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	f200 809e 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e1c:	f000 8091 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e24:	f200 8096 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2c:	f000 8089 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e34:	f200 808e 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e3c:	d03e      	beq.n	8007ebc <HAL_TIM_ConfigClockSource+0x124>
 8007e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e42:	f200 8087 	bhi.w	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e4a:	f000 8086 	beq.w	8007f5a <HAL_TIM_ConfigClockSource+0x1c2>
 8007e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e52:	d87f      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e54:	2b70      	cmp	r3, #112	@ 0x70
 8007e56:	d01a      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0xf6>
 8007e58:	2b70      	cmp	r3, #112	@ 0x70
 8007e5a:	d87b      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e5c:	2b60      	cmp	r3, #96	@ 0x60
 8007e5e:	d050      	beq.n	8007f02 <HAL_TIM_ConfigClockSource+0x16a>
 8007e60:	2b60      	cmp	r3, #96	@ 0x60
 8007e62:	d877      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e64:	2b50      	cmp	r3, #80	@ 0x50
 8007e66:	d03c      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x14a>
 8007e68:	2b50      	cmp	r3, #80	@ 0x50
 8007e6a:	d873      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e6c:	2b40      	cmp	r3, #64	@ 0x40
 8007e6e:	d058      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x18a>
 8007e70:	2b40      	cmp	r3, #64	@ 0x40
 8007e72:	d86f      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e74:	2b30      	cmp	r3, #48	@ 0x30
 8007e76:	d064      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e78:	2b30      	cmp	r3, #48	@ 0x30
 8007e7a:	d86b      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d060      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d867      	bhi.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d05c      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e88:	2b10      	cmp	r3, #16
 8007e8a:	d05a      	beq.n	8007f42 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e8c:	e062      	b.n	8007f54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e9e:	f000 fca1 	bl	80087e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	609a      	str	r2, [r3, #8]
      break;
 8007eba:	e04f      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ecc:	f000 fc8a 	bl	80087e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689a      	ldr	r2, [r3, #8]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ede:	609a      	str	r2, [r3, #8]
      break;
 8007ee0:	e03c      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f000 fbfa 	bl	80086e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2150      	movs	r1, #80	@ 0x50
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fc54 	bl	80087a8 <TIM_ITRx_SetConfig>
      break;
 8007f00:	e02c      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f000 fc19 	bl	8008746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2160      	movs	r1, #96	@ 0x60
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fc44 	bl	80087a8 <TIM_ITRx_SetConfig>
      break;
 8007f20:	e01c      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f000 fbda 	bl	80086e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2140      	movs	r1, #64	@ 0x40
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 fc34 	bl	80087a8 <TIM_ITRx_SetConfig>
      break;
 8007f40:	e00c      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f000 fc2b 	bl	80087a8 <TIM_ITRx_SetConfig>
      break;
 8007f52:	e003      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
      break;
 8007f58:	e000      	b.n	8007f5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	ffceff88 	.word	0xffceff88
 8007f7c:	00100040 	.word	0x00100040
 8007f80:	00100030 	.word	0x00100030
 8007f84:	00100020 	.word	0x00100020

08007f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a4a      	ldr	r2, [pc, #296]	@ (8008114 <TIM_Base_SetConfig+0x13c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d013      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff6:	d00f      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a47      	ldr	r2, [pc, #284]	@ (8008118 <TIM_Base_SetConfig+0x140>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a46      	ldr	r2, [pc, #280]	@ (800811c <TIM_Base_SetConfig+0x144>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d007      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a45      	ldr	r2, [pc, #276]	@ (8008120 <TIM_Base_SetConfig+0x148>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a44      	ldr	r2, [pc, #272]	@ (8008124 <TIM_Base_SetConfig+0x14c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d108      	bne.n	800802a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a39      	ldr	r2, [pc, #228]	@ (8008114 <TIM_Base_SetConfig+0x13c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d027      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008038:	d023      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a36      	ldr	r2, [pc, #216]	@ (8008118 <TIM_Base_SetConfig+0x140>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01f      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a35      	ldr	r2, [pc, #212]	@ (800811c <TIM_Base_SetConfig+0x144>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01b      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a34      	ldr	r2, [pc, #208]	@ (8008120 <TIM_Base_SetConfig+0x148>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d017      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a33      	ldr	r2, [pc, #204]	@ (8008124 <TIM_Base_SetConfig+0x14c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a32      	ldr	r2, [pc, #200]	@ (8008128 <TIM_Base_SetConfig+0x150>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00f      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a31      	ldr	r2, [pc, #196]	@ (800812c <TIM_Base_SetConfig+0x154>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00b      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a30      	ldr	r2, [pc, #192]	@ (8008130 <TIM_Base_SetConfig+0x158>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d007      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a2f      	ldr	r2, [pc, #188]	@ (8008134 <TIM_Base_SetConfig+0x15c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d003      	beq.n	8008082 <TIM_Base_SetConfig+0xaa>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a2e      	ldr	r2, [pc, #184]	@ (8008138 <TIM_Base_SetConfig+0x160>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d108      	bne.n	8008094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a16      	ldr	r2, [pc, #88]	@ (8008114 <TIM_Base_SetConfig+0x13c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00f      	beq.n	80080e0 <TIM_Base_SetConfig+0x108>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a18      	ldr	r2, [pc, #96]	@ (8008124 <TIM_Base_SetConfig+0x14c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00b      	beq.n	80080e0 <TIM_Base_SetConfig+0x108>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a17      	ldr	r2, [pc, #92]	@ (8008128 <TIM_Base_SetConfig+0x150>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d007      	beq.n	80080e0 <TIM_Base_SetConfig+0x108>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a16      	ldr	r2, [pc, #88]	@ (800812c <TIM_Base_SetConfig+0x154>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_Base_SetConfig+0x108>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a15      	ldr	r2, [pc, #84]	@ (8008130 <TIM_Base_SetConfig+0x158>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d103      	bne.n	80080e8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d105      	bne.n	8008106 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f023 0201 	bic.w	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	611a      	str	r2, [r3, #16]
  }
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	40010000 	.word	0x40010000
 8008118:	40000400 	.word	0x40000400
 800811c:	40000800 	.word	0x40000800
 8008120:	40000c00 	.word	0x40000c00
 8008124:	40010400 	.word	0x40010400
 8008128:	40014000 	.word	0x40014000
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800
 8008134:	4000e000 	.word	0x4000e000
 8008138:	4000e400 	.word	0x4000e400

0800813c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4b37      	ldr	r3, [pc, #220]	@ (8008244 <TIM_OC1_SetConfig+0x108>)
 8008168:	4013      	ands	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0302 	bic.w	r3, r3, #2
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a2d      	ldr	r2, [pc, #180]	@ (8008248 <TIM_OC1_SetConfig+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_OC1_SetConfig+0x7c>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a2c      	ldr	r2, [pc, #176]	@ (800824c <TIM_OC1_SetConfig+0x110>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00b      	beq.n	80081b8 <TIM_OC1_SetConfig+0x7c>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008250 <TIM_OC1_SetConfig+0x114>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_OC1_SetConfig+0x7c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <TIM_OC1_SetConfig+0x118>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_OC1_SetConfig+0x7c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a29      	ldr	r2, [pc, #164]	@ (8008258 <TIM_OC1_SetConfig+0x11c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d10c      	bne.n	80081d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	f023 0308 	bic.w	r3, r3, #8
 80081be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f023 0304 	bic.w	r3, r3, #4
 80081d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008248 <TIM_OC1_SetConfig+0x10c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00f      	beq.n	80081fa <TIM_OC1_SetConfig+0xbe>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a1b      	ldr	r2, [pc, #108]	@ (800824c <TIM_OC1_SetConfig+0x110>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00b      	beq.n	80081fa <TIM_OC1_SetConfig+0xbe>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008250 <TIM_OC1_SetConfig+0x114>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <TIM_OC1_SetConfig+0xbe>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a19      	ldr	r2, [pc, #100]	@ (8008254 <TIM_OC1_SetConfig+0x118>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_OC1_SetConfig+0xbe>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a18      	ldr	r2, [pc, #96]	@ (8008258 <TIM_OC1_SetConfig+0x11c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d111      	bne.n	800821e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	fffeff8f 	.word	0xfffeff8f
 8008248:	40010000 	.word	0x40010000
 800824c:	40010400 	.word	0x40010400
 8008250:	40014000 	.word	0x40014000
 8008254:	40014400 	.word	0x40014400
 8008258:	40014800 	.word	0x40014800

0800825c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f023 0210 	bic.w	r2, r3, #16
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4b34      	ldr	r3, [pc, #208]	@ (8008358 <TIM_OC2_SetConfig+0xfc>)
 8008288:	4013      	ands	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f023 0320 	bic.w	r3, r3, #32
 80082a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a29      	ldr	r2, [pc, #164]	@ (800835c <TIM_OC2_SetConfig+0x100>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_OC2_SetConfig+0x68>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a28      	ldr	r2, [pc, #160]	@ (8008360 <TIM_OC2_SetConfig+0x104>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d10d      	bne.n	80082e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	011b      	lsls	r3, r3, #4
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	@ (800835c <TIM_OC2_SetConfig+0x100>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00f      	beq.n	8008308 <TIM_OC2_SetConfig+0xac>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008360 <TIM_OC2_SetConfig+0x104>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00b      	beq.n	8008308 <TIM_OC2_SetConfig+0xac>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a1c      	ldr	r2, [pc, #112]	@ (8008364 <TIM_OC2_SetConfig+0x108>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d007      	beq.n	8008308 <TIM_OC2_SetConfig+0xac>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008368 <TIM_OC2_SetConfig+0x10c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d003      	beq.n	8008308 <TIM_OC2_SetConfig+0xac>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1a      	ldr	r2, [pc, #104]	@ (800836c <TIM_OC2_SetConfig+0x110>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d113      	bne.n	8008330 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800830e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	feff8fff 	.word	0xfeff8fff
 800835c:	40010000 	.word	0x40010000
 8008360:	40010400 	.word	0x40010400
 8008364:	40014000 	.word	0x40014000
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800

08008370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4b33      	ldr	r3, [pc, #204]	@ (8008468 <TIM_OC3_SetConfig+0xf8>)
 800839c:	4013      	ands	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a28      	ldr	r2, [pc, #160]	@ (800846c <TIM_OC3_SetConfig+0xfc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC3_SetConfig+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a27      	ldr	r2, [pc, #156]	@ (8008470 <TIM_OC3_SetConfig+0x100>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d10d      	bne.n	80083f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a1d      	ldr	r2, [pc, #116]	@ (800846c <TIM_OC3_SetConfig+0xfc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00f      	beq.n	800841a <TIM_OC3_SetConfig+0xaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008470 <TIM_OC3_SetConfig+0x100>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_OC3_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a1b      	ldr	r2, [pc, #108]	@ (8008474 <TIM_OC3_SetConfig+0x104>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d007      	beq.n	800841a <TIM_OC3_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a1a      	ldr	r2, [pc, #104]	@ (8008478 <TIM_OC3_SetConfig+0x108>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_OC3_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a19      	ldr	r2, [pc, #100]	@ (800847c <TIM_OC3_SetConfig+0x10c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d113      	bne.n	8008442 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	4313      	orrs	r3, r2
 8008434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	621a      	str	r2, [r3, #32]
}
 800845c:	bf00      	nop
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	fffeff8f 	.word	0xfffeff8f
 800846c:	40010000 	.word	0x40010000
 8008470:	40010400 	.word	0x40010400
 8008474:	40014000 	.word	0x40014000
 8008478:	40014400 	.word	0x40014400
 800847c:	40014800 	.word	0x40014800

08008480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	4b24      	ldr	r3, [pc, #144]	@ (800853c <TIM_OC4_SetConfig+0xbc>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	031b      	lsls	r3, r3, #12
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a19      	ldr	r2, [pc, #100]	@ (8008540 <TIM_OC4_SetConfig+0xc0>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d00f      	beq.n	8008500 <TIM_OC4_SetConfig+0x80>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a18      	ldr	r2, [pc, #96]	@ (8008544 <TIM_OC4_SetConfig+0xc4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00b      	beq.n	8008500 <TIM_OC4_SetConfig+0x80>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a17      	ldr	r2, [pc, #92]	@ (8008548 <TIM_OC4_SetConfig+0xc8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d007      	beq.n	8008500 <TIM_OC4_SetConfig+0x80>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a16      	ldr	r2, [pc, #88]	@ (800854c <TIM_OC4_SetConfig+0xcc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d003      	beq.n	8008500 <TIM_OC4_SetConfig+0x80>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a15      	ldr	r2, [pc, #84]	@ (8008550 <TIM_OC4_SetConfig+0xd0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d109      	bne.n	8008514 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	019b      	lsls	r3, r3, #6
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	621a      	str	r2, [r3, #32]
}
 800852e:	bf00      	nop
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	feff8fff 	.word	0xfeff8fff
 8008540:	40010000 	.word	0x40010000
 8008544:	40010400 	.word	0x40010400
 8008548:	40014000 	.word	0x40014000
 800854c:	40014400 	.word	0x40014400
 8008550:	40014800 	.word	0x40014800

08008554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4b21      	ldr	r3, [pc, #132]	@ (8008604 <TIM_OC5_SetConfig+0xb0>)
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	041b      	lsls	r3, r3, #16
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a18      	ldr	r2, [pc, #96]	@ (8008608 <TIM_OC5_SetConfig+0xb4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00f      	beq.n	80085ca <TIM_OC5_SetConfig+0x76>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a17      	ldr	r2, [pc, #92]	@ (800860c <TIM_OC5_SetConfig+0xb8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00b      	beq.n	80085ca <TIM_OC5_SetConfig+0x76>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a16      	ldr	r2, [pc, #88]	@ (8008610 <TIM_OC5_SetConfig+0xbc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d007      	beq.n	80085ca <TIM_OC5_SetConfig+0x76>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a15      	ldr	r2, [pc, #84]	@ (8008614 <TIM_OC5_SetConfig+0xc0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d003      	beq.n	80085ca <TIM_OC5_SetConfig+0x76>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a14      	ldr	r2, [pc, #80]	@ (8008618 <TIM_OC5_SetConfig+0xc4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d109      	bne.n	80085de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	021b      	lsls	r3, r3, #8
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	fffeff8f 	.word	0xfffeff8f
 8008608:	40010000 	.word	0x40010000
 800860c:	40010400 	.word	0x40010400
 8008610:	40014000 	.word	0x40014000
 8008614:	40014400 	.word	0x40014400
 8008618:	40014800 	.word	0x40014800

0800861c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4b22      	ldr	r3, [pc, #136]	@ (80086d0 <TIM_OC6_SetConfig+0xb4>)
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	021b      	lsls	r3, r3, #8
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800865e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	051b      	lsls	r3, r3, #20
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a19      	ldr	r2, [pc, #100]	@ (80086d4 <TIM_OC6_SetConfig+0xb8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00f      	beq.n	8008694 <TIM_OC6_SetConfig+0x78>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a18      	ldr	r2, [pc, #96]	@ (80086d8 <TIM_OC6_SetConfig+0xbc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00b      	beq.n	8008694 <TIM_OC6_SetConfig+0x78>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <TIM_OC6_SetConfig+0xc0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d007      	beq.n	8008694 <TIM_OC6_SetConfig+0x78>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a16      	ldr	r2, [pc, #88]	@ (80086e0 <TIM_OC6_SetConfig+0xc4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_OC6_SetConfig+0x78>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a15      	ldr	r2, [pc, #84]	@ (80086e4 <TIM_OC6_SetConfig+0xc8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d109      	bne.n	80086a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800869a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	029b      	lsls	r3, r3, #10
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	feff8fff 	.word	0xfeff8fff
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40010400 	.word	0x40010400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800

080086e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f023 0201 	bic.w	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f023 030a 	bic.w	r3, r3, #10
 8008724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	621a      	str	r2, [r3, #32]
}
 800873a:	bf00      	nop
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008746:	b480      	push	{r7}
 8008748:	b087      	sub	sp, #28
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a1b      	ldr	r3, [r3, #32]
 800875c:	f023 0210 	bic.w	r2, r3, #16
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	031b      	lsls	r3, r3, #12
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008782:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
	...

080087a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	4b09      	ldr	r3, [pc, #36]	@ (80087e0 <TIM_ITRx_SetConfig+0x38>)
 80087bc:	4013      	ands	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f043 0307 	orr.w	r3, r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	609a      	str	r2, [r3, #8]
}
 80087d2:	bf00      	nop
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	ffcfff8f 	.word	0xffcfff8f

080087e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	021a      	lsls	r2, r3, #8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	431a      	orrs	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4313      	orrs	r3, r2
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	609a      	str	r2, [r3, #8]
}
 8008818:	bf00      	nop
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008838:	2302      	movs	r3, #2
 800883a:	e077      	b.n	800892c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a35      	ldr	r2, [pc, #212]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a34      	ldr	r2, [pc, #208]	@ (800893c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d108      	bne.n	8008882 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008876:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008888:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a25      	ldr	r2, [pc, #148]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d02c      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ae:	d027      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a22      	ldr	r2, [pc, #136]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d022      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a21      	ldr	r2, [pc, #132]	@ (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d01d      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008948 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d018      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1a      	ldr	r2, [pc, #104]	@ (800893c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1b      	ldr	r2, [pc, #108]	@ (800894c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00e      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008950 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d009      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a18      	ldr	r2, [pc, #96]	@ (8008954 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d004      	beq.n	8008900 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a17      	ldr	r2, [pc, #92]	@ (8008958 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10c      	bne.n	800891a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	4313      	orrs	r3, r2
 8008910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	40010000 	.word	0x40010000
 800893c:	40010400 	.word	0x40010400
 8008940:	40000400 	.word	0x40000400
 8008944:	40000800 	.word	0x40000800
 8008948:	40000c00 	.word	0x40000c00
 800894c:	40001800 	.word	0x40001800
 8008950:	40014000 	.word	0x40014000
 8008954:	4000e000 	.word	0x4000e000
 8008958:	4000e400 	.word	0x4000e400

0800895c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e04a      	b.n	8008a40 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d106      	bne.n	80089c2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7f8 fb21 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2224      	movs	r2, #36	@ 0x24
 80089c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0201 	bic.w	r2, r2, #1
 80089d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fac8 	bl	8009f78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc59 	bl	80092a0 <UART_SetConfig>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e023      	b.n	8008a40 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8008a16:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 fb3f 	bl	800a0bc <UART_CheckIdleState>
 8008a3e:	4603      	mov	r3, r0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008a72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008a76:	4013      	ands	r3, r2
 8008a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008a7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11b      	bne.n	8008abc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d015      	beq.n	8008abc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d105      	bne.n	8008aa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8377 	beq.w	80091a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
      }
      return;
 8008aba:	e371      	b.n	80091a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8123 	beq.w	8008d0c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ac6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008aca:	4b8d      	ldr	r3, [pc, #564]	@ (8008d00 <HAL_UART_IRQHandler+0x2b8>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008ad2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008ad6:	4b8b      	ldr	r3, [pc, #556]	@ (8008d04 <HAL_UART_IRQHandler+0x2bc>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 8116 	beq.w	8008d0c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <HAL_UART_IRQHandler+0xc8>
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d011      	beq.n	8008b40 <HAL_UART_IRQHandler+0xf8>
 8008b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b36:	f043 0204 	orr.w	r2, r3, #4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d011      	beq.n	8008b70 <HAL_UART_IRQHandler+0x128>
 8008b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b66:	f043 0202 	orr.w	r2, r3, #2
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008b88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8008d00 <HAL_UART_IRQHandler+0x2b8>)
 8008b8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba2:	f043 0208 	orr.w	r2, r3, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d012      	beq.n	8008bde <HAL_UART_IRQHandler+0x196>
 8008bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 82dd 	beq.w	80091a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d013      	beq.n	8008c1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c32:	2b40      	cmp	r3, #64	@ 0x40
 8008c34:	d005      	beq.n	8008c42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d054      	beq.n	8008cec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fc3a 	bl	800a4bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c52:	2b40      	cmp	r3, #64	@ 0x40
 8008c54:	d146      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1d9      	bne.n	8008c56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d017      	beq.n	8008cdc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb2:	4a15      	ldr	r2, [pc, #84]	@ (8008d08 <HAL_UART_IRQHandler+0x2c0>)
 8008cb4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fa f861 	bl	8002d84 <HAL_DMA_Abort_IT>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d019      	beq.n	8008cfc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cda:	e00f      	b.n	8008cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa81 	bl	80091e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce2:	e00b      	b.n	8008cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fa7d 	bl	80091e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cea:	e007      	b.n	8008cfc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa79 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008cfa:	e253      	b.n	80091a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	bf00      	nop
    return;
 8008cfe:	e251      	b.n	80091a4 <HAL_UART_IRQHandler+0x75c>
 8008d00:	10000001 	.word	0x10000001
 8008d04:	04000120 	.word	0x04000120
 8008d08:	0800a76f 	.word	0x0800a76f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	f040 81e7 	bne.w	80090e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 81e0 	beq.w	80090e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 81d9 	beq.w	80090e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2210      	movs	r2, #16
 8008d38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d44:	2b40      	cmp	r3, #64	@ 0x40
 8008d46:	f040 8151 	bne.w	8008fec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a96      	ldr	r2, [pc, #600]	@ (8008fac <HAL_UART_IRQHandler+0x564>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d068      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a93      	ldr	r2, [pc, #588]	@ (8008fb0 <HAL_UART_IRQHandler+0x568>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d061      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a91      	ldr	r2, [pc, #580]	@ (8008fb4 <HAL_UART_IRQHandler+0x56c>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d05a      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8008fb8 <HAL_UART_IRQHandler+0x570>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d053      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a8c      	ldr	r2, [pc, #560]	@ (8008fbc <HAL_UART_IRQHandler+0x574>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d04c      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a89      	ldr	r2, [pc, #548]	@ (8008fc0 <HAL_UART_IRQHandler+0x578>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d045      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a87      	ldr	r2, [pc, #540]	@ (8008fc4 <HAL_UART_IRQHandler+0x57c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d03e      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a84      	ldr	r2, [pc, #528]	@ (8008fc8 <HAL_UART_IRQHandler+0x580>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d037      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a82      	ldr	r2, [pc, #520]	@ (8008fcc <HAL_UART_IRQHandler+0x584>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d030      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a7f      	ldr	r2, [pc, #508]	@ (8008fd0 <HAL_UART_IRQHandler+0x588>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d029      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a7d      	ldr	r2, [pc, #500]	@ (8008fd4 <HAL_UART_IRQHandler+0x58c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d022      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a7a      	ldr	r2, [pc, #488]	@ (8008fd8 <HAL_UART_IRQHandler+0x590>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01b      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a78      	ldr	r2, [pc, #480]	@ (8008fdc <HAL_UART_IRQHandler+0x594>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d014      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a75      	ldr	r2, [pc, #468]	@ (8008fe0 <HAL_UART_IRQHandler+0x598>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00d      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a73      	ldr	r2, [pc, #460]	@ (8008fe4 <HAL_UART_IRQHandler+0x59c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d006      	beq.n	8008e2a <HAL_UART_IRQHandler+0x3e2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a70      	ldr	r2, [pc, #448]	@ (8008fe8 <HAL_UART_IRQHandler+0x5a0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d106      	bne.n	8008e38 <HAL_UART_IRQHandler+0x3f0>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	e005      	b.n	8008e44 <HAL_UART_IRQHandler+0x3fc>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 81ab 	beq.w	80091a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	f080 81a3 	bcs.w	80091a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e78:	f000 8087 	beq.w	8008f8a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eaa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1da      	bne.n	8008e7c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008eea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008eee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e1      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e3      	bne.n	8008f02 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f58:	f023 0310 	bic.w	r3, r3, #16
 8008f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e4      	bne.n	8008f48 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7f9 fbdf 	bl	8002748 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7f7 ff39 	bl	8000e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008faa:	e0fd      	b.n	80091a8 <HAL_UART_IRQHandler+0x760>
 8008fac:	40020010 	.word	0x40020010
 8008fb0:	40020028 	.word	0x40020028
 8008fb4:	40020040 	.word	0x40020040
 8008fb8:	40020058 	.word	0x40020058
 8008fbc:	40020070 	.word	0x40020070
 8008fc0:	40020088 	.word	0x40020088
 8008fc4:	400200a0 	.word	0x400200a0
 8008fc8:	400200b8 	.word	0x400200b8
 8008fcc:	40020410 	.word	0x40020410
 8008fd0:	40020428 	.word	0x40020428
 8008fd4:	40020440 	.word	0x40020440
 8008fd8:	40020458 	.word	0x40020458
 8008fdc:	40020470 	.word	0x40020470
 8008fe0:	40020488 	.word	0x40020488
 8008fe4:	400204a0 	.word	0x400204a0
 8008fe8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 80cf 	beq.w	80091ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800900e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 80ca 	beq.w	80091ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800902c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800903a:	647b      	str	r3, [r7, #68]	@ 0x44
 800903c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009040:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009042:	e841 2300 	strex	r3, r2, [r1]
 8009046:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1e4      	bne.n	8009018 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	3308      	adds	r3, #8
 8009054:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	623b      	str	r3, [r7, #32]
   return(result);
 800905e:	6a3a      	ldr	r2, [r7, #32]
 8009060:	4b55      	ldr	r3, [pc, #340]	@ (80091b8 <HAL_UART_IRQHandler+0x770>)
 8009062:	4013      	ands	r3, r2
 8009064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	3308      	adds	r3, #8
 800906e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009072:	633a      	str	r2, [r7, #48]	@ 0x30
 8009074:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e3      	bne.n	800904e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090bc:	61fb      	str	r3, [r7, #28]
 80090be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	69b9      	ldr	r1, [r7, #24]
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e4      	bne.n	800909a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80090d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7f7 fe9d 	bl	8000e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090e2:	e063      	b.n	80091ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80090e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00e      	beq.n	800910e <HAL_UART_IRQHandler+0x6c6>
 80090f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d008      	beq.n	800910e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 fb72 	bl	800a7f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800910c:	e051      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800910e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009116:	2b00      	cmp	r3, #0
 8009118:	d014      	beq.n	8009144 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800911a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800911e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800912a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009136:	2b00      	cmp	r3, #0
 8009138:	d03a      	beq.n	80091b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
    }
    return;
 8009142:	e035      	b.n	80091b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d009      	beq.n	8009164 <HAL_UART_IRQHandler+0x71c>
 8009150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fb1c 	bl	800a79a <UART_EndTransmit_IT>
    return;
 8009162:	e026      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d009      	beq.n	8009184 <HAL_UART_IRQHandler+0x73c>
 8009170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009174:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fb4b 	bl	800a818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009182:	e016      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009188:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d010      	beq.n	80091b2 <HAL_UART_IRQHandler+0x76a>
 8009190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009194:	2b00      	cmp	r3, #0
 8009196:	da0c      	bge.n	80091b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fb33 	bl	800a804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919e:	e008      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80091a0:	bf00      	nop
 80091a2:	e006      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80091a4:	bf00      	nop
 80091a6:	e004      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80091a8:	bf00      	nop
 80091aa:	e002      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80091ac:	bf00      	nop
 80091ae:	e000      	b.n	80091b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80091b0:	bf00      	nop
  }
}
 80091b2:	37e8      	adds	r7, #232	@ 0xe8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	effffffe 	.word	0xeffffffe

080091bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b08f      	sub	sp, #60	@ 0x3c
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_HalfDuplex_EnableReceiver+0x16>
 800920a:	2302      	movs	r3, #2
 800920c:	e042      	b.n	8009294 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2224      	movs	r2, #36	@ 0x24
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	e853 3f00 	ldrex	r3, [r3]
 800922a:	61fb      	str	r3, [r7, #28]
   return(result);
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f023 030c 	bic.w	r3, r3, #12
 8009232:	637b      	str	r3, [r7, #52]	@ 0x34
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800923e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009244:	e841 2300 	strex	r3, r2, [r1]
 8009248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1e6      	bne.n	800921e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	e853 3f00 	ldrex	r3, [r3]
 800925c:	60bb      	str	r3, [r7, #8]
   return(result);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f043 0304 	orr.w	r3, r3, #4
 8009264:	633b      	str	r3, [r7, #48]	@ 0x30
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6979      	ldr	r1, [r7, #20]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	613b      	str	r3, [r7, #16]
   return(result);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e6      	bne.n	8009250 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	373c      	adds	r7, #60	@ 0x3c
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a4:	b092      	sub	sp, #72	@ 0x48
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	689a      	ldr	r2, [r3, #8]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	431a      	orrs	r2, r3
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4bbe      	ldr	r3, [pc, #760]	@ (80095c8 <UART_SetConfig+0x328>)
 80092d0:	4013      	ands	r3, r2
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092d8:	430b      	orrs	r3, r1
 80092da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4ab3      	ldr	r2, [pc, #716]	@ (80095cc <UART_SetConfig+0x32c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d004      	beq.n	800930c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009308:	4313      	orrs	r3, r2
 800930a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	4baf      	ldr	r3, [pc, #700]	@ (80095d0 <UART_SetConfig+0x330>)
 8009314:	4013      	ands	r3, r2
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	f023 010f 	bic.w	r1, r3, #15
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4aa6      	ldr	r2, [pc, #664]	@ (80095d4 <UART_SetConfig+0x334>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d177      	bne.n	8009430 <UART_SetConfig+0x190>
 8009340:	4ba5      	ldr	r3, [pc, #660]	@ (80095d8 <UART_SetConfig+0x338>)
 8009342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009348:	2b28      	cmp	r3, #40	@ 0x28
 800934a:	d86d      	bhi.n	8009428 <UART_SetConfig+0x188>
 800934c:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <UART_SetConfig+0xb4>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	080093f9 	.word	0x080093f9
 8009358:	08009429 	.word	0x08009429
 800935c:	08009429 	.word	0x08009429
 8009360:	08009429 	.word	0x08009429
 8009364:	08009429 	.word	0x08009429
 8009368:	08009429 	.word	0x08009429
 800936c:	08009429 	.word	0x08009429
 8009370:	08009429 	.word	0x08009429
 8009374:	08009401 	.word	0x08009401
 8009378:	08009429 	.word	0x08009429
 800937c:	08009429 	.word	0x08009429
 8009380:	08009429 	.word	0x08009429
 8009384:	08009429 	.word	0x08009429
 8009388:	08009429 	.word	0x08009429
 800938c:	08009429 	.word	0x08009429
 8009390:	08009429 	.word	0x08009429
 8009394:	08009409 	.word	0x08009409
 8009398:	08009429 	.word	0x08009429
 800939c:	08009429 	.word	0x08009429
 80093a0:	08009429 	.word	0x08009429
 80093a4:	08009429 	.word	0x08009429
 80093a8:	08009429 	.word	0x08009429
 80093ac:	08009429 	.word	0x08009429
 80093b0:	08009429 	.word	0x08009429
 80093b4:	08009411 	.word	0x08009411
 80093b8:	08009429 	.word	0x08009429
 80093bc:	08009429 	.word	0x08009429
 80093c0:	08009429 	.word	0x08009429
 80093c4:	08009429 	.word	0x08009429
 80093c8:	08009429 	.word	0x08009429
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009429 	.word	0x08009429
 80093d4:	08009419 	.word	0x08009419
 80093d8:	08009429 	.word	0x08009429
 80093dc:	08009429 	.word	0x08009429
 80093e0:	08009429 	.word	0x08009429
 80093e4:	08009429 	.word	0x08009429
 80093e8:	08009429 	.word	0x08009429
 80093ec:	08009429 	.word	0x08009429
 80093f0:	08009429 	.word	0x08009429
 80093f4:	08009421 	.word	0x08009421
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e326      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009400:	2304      	movs	r3, #4
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e322      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009408:	2308      	movs	r3, #8
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e31e      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009410:	2310      	movs	r3, #16
 8009412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009416:	e31a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009418:	2320      	movs	r3, #32
 800941a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800941e:	e316      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009426:	e312      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009428:	2380      	movs	r3, #128	@ 0x80
 800942a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800942e:	e30e      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a69      	ldr	r2, [pc, #420]	@ (80095dc <UART_SetConfig+0x33c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d130      	bne.n	800949c <UART_SetConfig+0x1fc>
 800943a:	4b67      	ldr	r3, [pc, #412]	@ (80095d8 <UART_SetConfig+0x338>)
 800943c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b05      	cmp	r3, #5
 8009444:	d826      	bhi.n	8009494 <UART_SetConfig+0x1f4>
 8009446:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x1ac>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	08009465 	.word	0x08009465
 8009450:	0800946d 	.word	0x0800946d
 8009454:	08009475 	.word	0x08009475
 8009458:	0800947d 	.word	0x0800947d
 800945c:	08009485 	.word	0x08009485
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e2f0      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e2ec      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e2e8      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009482:	e2e4      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800948a:	e2e0      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800948c:	2340      	movs	r3, #64	@ 0x40
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009492:	e2dc      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800949a:	e2d8      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a4f      	ldr	r2, [pc, #316]	@ (80095e0 <UART_SetConfig+0x340>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d130      	bne.n	8009508 <UART_SetConfig+0x268>
 80094a6:	4b4c      	ldr	r3, [pc, #304]	@ (80095d8 <UART_SetConfig+0x338>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d826      	bhi.n	8009500 <UART_SetConfig+0x260>
 80094b2:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <UART_SetConfig+0x218>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	080094d1 	.word	0x080094d1
 80094bc:	080094d9 	.word	0x080094d9
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	080094e9 	.word	0x080094e9
 80094c8:	080094f1 	.word	0x080094f1
 80094cc:	080094f9 	.word	0x080094f9
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e2ba      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80094d8:	2304      	movs	r3, #4
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e2b6      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80094e0:	2308      	movs	r3, #8
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e2b2      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80094e8:	2310      	movs	r3, #16
 80094ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ee:	e2ae      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80094f0:	2320      	movs	r3, #32
 80094f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f6:	e2aa      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80094f8:	2340      	movs	r3, #64	@ 0x40
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094fe:	e2a6      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009500:	2380      	movs	r3, #128	@ 0x80
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009506:	e2a2      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a35      	ldr	r2, [pc, #212]	@ (80095e4 <UART_SetConfig+0x344>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d130      	bne.n	8009574 <UART_SetConfig+0x2d4>
 8009512:	4b31      	ldr	r3, [pc, #196]	@ (80095d8 <UART_SetConfig+0x338>)
 8009514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b05      	cmp	r3, #5
 800951c:	d826      	bhi.n	800956c <UART_SetConfig+0x2cc>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <UART_SetConfig+0x284>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009545 	.word	0x08009545
 800952c:	0800954d 	.word	0x0800954d
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e284      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009544:	2304      	movs	r3, #4
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e280      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800954c:	2308      	movs	r3, #8
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e27c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009554:	2310      	movs	r3, #16
 8009556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955a:	e278      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800955c:	2320      	movs	r3, #32
 800955e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009562:	e274      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009564:	2340      	movs	r3, #64	@ 0x40
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800956a:	e270      	b.n	8009a4e <UART_SetConfig+0x7ae>
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009572:	e26c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1b      	ldr	r2, [pc, #108]	@ (80095e8 <UART_SetConfig+0x348>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d142      	bne.n	8009604 <UART_SetConfig+0x364>
 800957e:	4b16      	ldr	r3, [pc, #88]	@ (80095d8 <UART_SetConfig+0x338>)
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b05      	cmp	r3, #5
 8009588:	d838      	bhi.n	80095fc <UART_SetConfig+0x35c>
 800958a:	a201      	add	r2, pc, #4	@ (adr r2, 8009590 <UART_SetConfig+0x2f0>)
 800958c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b9 	.word	0x080095b9
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095ed 	.word	0x080095ed
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	2300      	movs	r3, #0
 80095aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ae:	e24e      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095b0:	2304      	movs	r3, #4
 80095b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b6:	e24a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095b8:	2308      	movs	r3, #8
 80095ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095be:	e246      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095c0:	2310      	movs	r3, #16
 80095c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c6:	e242      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095c8:	cfff69f3 	.word	0xcfff69f3
 80095cc:	58000c00 	.word	0x58000c00
 80095d0:	11fff4ff 	.word	0x11fff4ff
 80095d4:	40011000 	.word	0x40011000
 80095d8:	58024400 	.word	0x58024400
 80095dc:	40004400 	.word	0x40004400
 80095e0:	40004800 	.word	0x40004800
 80095e4:	40004c00 	.word	0x40004c00
 80095e8:	40005000 	.word	0x40005000
 80095ec:	2320      	movs	r3, #32
 80095ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095f2:	e22c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095fa:	e228      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80095fc:	2380      	movs	r3, #128	@ 0x80
 80095fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009602:	e224      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4ab1      	ldr	r2, [pc, #708]	@ (80098d0 <UART_SetConfig+0x630>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d176      	bne.n	80096fc <UART_SetConfig+0x45c>
 800960e:	4bb1      	ldr	r3, [pc, #708]	@ (80098d4 <UART_SetConfig+0x634>)
 8009610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009616:	2b28      	cmp	r3, #40	@ 0x28
 8009618:	d86c      	bhi.n	80096f4 <UART_SetConfig+0x454>
 800961a:	a201      	add	r2, pc, #4	@ (adr r2, 8009620 <UART_SetConfig+0x380>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	080096c5 	.word	0x080096c5
 8009624:	080096f5 	.word	0x080096f5
 8009628:	080096f5 	.word	0x080096f5
 800962c:	080096f5 	.word	0x080096f5
 8009630:	080096f5 	.word	0x080096f5
 8009634:	080096f5 	.word	0x080096f5
 8009638:	080096f5 	.word	0x080096f5
 800963c:	080096f5 	.word	0x080096f5
 8009640:	080096cd 	.word	0x080096cd
 8009644:	080096f5 	.word	0x080096f5
 8009648:	080096f5 	.word	0x080096f5
 800964c:	080096f5 	.word	0x080096f5
 8009650:	080096f5 	.word	0x080096f5
 8009654:	080096f5 	.word	0x080096f5
 8009658:	080096f5 	.word	0x080096f5
 800965c:	080096f5 	.word	0x080096f5
 8009660:	080096d5 	.word	0x080096d5
 8009664:	080096f5 	.word	0x080096f5
 8009668:	080096f5 	.word	0x080096f5
 800966c:	080096f5 	.word	0x080096f5
 8009670:	080096f5 	.word	0x080096f5
 8009674:	080096f5 	.word	0x080096f5
 8009678:	080096f5 	.word	0x080096f5
 800967c:	080096f5 	.word	0x080096f5
 8009680:	080096dd 	.word	0x080096dd
 8009684:	080096f5 	.word	0x080096f5
 8009688:	080096f5 	.word	0x080096f5
 800968c:	080096f5 	.word	0x080096f5
 8009690:	080096f5 	.word	0x080096f5
 8009694:	080096f5 	.word	0x080096f5
 8009698:	080096f5 	.word	0x080096f5
 800969c:	080096f5 	.word	0x080096f5
 80096a0:	080096e5 	.word	0x080096e5
 80096a4:	080096f5 	.word	0x080096f5
 80096a8:	080096f5 	.word	0x080096f5
 80096ac:	080096f5 	.word	0x080096f5
 80096b0:	080096f5 	.word	0x080096f5
 80096b4:	080096f5 	.word	0x080096f5
 80096b8:	080096f5 	.word	0x080096f5
 80096bc:	080096f5 	.word	0x080096f5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	2301      	movs	r3, #1
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e1c0      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096cc:	2304      	movs	r3, #4
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e1bc      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096d4:	2308      	movs	r3, #8
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e1b8      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096dc:	2310      	movs	r3, #16
 80096de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096e2:	e1b4      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096e4:	2320      	movs	r3, #32
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ea:	e1b0      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096ec:	2340      	movs	r3, #64	@ 0x40
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096f2:	e1ac      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096f4:	2380      	movs	r3, #128	@ 0x80
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096fa:	e1a8      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a75      	ldr	r2, [pc, #468]	@ (80098d8 <UART_SetConfig+0x638>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d130      	bne.n	8009768 <UART_SetConfig+0x4c8>
 8009706:	4b73      	ldr	r3, [pc, #460]	@ (80098d4 <UART_SetConfig+0x634>)
 8009708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b05      	cmp	r3, #5
 8009710:	d826      	bhi.n	8009760 <UART_SetConfig+0x4c0>
 8009712:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <UART_SetConfig+0x478>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009731 	.word	0x08009731
 800971c:	08009739 	.word	0x08009739
 8009720:	08009741 	.word	0x08009741
 8009724:	08009749 	.word	0x08009749
 8009728:	08009751 	.word	0x08009751
 800972c:	08009759 	.word	0x08009759
 8009730:	2300      	movs	r3, #0
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e18a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009738:	2304      	movs	r3, #4
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e186      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009740:	2308      	movs	r3, #8
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e182      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009748:	2310      	movs	r3, #16
 800974a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800974e:	e17e      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009750:	2320      	movs	r3, #32
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009756:	e17a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009758:	2340      	movs	r3, #64	@ 0x40
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800975e:	e176      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009760:	2380      	movs	r3, #128	@ 0x80
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009766:	e172      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a5b      	ldr	r2, [pc, #364]	@ (80098dc <UART_SetConfig+0x63c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d130      	bne.n	80097d4 <UART_SetConfig+0x534>
 8009772:	4b58      	ldr	r3, [pc, #352]	@ (80098d4 <UART_SetConfig+0x634>)
 8009774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b05      	cmp	r3, #5
 800977c:	d826      	bhi.n	80097cc <UART_SetConfig+0x52c>
 800977e:	a201      	add	r2, pc, #4	@ (adr r2, 8009784 <UART_SetConfig+0x4e4>)
 8009780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009784:	0800979d 	.word	0x0800979d
 8009788:	080097a5 	.word	0x080097a5
 800978c:	080097ad 	.word	0x080097ad
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097bd 	.word	0x080097bd
 8009798:	080097c5 	.word	0x080097c5
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e154      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097a4:	2304      	movs	r3, #4
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e150      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097ac:	2308      	movs	r3, #8
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e14c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097b4:	2310      	movs	r3, #16
 80097b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ba:	e148      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097bc:	2320      	movs	r3, #32
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097c2:	e144      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097c4:	2340      	movs	r3, #64	@ 0x40
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ca:	e140      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097cc:	2380      	movs	r3, #128	@ 0x80
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097d2:	e13c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a41      	ldr	r2, [pc, #260]	@ (80098e0 <UART_SetConfig+0x640>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	f040 8082 	bne.w	80098e4 <UART_SetConfig+0x644>
 80097e0:	4b3c      	ldr	r3, [pc, #240]	@ (80098d4 <UART_SetConfig+0x634>)
 80097e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097e8:	2b28      	cmp	r3, #40	@ 0x28
 80097ea:	d86d      	bhi.n	80098c8 <UART_SetConfig+0x628>
 80097ec:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <UART_SetConfig+0x554>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009899 	.word	0x08009899
 80097f8:	080098c9 	.word	0x080098c9
 80097fc:	080098c9 	.word	0x080098c9
 8009800:	080098c9 	.word	0x080098c9
 8009804:	080098c9 	.word	0x080098c9
 8009808:	080098c9 	.word	0x080098c9
 800980c:	080098c9 	.word	0x080098c9
 8009810:	080098c9 	.word	0x080098c9
 8009814:	080098a1 	.word	0x080098a1
 8009818:	080098c9 	.word	0x080098c9
 800981c:	080098c9 	.word	0x080098c9
 8009820:	080098c9 	.word	0x080098c9
 8009824:	080098c9 	.word	0x080098c9
 8009828:	080098c9 	.word	0x080098c9
 800982c:	080098c9 	.word	0x080098c9
 8009830:	080098c9 	.word	0x080098c9
 8009834:	080098a9 	.word	0x080098a9
 8009838:	080098c9 	.word	0x080098c9
 800983c:	080098c9 	.word	0x080098c9
 8009840:	080098c9 	.word	0x080098c9
 8009844:	080098c9 	.word	0x080098c9
 8009848:	080098c9 	.word	0x080098c9
 800984c:	080098c9 	.word	0x080098c9
 8009850:	080098c9 	.word	0x080098c9
 8009854:	080098b1 	.word	0x080098b1
 8009858:	080098c9 	.word	0x080098c9
 800985c:	080098c9 	.word	0x080098c9
 8009860:	080098c9 	.word	0x080098c9
 8009864:	080098c9 	.word	0x080098c9
 8009868:	080098c9 	.word	0x080098c9
 800986c:	080098c9 	.word	0x080098c9
 8009870:	080098c9 	.word	0x080098c9
 8009874:	080098b9 	.word	0x080098b9
 8009878:	080098c9 	.word	0x080098c9
 800987c:	080098c9 	.word	0x080098c9
 8009880:	080098c9 	.word	0x080098c9
 8009884:	080098c9 	.word	0x080098c9
 8009888:	080098c9 	.word	0x080098c9
 800988c:	080098c9 	.word	0x080098c9
 8009890:	080098c9 	.word	0x080098c9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800989e:	e0d6      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098a0:	2304      	movs	r3, #4
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098a6:	e0d2      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098a8:	2308      	movs	r3, #8
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ae:	e0ce      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098b0:	2310      	movs	r3, #16
 80098b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098b6:	e0ca      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098b8:	2320      	movs	r3, #32
 80098ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098be:	e0c6      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098c0:	2340      	movs	r3, #64	@ 0x40
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098c6:	e0c2      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098c8:	2380      	movs	r3, #128	@ 0x80
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ce:	e0be      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80098d0:	40011400 	.word	0x40011400
 80098d4:	58024400 	.word	0x58024400
 80098d8:	40007800 	.word	0x40007800
 80098dc:	40007c00 	.word	0x40007c00
 80098e0:	40011800 	.word	0x40011800
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4aad      	ldr	r2, [pc, #692]	@ (8009ba0 <UART_SetConfig+0x900>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d176      	bne.n	80099dc <UART_SetConfig+0x73c>
 80098ee:	4bad      	ldr	r3, [pc, #692]	@ (8009ba4 <UART_SetConfig+0x904>)
 80098f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098f6:	2b28      	cmp	r3, #40	@ 0x28
 80098f8:	d86c      	bhi.n	80099d4 <UART_SetConfig+0x734>
 80098fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009900 <UART_SetConfig+0x660>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099d5 	.word	0x080099d5
 8009908:	080099d5 	.word	0x080099d5
 800990c:	080099d5 	.word	0x080099d5
 8009910:	080099d5 	.word	0x080099d5
 8009914:	080099d5 	.word	0x080099d5
 8009918:	080099d5 	.word	0x080099d5
 800991c:	080099d5 	.word	0x080099d5
 8009920:	080099ad 	.word	0x080099ad
 8009924:	080099d5 	.word	0x080099d5
 8009928:	080099d5 	.word	0x080099d5
 800992c:	080099d5 	.word	0x080099d5
 8009930:	080099d5 	.word	0x080099d5
 8009934:	080099d5 	.word	0x080099d5
 8009938:	080099d5 	.word	0x080099d5
 800993c:	080099d5 	.word	0x080099d5
 8009940:	080099b5 	.word	0x080099b5
 8009944:	080099d5 	.word	0x080099d5
 8009948:	080099d5 	.word	0x080099d5
 800994c:	080099d5 	.word	0x080099d5
 8009950:	080099d5 	.word	0x080099d5
 8009954:	080099d5 	.word	0x080099d5
 8009958:	080099d5 	.word	0x080099d5
 800995c:	080099d5 	.word	0x080099d5
 8009960:	080099bd 	.word	0x080099bd
 8009964:	080099d5 	.word	0x080099d5
 8009968:	080099d5 	.word	0x080099d5
 800996c:	080099d5 	.word	0x080099d5
 8009970:	080099d5 	.word	0x080099d5
 8009974:	080099d5 	.word	0x080099d5
 8009978:	080099d5 	.word	0x080099d5
 800997c:	080099d5 	.word	0x080099d5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099d5 	.word	0x080099d5
 8009988:	080099d5 	.word	0x080099d5
 800998c:	080099d5 	.word	0x080099d5
 8009990:	080099d5 	.word	0x080099d5
 8009994:	080099d5 	.word	0x080099d5
 8009998:	080099d5 	.word	0x080099d5
 800999c:	080099d5 	.word	0x080099d5
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099aa:	e050      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099ac:	2304      	movs	r3, #4
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099b2:	e04c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099b4:	2308      	movs	r3, #8
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ba:	e048      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099bc:	2310      	movs	r3, #16
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099c2:	e044      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099c4:	2320      	movs	r3, #32
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099ca:	e040      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099cc:	2340      	movs	r3, #64	@ 0x40
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099d2:	e03c      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099d4:	2380      	movs	r3, #128	@ 0x80
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80099da:	e038      	b.n	8009a4e <UART_SetConfig+0x7ae>
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a71      	ldr	r2, [pc, #452]	@ (8009ba8 <UART_SetConfig+0x908>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d130      	bne.n	8009a48 <UART_SetConfig+0x7a8>
 80099e6:	4b6f      	ldr	r3, [pc, #444]	@ (8009ba4 <UART_SetConfig+0x904>)
 80099e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d826      	bhi.n	8009a40 <UART_SetConfig+0x7a0>
 80099f2:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <UART_SetConfig+0x758>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a11 	.word	0x08009a11
 80099fc:	08009a19 	.word	0x08009a19
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	2302      	movs	r3, #2
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a16:	e01a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a18:	2304      	movs	r3, #4
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a1e:	e016      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a20:	2308      	movs	r3, #8
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a26:	e012      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a2e:	e00e      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a30:	2320      	movs	r3, #32
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a36:	e00a      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a38:	2340      	movs	r3, #64	@ 0x40
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a3e:	e006      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a40:	2380      	movs	r3, #128	@ 0x80
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009a46:	e002      	b.n	8009a4e <UART_SetConfig+0x7ae>
 8009a48:	2380      	movs	r3, #128	@ 0x80
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a55      	ldr	r2, [pc, #340]	@ (8009ba8 <UART_SetConfig+0x908>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f040 80f8 	bne.w	8009c4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a5e:	2b20      	cmp	r3, #32
 8009a60:	dc46      	bgt.n	8009af0 <UART_SetConfig+0x850>
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	db75      	blt.n	8009b52 <UART_SetConfig+0x8b2>
 8009a66:	3b02      	subs	r3, #2
 8009a68:	2b1e      	cmp	r3, #30
 8009a6a:	d872      	bhi.n	8009b52 <UART_SetConfig+0x8b2>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0x7d4>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009af7 	.word	0x08009af7
 8009a78:	08009b53 	.word	0x08009b53
 8009a7c:	08009aff 	.word	0x08009aff
 8009a80:	08009b53 	.word	0x08009b53
 8009a84:	08009b53 	.word	0x08009b53
 8009a88:	08009b53 	.word	0x08009b53
 8009a8c:	08009b0f 	.word	0x08009b0f
 8009a90:	08009b53 	.word	0x08009b53
 8009a94:	08009b53 	.word	0x08009b53
 8009a98:	08009b53 	.word	0x08009b53
 8009a9c:	08009b53 	.word	0x08009b53
 8009aa0:	08009b53 	.word	0x08009b53
 8009aa4:	08009b53 	.word	0x08009b53
 8009aa8:	08009b53 	.word	0x08009b53
 8009aac:	08009b1f 	.word	0x08009b1f
 8009ab0:	08009b53 	.word	0x08009b53
 8009ab4:	08009b53 	.word	0x08009b53
 8009ab8:	08009b53 	.word	0x08009b53
 8009abc:	08009b53 	.word	0x08009b53
 8009ac0:	08009b53 	.word	0x08009b53
 8009ac4:	08009b53 	.word	0x08009b53
 8009ac8:	08009b53 	.word	0x08009b53
 8009acc:	08009b53 	.word	0x08009b53
 8009ad0:	08009b53 	.word	0x08009b53
 8009ad4:	08009b53 	.word	0x08009b53
 8009ad8:	08009b53 	.word	0x08009b53
 8009adc:	08009b53 	.word	0x08009b53
 8009ae0:	08009b53 	.word	0x08009b53
 8009ae4:	08009b53 	.word	0x08009b53
 8009ae8:	08009b53 	.word	0x08009b53
 8009aec:	08009b45 	.word	0x08009b45
 8009af0:	2b40      	cmp	r3, #64	@ 0x40
 8009af2:	d02a      	beq.n	8009b4a <UART_SetConfig+0x8aa>
 8009af4:	e02d      	b.n	8009b52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009af6:	f7fd f9d3 	bl	8006ea0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009afa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009afc:	e02f      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fd f9e2 	bl	8006ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b0c:	e027      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b0e:	f107 0318 	add.w	r3, r7, #24
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fd fb2e 	bl	8007174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1c:	e01f      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b1e:	4b21      	ldr	r3, [pc, #132]	@ (8009ba4 <UART_SetConfig+0x904>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba4 <UART_SetConfig+0x904>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	4a1d      	ldr	r2, [pc, #116]	@ (8009bac <UART_SetConfig+0x90c>)
 8009b36:	fa22 f303 	lsr.w	r3, r2, r3
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b3c:	e00f      	b.n	8009b5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bac <UART_SetConfig+0x90c>)
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b42:	e00c      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b44:	4b1a      	ldr	r3, [pc, #104]	@ (8009bb0 <UART_SetConfig+0x910>)
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b48:	e009      	b.n	8009b5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b50:	e005      	b.n	8009b5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 81ee 	beq.w	8009f42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6a:	4a12      	ldr	r2, [pc, #72]	@ (8009bb4 <UART_SetConfig+0x914>)
 8009b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4413      	add	r3, r2
 8009b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d305      	bcc.n	8009b96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d910      	bls.n	8009bb8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b9c:	e1d1      	b.n	8009f42 <UART_SetConfig+0xca2>
 8009b9e:	bf00      	nop
 8009ba0:	40011c00 	.word	0x40011c00
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	58000c00 	.word	0x58000c00
 8009bac:	03d09000 	.word	0x03d09000
 8009bb0:	003d0900 	.word	0x003d0900
 8009bb4:	0800ab80 	.word	0x0800ab80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bba:	2200      	movs	r2, #0
 8009bbc:	60bb      	str	r3, [r7, #8]
 8009bbe:	60fa      	str	r2, [r7, #12]
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	4ac0      	ldr	r2, [pc, #768]	@ (8009ec8 <UART_SetConfig+0xc28>)
 8009bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	2200      	movs	r2, #0
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bda:	f7f6 fb97 	bl	800030c <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	020b      	lsls	r3, r1, #8
 8009bf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bf4:	0202      	lsls	r2, r0, #8
 8009bf6:	6979      	ldr	r1, [r7, #20]
 8009bf8:	6849      	ldr	r1, [r1, #4]
 8009bfa:	0849      	lsrs	r1, r1, #1
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	4605      	mov	r5, r0
 8009c02:	eb12 0804 	adds.w	r8, r2, r4
 8009c06:	eb43 0905 	adc.w	r9, r3, r5
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	469a      	mov	sl, r3
 8009c12:	4693      	mov	fp, r2
 8009c14:	4652      	mov	r2, sl
 8009c16:	465b      	mov	r3, fp
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fb76 	bl	800030c <__aeabi_uldivmod>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4613      	mov	r3, r2
 8009c26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c2e:	d308      	bcc.n	8009c42 <UART_SetConfig+0x9a2>
 8009c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c36:	d204      	bcs.n	8009c42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c3e:	60da      	str	r2, [r3, #12]
 8009c40:	e17f      	b.n	8009f42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c48:	e17b      	b.n	8009f42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c52:	f040 80bd 	bne.w	8009dd0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009c56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	dc48      	bgt.n	8009cf0 <UART_SetConfig+0xa50>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	db7b      	blt.n	8009d5a <UART_SetConfig+0xaba>
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d879      	bhi.n	8009d5a <UART_SetConfig+0xaba>
 8009c66:	a201      	add	r2, pc, #4	@ (adr r2, 8009c6c <UART_SetConfig+0x9cc>)
 8009c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6c:	08009cf7 	.word	0x08009cf7
 8009c70:	08009cff 	.word	0x08009cff
 8009c74:	08009d5b 	.word	0x08009d5b
 8009c78:	08009d5b 	.word	0x08009d5b
 8009c7c:	08009d07 	.word	0x08009d07
 8009c80:	08009d5b 	.word	0x08009d5b
 8009c84:	08009d5b 	.word	0x08009d5b
 8009c88:	08009d5b 	.word	0x08009d5b
 8009c8c:	08009d17 	.word	0x08009d17
 8009c90:	08009d5b 	.word	0x08009d5b
 8009c94:	08009d5b 	.word	0x08009d5b
 8009c98:	08009d5b 	.word	0x08009d5b
 8009c9c:	08009d5b 	.word	0x08009d5b
 8009ca0:	08009d5b 	.word	0x08009d5b
 8009ca4:	08009d5b 	.word	0x08009d5b
 8009ca8:	08009d5b 	.word	0x08009d5b
 8009cac:	08009d27 	.word	0x08009d27
 8009cb0:	08009d5b 	.word	0x08009d5b
 8009cb4:	08009d5b 	.word	0x08009d5b
 8009cb8:	08009d5b 	.word	0x08009d5b
 8009cbc:	08009d5b 	.word	0x08009d5b
 8009cc0:	08009d5b 	.word	0x08009d5b
 8009cc4:	08009d5b 	.word	0x08009d5b
 8009cc8:	08009d5b 	.word	0x08009d5b
 8009ccc:	08009d5b 	.word	0x08009d5b
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d5b 	.word	0x08009d5b
 8009cd8:	08009d5b 	.word	0x08009d5b
 8009cdc:	08009d5b 	.word	0x08009d5b
 8009ce0:	08009d5b 	.word	0x08009d5b
 8009ce4:	08009d5b 	.word	0x08009d5b
 8009ce8:	08009d5b 	.word	0x08009d5b
 8009cec:	08009d4d 	.word	0x08009d4d
 8009cf0:	2b40      	cmp	r3, #64	@ 0x40
 8009cf2:	d02e      	beq.n	8009d52 <UART_SetConfig+0xab2>
 8009cf4:	e031      	b.n	8009d5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf6:	f7fb ff07 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
 8009cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009cfc:	e033      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cfe:	f7fb ff19 	bl	8005b34 <HAL_RCC_GetPCLK2Freq>
 8009d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d04:	e02f      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd f8de 	bl	8006ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e027      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d16:	f107 0318 	add.w	r3, r7, #24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd fa2a 	bl	8007174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d24:	e01f      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d26:	4b69      	ldr	r3, [pc, #420]	@ (8009ecc <UART_SetConfig+0xc2c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d32:	4b66      	ldr	r3, [pc, #408]	@ (8009ecc <UART_SetConfig+0xc2c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a64      	ldr	r2, [pc, #400]	@ (8009ed0 <UART_SetConfig+0xc30>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d44:	e00f      	b.n	8009d66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009d46:	4b62      	ldr	r3, [pc, #392]	@ (8009ed0 <UART_SetConfig+0xc30>)
 8009d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d4a:	e00c      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d4c:	4b61      	ldr	r3, [pc, #388]	@ (8009ed4 <UART_SetConfig+0xc34>)
 8009d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d50:	e009      	b.n	8009d66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	e005      	b.n	8009d66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80ea 	beq.w	8009f42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d72:	4a55      	ldr	r2, [pc, #340]	@ (8009ec8 <UART_SetConfig+0xc28>)
 8009d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d80:	005a      	lsls	r2, r3, #1
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	441a      	add	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d916      	bls.n	8009dc8 <UART_SetConfig+0xb28>
 8009d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009da0:	d212      	bcs.n	8009dc8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f023 030f 	bic.w	r3, r3, #15
 8009daa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	e0bc      	b.n	8009f42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009dce:	e0b8      	b.n	8009f42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	dc4b      	bgt.n	8009e70 <UART_SetConfig+0xbd0>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f2c0 8087 	blt.w	8009eec <UART_SetConfig+0xc4c>
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	f200 8084 	bhi.w	8009eec <UART_SetConfig+0xc4c>
 8009de4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dec <UART_SetConfig+0xb4c>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e77 	.word	0x08009e77
 8009df0:	08009e7f 	.word	0x08009e7f
 8009df4:	08009eed 	.word	0x08009eed
 8009df8:	08009eed 	.word	0x08009eed
 8009dfc:	08009e87 	.word	0x08009e87
 8009e00:	08009eed 	.word	0x08009eed
 8009e04:	08009eed 	.word	0x08009eed
 8009e08:	08009eed 	.word	0x08009eed
 8009e0c:	08009e97 	.word	0x08009e97
 8009e10:	08009eed 	.word	0x08009eed
 8009e14:	08009eed 	.word	0x08009eed
 8009e18:	08009eed 	.word	0x08009eed
 8009e1c:	08009eed 	.word	0x08009eed
 8009e20:	08009eed 	.word	0x08009eed
 8009e24:	08009eed 	.word	0x08009eed
 8009e28:	08009eed 	.word	0x08009eed
 8009e2c:	08009ea7 	.word	0x08009ea7
 8009e30:	08009eed 	.word	0x08009eed
 8009e34:	08009eed 	.word	0x08009eed
 8009e38:	08009eed 	.word	0x08009eed
 8009e3c:	08009eed 	.word	0x08009eed
 8009e40:	08009eed 	.word	0x08009eed
 8009e44:	08009eed 	.word	0x08009eed
 8009e48:	08009eed 	.word	0x08009eed
 8009e4c:	08009eed 	.word	0x08009eed
 8009e50:	08009eed 	.word	0x08009eed
 8009e54:	08009eed 	.word	0x08009eed
 8009e58:	08009eed 	.word	0x08009eed
 8009e5c:	08009eed 	.word	0x08009eed
 8009e60:	08009eed 	.word	0x08009eed
 8009e64:	08009eed 	.word	0x08009eed
 8009e68:	08009eed 	.word	0x08009eed
 8009e6c:	08009edf 	.word	0x08009edf
 8009e70:	2b40      	cmp	r3, #64	@ 0x40
 8009e72:	d037      	beq.n	8009ee4 <UART_SetConfig+0xc44>
 8009e74:	e03a      	b.n	8009eec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e76:	f7fb fe47 	bl	8005b08 <HAL_RCC_GetPCLK1Freq>
 8009e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e7c:	e03c      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e7e:	f7fb fe59 	bl	8005b34 <HAL_RCC_GetPCLK2Freq>
 8009e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e84:	e038      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fd f81e 	bl	8006ecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e94:	e030      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e96:	f107 0318 	add.w	r3, r7, #24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fd f96a 	bl	8007174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea4:	e028      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <UART_SetConfig+0xc2c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 0320 	and.w	r3, r3, #32
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d012      	beq.n	8009ed8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009eb2:	4b06      	ldr	r3, [pc, #24]	@ (8009ecc <UART_SetConfig+0xc2c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	08db      	lsrs	r3, r3, #3
 8009eb8:	f003 0303 	and.w	r3, r3, #3
 8009ebc:	4a04      	ldr	r2, [pc, #16]	@ (8009ed0 <UART_SetConfig+0xc30>)
 8009ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ec4:	e018      	b.n	8009ef8 <UART_SetConfig+0xc58>
 8009ec6:	bf00      	nop
 8009ec8:	0800ab80 	.word	0x0800ab80
 8009ecc:	58024400 	.word	0x58024400
 8009ed0:	03d09000 	.word	0x03d09000
 8009ed4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009ed8:	4b24      	ldr	r3, [pc, #144]	@ (8009f6c <UART_SetConfig+0xccc>)
 8009eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009edc:	e00c      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ede:	4b24      	ldr	r3, [pc, #144]	@ (8009f70 <UART_SetConfig+0xcd0>)
 8009ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ee2:	e009      	b.n	8009ef8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ee4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eea:	e005      	b.n	8009ef8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8009ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d021      	beq.n	8009f42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f02:	4a1c      	ldr	r2, [pc, #112]	@ (8009f74 <UART_SetConfig+0xcd4>)
 8009f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	085b      	lsrs	r3, r3, #1
 8009f16:	441a      	add	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f20:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	2b0f      	cmp	r3, #15
 8009f26:	d909      	bls.n	8009f3c <UART_SetConfig+0xc9c>
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f2e:	d205      	bcs.n	8009f3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60da      	str	r2, [r3, #12]
 8009f3a:	e002      	b.n	8009f42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2200      	movs	r2, #0
 8009f56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009f5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3748      	adds	r7, #72	@ 0x48
 8009f66:	46bd      	mov	sp, r7
 8009f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f6c:	03d09000 	.word	0x03d09000
 8009f70:	003d0900 	.word	0x003d0900
 8009f74:	0800ab80 	.word	0x0800ab80

08009f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f84:	f003 0308 	and.w	r3, r3, #8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00a      	beq.n	8009fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00a      	beq.n	8009fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00a      	beq.n	800a02a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	f003 0320 	and.w	r3, r3, #32
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01a      	beq.n	800a08e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a076:	d10a      	bne.n	800a08e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	430a      	orrs	r2, r1
 800a0ae:	605a      	str	r2, [r3, #4]
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b098      	sub	sp, #96	@ 0x60
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0cc:	f7f7 fad0 	bl	8001670 <HAL_GetTick>
 800a0d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0308 	and.w	r3, r3, #8
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d12f      	bne.n	800a140 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f88e 	bl	800a210 <UART_WaitOnFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d022      	beq.n	800a140 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	e853 3f00 	ldrex	r3, [r3]
 800a106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a10e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	461a      	mov	r2, r3
 800a116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a118:	647b      	str	r3, [r7, #68]	@ 0x44
 800a11a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a11e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a120:	e841 2300 	strex	r3, r2, [r1]
 800a124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e6      	bne.n	800a0fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e063      	b.n	800a208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 0304 	and.w	r3, r3, #4
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d149      	bne.n	800a1e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a14e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a156:	2200      	movs	r2, #0
 800a158:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f857 	bl	800a210 <UART_WaitOnFlagUntilTimeout>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d03c      	beq.n	800a1e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	623b      	str	r3, [r7, #32]
   return(result);
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a17c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a186:	633b      	str	r3, [r7, #48]	@ 0x30
 800a188:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a18c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e6      	bne.n	800a168 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1ba:	61fa      	str	r2, [r7, #28]
 800a1bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	69b9      	ldr	r1, [r7, #24]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e5      	bne.n	800a19a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e012      	b.n	800a208 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3758      	adds	r7, #88	@ 0x58
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	4613      	mov	r3, r2
 800a21e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a220:	e04f      	b.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a228:	d04b      	beq.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22a:	f7f7 fa21 	bl	8001670 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <UART_WaitOnFlagUntilTimeout+0x30>
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e04e      	b.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0304 	and.w	r3, r3, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d037      	beq.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	2b80      	cmp	r3, #128	@ 0x80
 800a256:	d034      	beq.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b40      	cmp	r3, #64	@ 0x40
 800a25c:	d031      	beq.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d110      	bne.n	800a28e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2208      	movs	r2, #8
 800a272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f921 	bl	800a4bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2208      	movs	r2, #8
 800a27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e029      	b.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a29c:	d111      	bne.n	800a2c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f000 f907 	bl	800a4bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2220      	movs	r2, #32
 800a2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e00f      	b.n	800a2e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69da      	ldr	r2, [r3, #28]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	bf0c      	ite	eq
 800a2d2:	2301      	moveq	r3, #1
 800a2d4:	2300      	movne	r3, #0
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	461a      	mov	r2, r3
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d0a0      	beq.n	800a222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b096      	sub	sp, #88	@ 0x58
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	4613      	mov	r3, r2
 800a2f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	88fa      	ldrh	r2, [r7, #6]
 800a304:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2222      	movs	r2, #34	@ 0x22
 800a314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d02d      	beq.n	800a37e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a328:	4a40      	ldr	r2, [pc, #256]	@ (800a42c <UART_Start_Receive_DMA+0x140>)
 800a32a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a332:	4a3f      	ldr	r2, [pc, #252]	@ (800a430 <UART_Start_Receive_DMA+0x144>)
 800a334:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a33c:	4a3d      	ldr	r2, [pc, #244]	@ (800a434 <UART_Start_Receive_DMA+0x148>)
 800a33e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a346:	2200      	movs	r2, #0
 800a348:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3324      	adds	r3, #36	@ 0x24
 800a356:	4619      	mov	r1, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35c:	461a      	mov	r2, r3
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	f7f7 ff88 	bl	8002274 <HAL_DMA_Start_IT>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2210      	movs	r2, #16
 800a36e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e051      	b.n	800a422 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d018      	beq.n	800a3b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a38e:	e853 3f00 	ldrex	r3, [r3]
 800a392:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a39a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a3aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ac:	e841 2300 	strex	r3, r2, [r1]
 800a3b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a3b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1e6      	bne.n	800a386 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3308      	adds	r3, #8
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	e853 3f00 	ldrex	r3, [r3]
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a3da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3e0:	e841 2300 	strex	r3, r2, [r1]
 800a3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e5      	bne.n	800a3b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	e853 3f00 	ldrex	r3, [r3]
 800a3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3308      	adds	r3, #8
 800a40a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a40c:	623a      	str	r2, [r7, #32]
 800a40e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a410:	69f9      	ldr	r1, [r7, #28]
 800a412:	6a3a      	ldr	r2, [r7, #32]
 800a414:	e841 2300 	strex	r3, r2, [r1]
 800a418:	61bb      	str	r3, [r7, #24]
   return(result);
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e5      	bne.n	800a3ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3758      	adds	r7, #88	@ 0x58
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	0800a589 	.word	0x0800a589
 800a430:	0800a6b1 	.word	0x0800a6b1
 800a434:	0800a6ef 	.word	0x0800a6ef

0800a438 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b08f      	sub	sp, #60	@ 0x3c
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a460:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e6      	bne.n	800a440 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3308      	adds	r3, #8
 800a478:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	60bb      	str	r3, [r7, #8]
   return(result);
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a488:	633b      	str	r3, [r7, #48]	@ 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3308      	adds	r3, #8
 800a490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a492:	61ba      	str	r2, [r7, #24]
 800a494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6979      	ldr	r1, [r7, #20]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e5      	bne.n	800a472 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a4ae:	bf00      	nop
 800a4b0:	373c      	adds	r7, #60	@ 0x3c
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
	...

0800a4bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b095      	sub	sp, #84	@ 0x54
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a4e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e6      	bne.n	800a4c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	e853 3f00 	ldrex	r3, [r3]
 800a504:	61fb      	str	r3, [r7, #28]
   return(result);
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	4b1e      	ldr	r3, [pc, #120]	@ (800a584 <UART_EndRxTransfer+0xc8>)
 800a50a:	4013      	ands	r3, r2
 800a50c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	3308      	adds	r3, #8
 800a514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a51c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a51e:	e841 2300 	strex	r3, r2, [r1]
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1e5      	bne.n	800a4f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d118      	bne.n	800a564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f023 0310 	bic.w	r3, r3, #16
 800a546:	647b      	str	r3, [r7, #68]	@ 0x44
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	613b      	str	r3, [r7, #16]
   return(result);
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2220      	movs	r2, #32
 800a568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a578:	bf00      	nop
 800a57a:	3754      	adds	r7, #84	@ 0x54
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	effffffe 	.word	0xeffffffe

0800a588 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b09c      	sub	sp, #112	@ 0x70
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a594:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a59e:	d071      	beq.n	800a684 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a5be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a5c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a5c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a5cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a5d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e6      	bne.n	800a5a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3308      	adds	r3, #8
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ec:	f023 0301 	bic.w	r3, r3, #1
 800a5f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a5f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a5fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e5      	bne.n	800a5da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3308      	adds	r3, #8
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	623b      	str	r3, [r7, #32]
   return(result);
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a624:	663b      	str	r3, [r7, #96]	@ 0x60
 800a626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3308      	adds	r3, #8
 800a62c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a62e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e5      	bne.n	800a60e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a644:	2220      	movs	r2, #32
 800a646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d118      	bne.n	800a684 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f023 0310 	bic.w	r3, r3, #16
 800a666:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a670:	61fb      	str	r3, [r7, #28]
 800a672:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69b9      	ldr	r1, [r7, #24]
 800a676:	69fa      	ldr	r2, [r7, #28]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	617b      	str	r3, [r7, #20]
   return(result);
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e6      	bne.n	800a652 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a686:	2200      	movs	r2, #0
 800a688:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a68c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d107      	bne.n	800a6a2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a698:	4619      	mov	r1, r3
 800a69a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a69c:	f7f6 fbbe 	bl	8000e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6a0:	e002      	b.n	800a6a8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a6a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6a4:	f7fe fd8a 	bl	80091bc <HAL_UART_RxCpltCallback>
}
 800a6a8:	bf00      	nop
 800a6aa:	3770      	adds	r7, #112	@ 0x70
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d109      	bne.n	800a6e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f7f6 fb9f 	bl	8000e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6de:	e002      	b.n	800a6e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7fe fd75 	bl	80091d0 <HAL_UART_RxHalfCpltCallback>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a702:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a70a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a716:	2b80      	cmp	r3, #128	@ 0x80
 800a718:	d109      	bne.n	800a72e <UART_DMAError+0x40>
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b21      	cmp	r3, #33	@ 0x21
 800a71e:	d106      	bne.n	800a72e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2200      	movs	r2, #0
 800a724:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a728:	6978      	ldr	r0, [r7, #20]
 800a72a:	f7ff fe85 	bl	800a438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a738:	2b40      	cmp	r3, #64	@ 0x40
 800a73a:	d109      	bne.n	800a750 <UART_DMAError+0x62>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b22      	cmp	r3, #34	@ 0x22
 800a740:	d106      	bne.n	800a750 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2200      	movs	r2, #0
 800a746:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f7ff feb6 	bl	800a4bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a756:	f043 0210 	orr.w	r2, r3, #16
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7fe fd3f 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a766:	bf00      	nop
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a77a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7fe fd29 	bl	80091e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a792:	bf00      	nop
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}

0800a79a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b088      	sub	sp, #32
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	e853 3f00 	ldrex	r3, [r3]
 800a7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	e841 2300 	strex	r3, r2, [r1]
 800a7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1e6      	bne.n	800a7a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7f6 fafa 	bl	8000ddc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7e8:	bf00      	nop
 800a7ea:	3720      	adds	r7, #32
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <HAL_UARTEx_DisableFifoMode+0x16>
 800a83e:	2302      	movs	r3, #2
 800a840:	e027      	b.n	800a892 <HAL_UARTEx_DisableFifoMode+0x66>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2224      	movs	r2, #36	@ 0x24
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 0201 	bic.w	r2, r2, #1
 800a868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2220      	movs	r2, #32
 800a884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3714      	adds	r7, #20
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d101      	bne.n	800a8b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a8b2:	2302      	movs	r3, #2
 800a8b4:	e02d      	b.n	800a912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2224      	movs	r2, #36	@ 0x24
 800a8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 0201 	bic.w	r2, r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 f8a4 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2220      	movs	r2, #32
 800a904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d101      	bne.n	800a932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a92e:	2302      	movs	r3, #2
 800a930:	e02d      	b.n	800a98e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2224      	movs	r2, #36	@ 0x24
 800a93e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f022 0201 	bic.w	r2, r2, #1
 800a958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f866 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2220      	movs	r2, #32
 800a980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b08c      	sub	sp, #48	@ 0x30
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	d142      	bne.n	800aa34 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e03b      	b.n	800aa36 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f7ff fc8b 	bl	800a2ec <UART_Start_Receive_DMA>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a9dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d124      	bne.n	800aa2e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d11d      	bne.n	800aa28 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2210      	movs	r2, #16
 800a9f2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	617b      	str	r3, [r7, #20]
   return(result);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f043 0310 	orr.w	r3, r3, #16
 800aa08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa14:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa16:	6a39      	ldr	r1, [r7, #32]
 800aa18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa1a:	e841 2300 	strex	r3, r2, [r1]
 800aa1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1e6      	bne.n	800a9f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800aa26:	e002      	b.n	800aa2e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800aa2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa32:	e000      	b.n	800aa36 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aa34:	2302      	movs	r3, #2
  }
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3730      	adds	r7, #48	@ 0x30
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa60:	e031      	b.n	800aac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa62:	2310      	movs	r3, #16
 800aa64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa66:	2310      	movs	r3, #16
 800aa68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	0e5b      	lsrs	r3, r3, #25
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	0f5b      	lsrs	r3, r3, #29
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	7b3a      	ldrb	r2, [r7, #12]
 800aa8e:	4911      	ldr	r1, [pc, #68]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aa90:	5c8a      	ldrb	r2, [r1, r2]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa96:	7b3a      	ldrb	r2, [r7, #12]
 800aa98:	490f      	ldr	r1, [pc, #60]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aa9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	4909      	ldr	r1, [pc, #36]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aaae:	5c8a      	ldrb	r2, [r1, r2]
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aab4:	7b7a      	ldrb	r2, [r7, #13]
 800aab6:	4908      	ldr	r1, [pc, #32]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaba:	fb93 f3f2 	sdiv	r3, r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	0800ab98 	.word	0x0800ab98
 800aad8:	0800aba0 	.word	0x0800aba0

0800aadc <memset>:
 800aadc:	4402      	add	r2, r0
 800aade:	4603      	mov	r3, r0
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d100      	bne.n	800aae6 <memset+0xa>
 800aae4:	4770      	bx	lr
 800aae6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaea:	e7f9      	b.n	800aae0 <memset+0x4>

0800aaec <__libc_init_array>:
 800aaec:	b570      	push	{r4, r5, r6, lr}
 800aaee:	4d0d      	ldr	r5, [pc, #52]	@ (800ab24 <__libc_init_array+0x38>)
 800aaf0:	4c0d      	ldr	r4, [pc, #52]	@ (800ab28 <__libc_init_array+0x3c>)
 800aaf2:	1b64      	subs	r4, r4, r5
 800aaf4:	10a4      	asrs	r4, r4, #2
 800aaf6:	2600      	movs	r6, #0
 800aaf8:	42a6      	cmp	r6, r4
 800aafa:	d109      	bne.n	800ab10 <__libc_init_array+0x24>
 800aafc:	4d0b      	ldr	r5, [pc, #44]	@ (800ab2c <__libc_init_array+0x40>)
 800aafe:	4c0c      	ldr	r4, [pc, #48]	@ (800ab30 <__libc_init_array+0x44>)
 800ab00:	f000 f826 	bl	800ab50 <_init>
 800ab04:	1b64      	subs	r4, r4, r5
 800ab06:	10a4      	asrs	r4, r4, #2
 800ab08:	2600      	movs	r6, #0
 800ab0a:	42a6      	cmp	r6, r4
 800ab0c:	d105      	bne.n	800ab1a <__libc_init_array+0x2e>
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab14:	4798      	blx	r3
 800ab16:	3601      	adds	r6, #1
 800ab18:	e7ee      	b.n	800aaf8 <__libc_init_array+0xc>
 800ab1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1e:	4798      	blx	r3
 800ab20:	3601      	adds	r6, #1
 800ab22:	e7f2      	b.n	800ab0a <__libc_init_array+0x1e>
 800ab24:	0800abb0 	.word	0x0800abb0
 800ab28:	0800abb0 	.word	0x0800abb0
 800ab2c:	0800abb0 	.word	0x0800abb0
 800ab30:	0800abb8 	.word	0x0800abb8

0800ab34 <memcpy>:
 800ab34:	440a      	add	r2, r1
 800ab36:	4291      	cmp	r1, r2
 800ab38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab3c:	d100      	bne.n	800ab40 <memcpy+0xc>
 800ab3e:	4770      	bx	lr
 800ab40:	b510      	push	{r4, lr}
 800ab42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab4a:	4291      	cmp	r1, r2
 800ab4c:	d1f9      	bne.n	800ab42 <memcpy+0xe>
 800ab4e:	bd10      	pop	{r4, pc}

0800ab50 <_init>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	bf00      	nop
 800ab54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab56:	bc08      	pop	{r3}
 800ab58:	469e      	mov	lr, r3
 800ab5a:	4770      	bx	lr

0800ab5c <_fini>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	bf00      	nop
 800ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab62:	bc08      	pop	{r3}
 800ab64:	469e      	mov	lr, r3
 800ab66:	4770      	bx	lr
