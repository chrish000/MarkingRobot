
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800251c  0800251c  0000351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002520  08002520  00003520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002524  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  24000010  08002534  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400007c  08002534  0000407c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000be3e  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001862  00000000  00000000  0000fe7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bc0  00000000  00000000  000116e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000910  00000000  00000000  000122a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031367  00000000  00000000  00012bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ddb8  00000000  00000000  00043f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00142f62  00000000  00000000  00051ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00194c31  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003138  00000000  00000000  00194c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005e  00000000  00000000  00197dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080024f4 	.word	0x080024f4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080024f4 	.word	0x080024f4

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int i,j;
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000312:	f000 f93b 	bl	800058c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fa79 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f821 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8e3 	bl	80004e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000322:	f000 f88d 	bl	8000440 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000326:	2102      	movs	r1, #2
 8000328:	480b      	ldr	r0, [pc, #44]	@ (8000358 <main+0x4c>)
 800032a:	f000 fe05 	bl	8000f38 <HAL_GPIO_ReadPin>
 800032e:	4603      	mov	r3, r0
 8000330:	607b      	str	r3, [r7, #4]
	  if(i){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d007      	beq.n	8000348 <main+0x3c>
		  j=1;
 8000338:	2301      	movs	r3, #1
 800033a:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2120      	movs	r1, #32
 8000340:	4806      	ldr	r0, [pc, #24]	@ (800035c <main+0x50>)
 8000342:	f000 fe11 	bl	8000f68 <HAL_GPIO_WritePin>
 8000346:	e7ee      	b.n	8000326 <main+0x1a>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2120      	movs	r1, #32
 800034c:	4803      	ldr	r0, [pc, #12]	@ (800035c <main+0x50>)
 800034e:	f000 fe0b 	bl	8000f68 <HAL_GPIO_WritePin>
		  j=0;
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
	  i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000356:	e7e6      	b.n	8000326 <main+0x1a>
 8000358:	58020800 	.word	0x58020800
 800035c:	58021000 	.word	0x58021000

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b09c      	sub	sp, #112	@ 0x70
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800036a:	224c      	movs	r2, #76	@ 0x4c
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f002 f894 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2220      	movs	r2, #32
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 f88e 	bl	800249c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000380:	2002      	movs	r0, #2
 8000382:	f000 fe0b 	bl	8000f9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	4b2c      	ldr	r3, [pc, #176]	@ (800043c <SystemClock_Config+0xdc>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a2b      	ldr	r2, [pc, #172]	@ (800043c <SystemClock_Config+0xdc>)
 8000390:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b29      	ldr	r3, [pc, #164]	@ (800043c <SystemClock_Config+0xdc>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003a2:	bf00      	nop
 80003a4:	4b25      	ldr	r3, [pc, #148]	@ (800043c <SystemClock_Config+0xdc>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003b0:	d1f8      	bne.n	80003a4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b2:	2302      	movs	r3, #2
 80003b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003ba:	2340      	movs	r3, #64	@ 0x40
 80003bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c2:	2300      	movs	r3, #0
 80003c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80003c6:	2304      	movs	r3, #4
 80003c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80003ca:	2322      	movs	r3, #34	@ 0x22
 80003cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003da:	230c      	movs	r3, #12
 80003dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003de:	2300      	movs	r3, #0
 80003e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80003e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80003e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fe0f 	bl	8001010 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003f8:	f000 f8f4 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	233f      	movs	r3, #63	@ 0x3f
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2303      	movs	r3, #3
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000408:	2308      	movs	r3, #8
 800040a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800040c:	2340      	movs	r3, #64	@ 0x40
 800040e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000410:	2340      	movs	r3, #64	@ 0x40
 8000412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000418:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800041a:	2340      	movs	r3, #64	@ 0x40
 800041c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2103      	movs	r1, #3
 8000422:	4618      	mov	r0, r3
 8000424:	f001 f9ce 	bl	80017c4 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800042e:	f000 f8d9 	bl	80005e4 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3770      	adds	r7, #112	@ 0x70
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	58024800 	.word	0x58024800

08000440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800045e:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_TIM1_Init+0xa4>)
 8000462:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000464:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 8000472:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000476:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000478:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 8000480:	2200      	movs	r2, #0
 8000482:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 8000486:	2200      	movs	r2, #0
 8000488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800048a:	4815      	ldr	r0, [pc, #84]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 800048c:	f001 fcca 	bl	8001e24 <HAL_TIM_Base_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000496:	f000 f8a5 	bl	80005e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800049e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480e      	ldr	r0, [pc, #56]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 80004a8:	f001 fd14 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80004b2:	f000 f897 	bl	80005e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	4806      	ldr	r0, [pc, #24]	@ (80004e0 <MX_TIM1_Init+0xa0>)
 80004c8:	f001 ff4c 	bl	8002364 <HAL_TIMEx_MasterConfigSynchronization>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004d2:	f000 f887 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	3720      	adds	r7, #32
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	2400002c 	.word	0x2400002c
 80004e4:	40010000 	.word	0x40010000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 030c 	add.w	r3, r7, #12
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <MX_GPIO_Init+0x98>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000504:	4a1e      	ldr	r2, [pc, #120]	@ (8000580 <MX_GPIO_Init+0x98>)
 8000506:	f043 0310 	orr.w	r3, r3, #16
 800050a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <MX_GPIO_Init+0x98>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000514:	f003 0310 	and.w	r3, r3, #16
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <MX_GPIO_Init+0x98>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <MX_GPIO_Init+0x98>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_GPIO_Init+0x98>)
 800052e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4811      	ldr	r0, [pc, #68]	@ (8000584 <MX_GPIO_Init+0x9c>)
 8000540:	f000 fd12 	bl	8000f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000544:	2320      	movs	r3, #32
 8000546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4619      	mov	r1, r3
 800055a:	480a      	ldr	r0, [pc, #40]	@ (8000584 <MX_GPIO_Init+0x9c>)
 800055c:	f000 fb44 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000560:	2302      	movs	r3, #2
 8000562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000568:	2302      	movs	r3, #2
 800056a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	@ (8000588 <MX_GPIO_Init+0xa0>)
 8000574:	f000 fb38 	bl	8000be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	58024400 	.word	0x58024400
 8000584:	58021000 	.word	0x58021000
 8000588:	58020800 	.word	0x58020800

0800058c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800059e:	f000 faab 	bl	8000af8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005ae:	231f      	movs	r3, #31
 80005b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80005b2:	2387      	movs	r3, #135	@ 0x87
 80005b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80005ba:	2300      	movs	r3, #0
 80005bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005be:	2301      	movs	r3, #1
 80005c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005ce:	463b      	mov	r3, r7
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fac9 	bl	8000b68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005d6:	2004      	movs	r0, #4
 80005d8:	f000 faa6 	bl	8000b28 <HAL_MPU_Enable>

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <Error_Handler+0x8>

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <HAL_MspInit+0x30>)
 80005f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <HAL_MspInit+0x30>)
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_MspInit+0x30>)
 8000608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	58024400 	.word	0x58024400

08000624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <HAL_TIM_Base_MspInit+0x3c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d10e      	bne.n	8000654 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <HAL_TIM_Base_MspInit+0x40>)
 8000638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800063c:	4a09      	ldr	r2, [pc, #36]	@ (8000664 <HAL_TIM_Base_MspInit+0x40>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <HAL_TIM_Base_MspInit+0x40>)
 8000648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40010000 	.word	0x40010000
 8000664:	58024400 	.word	0x58024400

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <NMI_Handler+0x4>

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <UsageFault_Handler+0x4>

08000690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006be:	f000 f917 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006cc:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <SystemInit+0xd0>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d2:	4a31      	ldr	r2, [pc, #196]	@ (8000798 <SystemInit+0xd0>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006dc:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <SystemInit+0xd4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d807      	bhi.n	80006f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e8:	4b2c      	ldr	r3, [pc, #176]	@ (800079c <SystemInit+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	4a2a      	ldr	r2, [pc, #168]	@ (800079c <SystemInit+0xd4>)
 80006f2:	f043 0307 	orr.w	r3, r3, #7
 80006f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006f8:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <SystemInit+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a28      	ldr	r2, [pc, #160]	@ (80007a0 <SystemInit+0xd8>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <SystemInit+0xd8>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <SystemInit+0xd8>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4924      	ldr	r1, [pc, #144]	@ (80007a0 <SystemInit+0xd8>)
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0xdc>)
 8000712:	4013      	ands	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <SystemInit+0xd4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d007      	beq.n	8000732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000722:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <SystemInit+0xd4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 030f 	bic.w	r3, r3, #15
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <SystemInit+0xd4>)
 800072c:	f043 0307 	orr.w	r3, r3, #7
 8000730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000732:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <SystemInit+0xd8>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000738:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <SystemInit+0xd8>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800073e:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <SystemInit+0xd8>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <SystemInit+0xd8>)
 8000746:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <SystemInit+0xe0>)
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800074a:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <SystemInit+0xd8>)
 800074c:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <SystemInit+0xe4>)
 800074e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <SystemInit+0xd8>)
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <SystemInit+0xe8>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <SystemInit+0xd8>)
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <SystemInit+0xd8>)
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <SystemInit+0xe8>)
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <SystemInit+0xd8>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <SystemInit+0xd8>)
 800076a:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <SystemInit+0xe8>)
 800076c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <SystemInit+0xd8>)
 8000770:	2200      	movs	r2, #0
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <SystemInit+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a09      	ldr	r2, [pc, #36]	@ (80007a0 <SystemInit+0xd8>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800077e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <SystemInit+0xd8>)
 8000782:	2200      	movs	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <SystemInit+0xec>)
 8000788:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800078c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	52004000 	.word	0x52004000

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f7ff ff84 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f001 fe61 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ea:	f7ff fd8f 	bl	800030c <main>
  bx  lr
 80007ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80007f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80007f8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80007fc:	08002524 	.word	0x08002524
  ldr r2, =_sbss
 8000800:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000804:	2400007c 	.word	0x2400007c

08000808 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC3_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000812:	2003      	movs	r0, #3
 8000814:	f000 f93e 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000818:	f001 f98a 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 800081c:	4602      	mov	r2, r0
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <HAL_Init+0x68>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	0a1b      	lsrs	r3, r3, #8
 8000824:	f003 030f 	and.w	r3, r3, #15
 8000828:	4913      	ldr	r1, [pc, #76]	@ (8000878 <HAL_Init+0x6c>)
 800082a:	5ccb      	ldrb	r3, [r1, r3]
 800082c:	f003 031f 	and.w	r3, r3, #31
 8000830:	fa22 f303 	lsr.w	r3, r2, r3
 8000834:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_Init+0x68>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <HAL_Init+0x6c>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	f003 031f 	and.w	r3, r3, #31
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	fa22 f303 	lsr.w	r3, r2, r3
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <HAL_Init+0x70>)
 800084e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000850:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <HAL_Init+0x74>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f814 	bl	8000884 <HAL_InitTick>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e002      	b.n	800086c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000866:	f7ff fec3 	bl	80005f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400
 8000878:	0800250c 	.word	0x0800250c
 800087c:	24000004 	.word	0x24000004
 8000880:	24000000 	.word	0x24000000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_InitTick+0x60>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e021      	b.n	80008dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <HAL_InitTick+0x64>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <HAL_InitTick+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f915 	bl	8000ade <HAL_SYSTICK_Config>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00e      	b.n	80008dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d80a      	bhi.n	80008da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f8ed 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d0:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <HAL_InitTick+0x68>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e000      	b.n	80008dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2400000c 	.word	0x2400000c
 80008e8:	24000000 	.word	0x24000000
 80008ec:	24000008 	.word	0x24000008

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2400000c 	.word	0x2400000c
 8000914:	24000078 	.word	0x24000078

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	24000078 	.word	0x24000078

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <__NVIC_SetPriorityGrouping+0x40>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 800095a:	4313      	orrs	r3, r2
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <__NVIC_SetPriorityGrouping+0x40>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	05fa0000 	.word	0x05fa0000

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	@ (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	@ 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff47 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff5e 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffb2 	bl	8000a50 <SysTick_Config>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000afc:	f3bf 8f5f 	dmb	sy
}
 8000b00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <HAL_MPU_Disable+0x28>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <HAL_MPU_Disable+0x28>)
 8000b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_MPU_Disable+0x2c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00
 8000b24:	e000ed90 	.word	0xe000ed90

08000b28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_MPU_Enable+0x38>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <HAL_MPU_Enable+0x3c>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3e:	4a09      	ldr	r2, [pc, #36]	@ (8000b64 <HAL_MPU_Enable+0x3c>)
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
}
 8000b4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b4c:	f3bf 8f6f 	isb	sy
}
 8000b50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed90 	.word	0xe000ed90
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	785a      	ldrb	r2, [r3, #1]
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <HAL_MPU_ConfigRegion+0x7c>)
 8000b76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_MPU_ConfigRegion+0x7c>)
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_MPU_ConfigRegion+0x7c>)
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000b84:	4a17      	ldr	r2, [pc, #92]	@ (8000be4 <HAL_MPU_ConfigRegion+0x7c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	7b1b      	ldrb	r3, [r3, #12]
 8000b90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7adb      	ldrb	r3, [r3, #11]
 8000b96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7a9b      	ldrb	r3, [r3, #10]
 8000b9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b5b      	ldrb	r3, [r3, #13]
 8000ba6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ba8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7b9b      	ldrb	r3, [r3, #14]
 8000bae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7bdb      	ldrb	r3, [r3, #15]
 8000bb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7a5b      	ldrb	r3, [r3, #9]
 8000bbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7a1b      	ldrb	r3, [r3, #8]
 8000bc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bd4:	6113      	str	r3, [r2, #16]
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed90 	.word	0xe000ed90

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bf6:	4b86      	ldr	r3, [pc, #536]	@ (8000e10 <HAL_GPIO_Init+0x228>)
 8000bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bfa:	e18c      	b.n	8000f16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 817e 	beq.w	8000f10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d005      	beq.n	8000c2c <HAL_GPIO_Init+0x44>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	f003 0201 	and.w	r2, r3, #1
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d017      	beq.n	8000cca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d123      	bne.n	8000d1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	69b9      	ldr	r1, [r7, #24]
 8000d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0203 	and.w	r2, r3, #3
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 80d8 	beq.w	8000f10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <HAL_GPIO_Init+0x22c>)
 8000d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d66:	4a2b      	ldr	r2, [pc, #172]	@ (8000e14 <HAL_GPIO_Init+0x22c>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <HAL_GPIO_Init+0x22c>)
 8000d72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7e:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <HAL_GPIO_Init+0x230>)
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	3302      	adds	r3, #2
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	220f      	movs	r2, #15
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <HAL_GPIO_Init+0x234>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d04a      	beq.n	8000e40 <HAL_GPIO_Init+0x258>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	@ (8000e20 <HAL_GPIO_Init+0x238>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x222>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <HAL_GPIO_Init+0x23c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x21e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <HAL_GPIO_Init+0x240>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x21a>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <HAL_GPIO_Init+0x244>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x216>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a18      	ldr	r2, [pc, #96]	@ (8000e30 <HAL_GPIO_Init+0x248>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x212>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_GPIO_Init+0x24c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x20e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a16      	ldr	r2, [pc, #88]	@ (8000e38 <HAL_GPIO_Init+0x250>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x20a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a15      	ldr	r2, [pc, #84]	@ (8000e3c <HAL_GPIO_Init+0x254>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x206>
 8000dea:	2309      	movs	r3, #9
 8000dec:	e029      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000dee:	230a      	movs	r3, #10
 8000df0:	e027      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e025      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000df6:	2306      	movs	r3, #6
 8000df8:	e023      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	e021      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000dfe:	2304      	movs	r3, #4
 8000e00:	e01f      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e01d      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e01b      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e019      	b.n	8000e42 <HAL_GPIO_Init+0x25a>
 8000e0e:	bf00      	nop
 8000e10:	58000080 	.word	0x58000080
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58000400 	.word	0x58000400
 8000e1c:	58020000 	.word	0x58020000
 8000e20:	58020400 	.word	0x58020400
 8000e24:	58020800 	.word	0x58020800
 8000e28:	58020c00 	.word	0x58020c00
 8000e2c:	58021000 	.word	0x58021000
 8000e30:	58021400 	.word	0x58021400
 8000e34:	58021800 	.word	0x58021800
 8000e38:	58021c00 	.word	0x58021c00
 8000e3c:	58022400 	.word	0x58022400
 8000e40:	2300      	movs	r3, #0
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	f002 0203 	and.w	r2, r2, #3
 8000e48:	0092      	lsls	r2, r2, #2
 8000e4a:	4093      	lsls	r3, r2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e52:	4938      	ldr	r1, [pc, #224]	@ (8000f34 <HAL_GPIO_Init+0x34c>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3301      	adds	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f47f ae6b 	bne.w	8000bfc <HAL_GPIO_Init+0x14>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3724      	adds	r7, #36	@ 0x24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	58000400 	.word	0x58000400

08000f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e001      	b.n	8000f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
 8000f74:	4613      	mov	r3, r2
 8000f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f78:	787b      	ldrb	r3, [r7, #1]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f84:	e003      	b.n	8000f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	041a      	lsls	r2, r3, #16
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d00a      	beq.n	8000fc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d001      	beq.n	8000fc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e01f      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e01d      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	f023 0207 	bic.w	r2, r3, #7
 8000fce:	490f      	ldr	r1, [pc, #60]	@ (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fd6:	f7ff fc9f 	bl	8000918 <HAL_GetTick>
 8000fda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fdc:	e009      	b.n	8000ff2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fde:	f7ff fc9b 	bl	8000918 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fec:	d901      	bls.n	8000ff2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e007      	b.n	8001002 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_PWREx_ConfigSupply+0x70>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ffe:	d1ee      	bne.n	8000fde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	58024800 	.word	0x58024800

08001010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	@ 0x30
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e3c8      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001030:	4b88      	ldr	r3, [pc, #544]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800103a:	4b86      	ldr	r3, [pc, #536]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001042:	2b10      	cmp	r3, #16
 8001044:	d007      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
 8001046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001048:	2b18      	cmp	r3, #24
 800104a:	d110      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 800104c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b7f      	ldr	r3, [pc, #508]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06c      	beq.n	800113c <HAL_RCC_OscConfig+0x12c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d168      	bne.n	800113c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e3a2      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x76>
 8001078:	4b76      	ldr	r3, [pc, #472]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a75      	ldr	r2, [pc, #468]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e02e      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b71      	ldr	r3, [pc, #452]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a70      	ldr	r2, [pc, #448]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b6e      	ldr	r3, [pc, #440]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a6d      	ldr	r2, [pc, #436]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0xbc>
 80010b2:	4b68      	ldr	r3, [pc, #416]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a67      	ldr	r2, [pc, #412]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b65      	ldr	r3, [pc, #404]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a64      	ldr	r2, [pc, #400]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010cc:	4b61      	ldr	r3, [pc, #388]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a60      	ldr	r2, [pc, #384]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ec:	f7ff fc14 	bl	8000918 <HAL_GetTick>
 80010f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fc10 	bl	8000918 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e356      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001106:	4b53      	ldr	r3, [pc, #332]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe4>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc00 	bl	8000918 <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fbfc 	bl	8000918 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e342      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800112e:	4b49      	ldr	r3, [pc, #292]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x10c>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 808c 	beq.w	8001264 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114c:	4b41      	ldr	r3, [pc, #260]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001154:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_RCC_OscConfig+0x162>
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	2b18      	cmp	r3, #24
 8001166:	d137      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1c8>
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d132      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x17a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e314      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800118a:	4b32      	ldr	r3, [pc, #200]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0219 	bic.w	r2, r3, #25
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	492f      	ldr	r1, [pc, #188]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fbbc 	bl	8000918 <HAL_GetTick>
 80011a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fbb8 	bl	8000918 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e2fe      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011b6:	4b27      	ldr	r3, [pc, #156]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	061b      	lsls	r3, r3, #24
 80011d0:	4920      	ldr	r1, [pc, #128]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d6:	e045      	b.n	8001264 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d026      	beq.n	800122e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 0219 	bic.w	r2, r3, #25
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	4919      	ldr	r1, [pc, #100]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb91 	bl	8000918 <HAL_GetTick>
 80011f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb8d 	bl	8000918 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e2d3      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	061b      	lsls	r3, r3, #24
 8001226:	490b      	ldr	r1, [pc, #44]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e01a      	b.n	8001264 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_RCC_OscConfig+0x244>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fb6d 	bl	8000918 <HAL_GetTick>
 800123e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fb69 	bl	8000918 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d903      	bls.n	8001258 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e2af      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
 8001254:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001258:	4b96      	ldr	r3, [pc, #600]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	d06a      	beq.n	8001346 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001270:	4b90      	ldr	r3, [pc, #576]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001278:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800127a:	4b8e      	ldr	r3, [pc, #568]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b08      	cmp	r3, #8
 8001284:	d007      	beq.n	8001296 <HAL_RCC_OscConfig+0x286>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b18      	cmp	r3, #24
 800128a:	d11b      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2b4>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d116      	bne.n	80012c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001296:	4b87      	ldr	r3, [pc, #540]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x29e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	2b80      	cmp	r3, #128	@ 0x80
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e282      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012ae:	4b81      	ldr	r3, [pc, #516]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	061b      	lsls	r3, r3, #24
 80012bc:	497d      	ldr	r1, [pc, #500]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012c2:	e040      	b.n	8001346 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80012cc:	4b79      	ldr	r3, [pc, #484]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a78      	ldr	r2, [pc, #480]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80012d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb1e 	bl	8000918 <HAL_GetTick>
 80012dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80012e0:	f7ff fb1a 	bl	8000918 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e260      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80012f2:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012fe:	4b6d      	ldr	r3, [pc, #436]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	061b      	lsls	r3, r3, #24
 800130c:	4969      	ldr	r1, [pc, #420]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	60cb      	str	r3, [r1, #12]
 8001312:	e018      	b.n	8001346 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001314:	4b67      	ldr	r3, [pc, #412]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a66      	ldr	r2, [pc, #408]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800131a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800131e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fafa 	bl	8000918 <HAL_GetTick>
 8001324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001328:	f7ff faf6 	bl	8000918 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e23c      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800133a:	4b5e      	ldr	r3, [pc, #376]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d036      	beq.n	80013c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d019      	beq.n	800138e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135a:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800135c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800135e:	4a55      	ldr	r2, [pc, #340]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fad7 	bl	8000918 <HAL_GetTick>
 800136a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136e:	f7ff fad3 	bl	8000918 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e219      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001380:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x35e>
 800138c:	e018      	b.n	80013c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138e:	4b49      	ldr	r3, [pc, #292]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001392:	4a48      	ldr	r2, [pc, #288]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff fabd 	bl	8000918 <HAL_GetTick>
 800139e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff fab9 	bl	8000918 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1ff      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013b4:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80013b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0320 	and.w	r3, r3, #32
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d036      	beq.n	800143a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d019      	beq.n	8001408 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a36      	ldr	r2, [pc, #216]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80013da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80013e0:	f7ff fa9a 	bl	8000918 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e8:	f7ff fa96 	bl	8000918 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e1dc      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x3d8>
 8001406:	e018      	b.n	800143a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a29      	ldr	r2, [pc, #164]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800140e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001412:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001414:	f7ff fa80 	bl	8000918 <HAL_GetTick>
 8001418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141c:	f7ff fa7c 	bl	8000918 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1c2      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8086 	beq.w	8001554 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001448:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <HAL_RCC_OscConfig+0x4a8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1a      	ldr	r2, [pc, #104]	@ (80014b8 <HAL_RCC_OscConfig+0x4a8>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001454:	f7ff fa60 	bl	8000918 <HAL_GetTick>
 8001458:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145c:	f7ff fa5c 	bl	8000918 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1a2      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_RCC_OscConfig+0x4a8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x480>
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001486:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	@ 0x70
 800148e:	e032      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d111      	bne.n	80014bc <HAL_RCC_OscConfig+0x4ac>
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149c:	4a05      	ldr	r2, [pc, #20]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a8:	4a02      	ldr	r2, [pc, #8]	@ (80014b4 <HAL_RCC_OscConfig+0x4a4>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80014b0:	e021      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e6>
 80014b2:	bf00      	nop
 80014b4:	58024400 	.word	0x58024400
 80014b8:	58024800 	.word	0x58024800
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x4ce>
 80014c4:	4b83      	ldr	r3, [pc, #524]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a82      	ldr	r2, [pc, #520]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d0:	4b80      	ldr	r3, [pc, #512]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d4:	4a7f      	ldr	r2, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	@ 0x70
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x4e6>
 80014de:	4b7d      	ldr	r3, [pc, #500]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	4a7c      	ldr	r2, [pc, #496]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ea:	4b7a      	ldr	r3, [pc, #488]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ee:	4a79      	ldr	r2, [pc, #484]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fa0b 	bl	8000918 <HAL_GetTick>
 8001502:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fa07 	bl	8000918 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e14b      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800151c:	4b6d      	ldr	r3, [pc, #436]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ee      	beq.n	8001506 <HAL_RCC_OscConfig+0x4f6>
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152a:	f7ff f9f5 	bl	8000918 <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff f9f1 	bl	8000918 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e135      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001548:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 812a 	beq.w	80017b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800155e:	4b5d      	ldr	r3, [pc, #372]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001566:	2b18      	cmp	r3, #24
 8001568:	f000 80ba 	beq.w	80016e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	2b02      	cmp	r3, #2
 8001572:	f040 8095 	bne.w	80016a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001576:	4b57      	ldr	r3, [pc, #348]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a56      	ldr	r2, [pc, #344]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800157c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff f9c9 	bl	8000918 <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff f9c5 	bl	8000918 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e10b      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800159c:	4b4d      	ldr	r3, [pc, #308]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a8:	4b4a      	ldr	r3, [pc, #296]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80015aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ac:	4b4a      	ldr	r3, [pc, #296]	@ (80016d8 <HAL_RCC_OscConfig+0x6c8>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	430a      	orrs	r2, r1
 80015bc:	4945      	ldr	r1, [pc, #276]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	628b      	str	r3, [r1, #40]	@ 0x28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d0:	3b01      	subs	r3, #1
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ea:	3b01      	subs	r3, #1
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80015f2:	4938      	ldr	r1, [pc, #224]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80015f8:	4b36      	ldr	r3, [pc, #216]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	4a35      	ldr	r2, [pc, #212]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80015fe:	f023 0301 	bic.w	r3, r3, #1
 8001602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001604:	4b33      	ldr	r3, [pc, #204]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <HAL_RCC_OscConfig+0x6cc>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001610:	00d2      	lsls	r2, r2, #3
 8001612:	4930      	ldr	r1, [pc, #192]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001614:	4313      	orrs	r3, r2
 8001616:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001618:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	f023 020c 	bic.w	r2, r3, #12
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	492b      	ldr	r1, [pc, #172]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001626:	4313      	orrs	r3, r2
 8001628:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800162a:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800162c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162e:	f023 0202 	bic.w	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4927      	ldr	r1, [pc, #156]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800164e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800165a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff f94e 	bl	8000918 <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f94a 	bl	8000918 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e090      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x670>
 800169e:	e088      	b.n	80017b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80016a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff f934 	bl	8000918 <HAL_GetTick>
 80016b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f930 	bl	8000918 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e076      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016c6:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_RCC_OscConfig+0x6c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x6a4>
 80016d2:	e06e      	b.n	80017b2 <HAL_RCC_OscConfig+0x7a2>
 80016d4:	58024400 	.word	0x58024400
 80016d8:	fffffc0c 	.word	0xfffffc0c
 80016dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80016e0:	4b36      	ldr	r3, [pc, #216]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80016e6:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d031      	beq.n	8001758 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f003 0203 	and.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d12a      	bne.n	8001758 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d122      	bne.n	8001758 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d11a      	bne.n	8001758 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	0a5b      	lsrs	r3, r3, #9
 8001726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001730:	429a      	cmp	r2, r3
 8001732:	d111      	bne.n	8001758 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001740:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d108      	bne.n	8001758 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	0e1b      	lsrs	r3, r3, #24
 800174a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001752:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e02b      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 800175e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001766:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	429a      	cmp	r2, r3
 8001770:	d01f      	beq.n	80017b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 8001774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001776:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800177e:	f7ff f8cb 	bl	8000918 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001784:	bf00      	nop
 8001786:	f7ff f8c7 	bl	8000918 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	4293      	cmp	r3, r2
 8001790:	d0f9      	beq.n	8001786 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 8001794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_RCC_OscConfig+0x7b0>)
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800179e:	00d2      	lsls	r2, r2, #3
 80017a0:	4906      	ldr	r1, [pc, #24]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <HAL_RCC_OscConfig+0x7ac>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3730      	adds	r7, #48	@ 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58024400 	.word	0x58024400
 80017c0:	ffff0007 	.word	0xffff0007

080017c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e19c      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d910      	bls.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b87      	ldr	r3, [pc, #540]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 020f 	bic.w	r2, r3, #15
 80017ee:	4985      	ldr	r1, [pc, #532]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b83      	ldr	r3, [pc, #524]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e184      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	4b7b      	ldr	r3, [pc, #492]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001820:	429a      	cmp	r2, r3
 8001822:	d908      	bls.n	8001836 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001824:	4b78      	ldr	r3, [pc, #480]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	4975      	ldr	r1, [pc, #468]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001832:	4313      	orrs	r3, r2
 8001834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800184e:	429a      	cmp	r2, r3
 8001850:	d908      	bls.n	8001864 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001852:	4b6d      	ldr	r3, [pc, #436]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	496a      	ldr	r1, [pc, #424]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001860:	4313      	orrs	r3, r2
 8001862:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	4b64      	ldr	r3, [pc, #400]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800187c:	429a      	cmp	r2, r3
 800187e:	d908      	bls.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001880:	4b61      	ldr	r3, [pc, #388]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	495e      	ldr	r1, [pc, #376]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 800188e:	4313      	orrs	r3, r2
 8001890:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	4b59      	ldr	r3, [pc, #356]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d908      	bls.n	80018c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018ae:	4b56      	ldr	r3, [pc, #344]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4953      	ldr	r1, [pc, #332]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	429a      	cmp	r2, r3
 80018da:	d908      	bls.n	80018ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f023 020f 	bic.w	r2, r3, #15
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4947      	ldr	r1, [pc, #284]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d055      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80018fa:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4940      	ldr	r1, [pc, #256]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001908:	4313      	orrs	r3, r2
 800190a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d107      	bne.n	8001924 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001914:	4b3c      	ldr	r3, [pc, #240]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d121      	bne.n	8001964 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0f6      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d107      	bne.n	800193c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800192c:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d115      	bne.n	8001964 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0ea      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d107      	bne.n	8001954 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001944:	4b30      	ldr	r3, [pc, #192]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0de      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001954:	4b2c      	ldr	r3, [pc, #176]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0d6      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001964:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f023 0207 	bic.w	r2, r3, #7
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4925      	ldr	r1, [pc, #148]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001972:	4313      	orrs	r3, r2
 8001974:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001976:	f7fe ffcf 	bl	8000918 <HAL_GetTick>
 800197a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197c:	e00a      	b.n	8001994 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7fe ffcb 	bl	8000918 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0be      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001994:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d1eb      	bne.n	800197e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d010      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	429a      	cmp	r2, r3
 80019c0:	d208      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f023 020f 	bic.w	r2, r3, #15
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	490e      	ldr	r1, [pc, #56]	@ (8001a08 <HAL_RCC_ClockConfig+0x244>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d214      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 020f 	bic.w	r2, r3, #15
 80019ea:	4906      	ldr	r1, [pc, #24]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_RCC_ClockConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e086      	b.n	8001b12 <HAL_RCC_ClockConfig+0x34e>
 8001a04:	52002000 	.word	0x52002000
 8001a08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d208      	bcs.n	8001a3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a28:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4939      	ldr	r1, [pc, #228]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d010      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d208      	bcs.n	8001a68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a56:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	492e      	ldr	r1, [pc, #184]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d010      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d208      	bcs.n	8001a96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a84:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4922      	ldr	r1, [pc, #136]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d010      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d208      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4917      	ldr	r1, [pc, #92]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ac4:	f000 f834 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	4912      	ldr	r1, [pc, #72]	@ (8001b20 <HAL_RCC_ClockConfig+0x35c>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_RCC_ClockConfig+0x358>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <HAL_RCC_ClockConfig+0x35c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_RCC_ClockConfig+0x360>)
 8001afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001afc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x364>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_RCC_ClockConfig+0x368>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe febc 	bl	8000884 <HAL_InitTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	0800250c 	.word	0x0800250c
 8001b24:	24000004 	.word	0x24000004
 8001b28:	24000000 	.word	0x24000000
 8001b2c:	24000008 	.word	0x24000008

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b36:	4bb3      	ldr	r3, [pc, #716]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3e:	2b18      	cmp	r3, #24
 8001b40:	f200 8155 	bhi.w	8001dee <HAL_RCC_GetSysClockFreq+0x2be>
 8001b44:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001bb1 	.word	0x08001bb1
 8001b50:	08001def 	.word	0x08001def
 8001b54:	08001def 	.word	0x08001def
 8001b58:	08001def 	.word	0x08001def
 8001b5c:	08001def 	.word	0x08001def
 8001b60:	08001def 	.word	0x08001def
 8001b64:	08001def 	.word	0x08001def
 8001b68:	08001def 	.word	0x08001def
 8001b6c:	08001bd7 	.word	0x08001bd7
 8001b70:	08001def 	.word	0x08001def
 8001b74:	08001def 	.word	0x08001def
 8001b78:	08001def 	.word	0x08001def
 8001b7c:	08001def 	.word	0x08001def
 8001b80:	08001def 	.word	0x08001def
 8001b84:	08001def 	.word	0x08001def
 8001b88:	08001def 	.word	0x08001def
 8001b8c:	08001bdd 	.word	0x08001bdd
 8001b90:	08001def 	.word	0x08001def
 8001b94:	08001def 	.word	0x08001def
 8001b98:	08001def 	.word	0x08001def
 8001b9c:	08001def 	.word	0x08001def
 8001ba0:	08001def 	.word	0x08001def
 8001ba4:	08001def 	.word	0x08001def
 8001ba8:	08001def 	.word	0x08001def
 8001bac:	08001be3 	.word	0x08001be3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bb0:	4b94      	ldr	r3, [pc, #592]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d009      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001bbc:	4b91      	ldr	r3, [pc, #580]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	4a90      	ldr	r2, [pc, #576]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001bce:	e111      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001bd0:	4b8d      	ldr	r3, [pc, #564]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001bd2:	61bb      	str	r3, [r7, #24]
      break;
 8001bd4:	e10e      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bd8:	61bb      	str	r3, [r7, #24]
      break;
 8001bda:	e10b      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001bde:	61bb      	str	r3, [r7, #24]
      break;
 8001be0:	e108      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001be2:	4b88      	ldr	r3, [pc, #544]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001bec:	4b85      	ldr	r3, [pc, #532]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001bf8:	4b82      	ldr	r3, [pc, #520]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001c02:	4b80      	ldr	r3, [pc, #512]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80e1 	beq.w	8001de8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	f000 8083 	beq.w	8001d34 <HAL_RCC_GetSysClockFreq+0x204>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	f200 80a1 	bhi.w	8001d78 <HAL_RCC_GetSysClockFreq+0x248>
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x114>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d056      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c42:	e099      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c44:	4b6f      	ldr	r3, [pc, #444]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c50:	4b6c      	ldr	r3, [pc, #432]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c7a:	4b62      	ldr	r3, [pc, #392]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c8e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001caa:	e087      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001e18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cbe:	4b51      	ldr	r3, [pc, #324]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cd2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001cee:	e065      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d02:	4b40      	ldr	r3, [pc, #256]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0a:	ee07 3a90 	vmov	s15, r3
 8001d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d16:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d32:	e043      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001e20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d46:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d5a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d76:	e021      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d82:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001e1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d9e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001e14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	0a5b      	lsrs	r3, r3, #9
 8001dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de0:	ee17 3a90 	vmov	r3, s15
 8001de4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001de6:	e005      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
      break;
 8001dec:	e002      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001df0:	61bb      	str	r3, [r7, #24]
      break;
 8001df2:	bf00      	nop
  }

  return sysclockfreq;
 8001df4:	69bb      	ldr	r3, [r7, #24]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	58024400 	.word	0x58024400
 8001e08:	03d09000 	.word	0x03d09000
 8001e0c:	003d0900 	.word	0x003d0900
 8001e10:	017d7840 	.word	0x017d7840
 8001e14:	46000000 	.word	0x46000000
 8001e18:	4c742400 	.word	0x4c742400
 8001e1c:	4a742400 	.word	0x4a742400
 8001e20:	4bbebc20 	.word	0x4bbebc20

08001e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e049      	b.n	8001eca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fbea 	bl	8000624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f000 f92e 	bl	80020c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0dc      	b.n	80020aa <HAL_TIM_ConfigClockSource+0x1d6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80020b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a64      	ldr	r2, [pc, #400]	@ (80020b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	f000 80a9 	beq.w	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001f2c:	4a62      	ldr	r2, [pc, #392]	@ (80020b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	f200 80ae 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f34:	4a61      	ldr	r2, [pc, #388]	@ (80020bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	f000 80a1 	beq.w	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001f3c:	4a5f      	ldr	r2, [pc, #380]	@ (80020bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f200 80a6 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f44:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	f000 8099 	beq.w	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001f4c:	4a5c      	ldr	r2, [pc, #368]	@ (80020c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f200 809e 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001f58:	f000 8091 	beq.w	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001f5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001f60:	f200 8096 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f68:	f000 8089 	beq.w	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001f6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f70:	f200 808e 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f78:	d03e      	beq.n	8001ff8 <HAL_TIM_ConfigClockSource+0x124>
 8001f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f7e:	f200 8087 	bhi.w	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f86:	f000 8086 	beq.w	8002096 <HAL_TIM_ConfigClockSource+0x1c2>
 8001f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8e:	d87f      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f90:	2b70      	cmp	r3, #112	@ 0x70
 8001f92:	d01a      	beq.n	8001fca <HAL_TIM_ConfigClockSource+0xf6>
 8001f94:	2b70      	cmp	r3, #112	@ 0x70
 8001f96:	d87b      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001f98:	2b60      	cmp	r3, #96	@ 0x60
 8001f9a:	d050      	beq.n	800203e <HAL_TIM_ConfigClockSource+0x16a>
 8001f9c:	2b60      	cmp	r3, #96	@ 0x60
 8001f9e:	d877      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001fa0:	2b50      	cmp	r3, #80	@ 0x50
 8001fa2:	d03c      	beq.n	800201e <HAL_TIM_ConfigClockSource+0x14a>
 8001fa4:	2b50      	cmp	r3, #80	@ 0x50
 8001fa6:	d873      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001fa8:	2b40      	cmp	r3, #64	@ 0x40
 8001faa:	d058      	beq.n	800205e <HAL_TIM_ConfigClockSource+0x18a>
 8001fac:	2b40      	cmp	r3, #64	@ 0x40
 8001fae:	d86f      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001fb0:	2b30      	cmp	r3, #48	@ 0x30
 8001fb2:	d064      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001fb4:	2b30      	cmp	r3, #48	@ 0x30
 8001fb6:	d86b      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d060      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d867      	bhi.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05c      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d05a      	beq.n	800207e <HAL_TIM_ConfigClockSource+0x1aa>
 8001fc8:	e062      	b.n	8002090 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fda:	f000 f9a3 	bl	8002324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	609a      	str	r2, [r3, #8]
      break;
 8001ff6:	e04f      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002008:	f000 f98c 	bl	8002324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800201a:	609a      	str	r2, [r3, #8]
      break;
 800201c:	e03c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800202a:	461a      	mov	r2, r3
 800202c:	f000 f8fc 	bl	8002228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2150      	movs	r1, #80	@ 0x50
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f956 	bl	80022e8 <TIM_ITRx_SetConfig>
      break;
 800203c:	e02c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800204a:	461a      	mov	r2, r3
 800204c:	f000 f91b 	bl	8002286 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2160      	movs	r1, #96	@ 0x60
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f946 	bl	80022e8 <TIM_ITRx_SetConfig>
      break;
 800205c:	e01c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800206a:	461a      	mov	r2, r3
 800206c:	f000 f8dc 	bl	8002228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2140      	movs	r1, #64	@ 0x40
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f936 	bl	80022e8 <TIM_ITRx_SetConfig>
      break;
 800207c:	e00c      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f000 f92d 	bl	80022e8 <TIM_ITRx_SetConfig>
      break;
 800208e:	e003      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e000      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	ffceff88 	.word	0xffceff88
 80020b8:	00100040 	.word	0x00100040
 80020bc:	00100030 	.word	0x00100030
 80020c0:	00100020 	.word	0x00100020

080020c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a47      	ldr	r2, [pc, #284]	@ (8002204 <TIM_Base_SetConfig+0x140>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <TIM_Base_SetConfig+0x144>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a45      	ldr	r2, [pc, #276]	@ (800220c <TIM_Base_SetConfig+0x148>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a44      	ldr	r2, [pc, #272]	@ (8002210 <TIM_Base_SetConfig+0x14c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a39      	ldr	r2, [pc, #228]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002124:	d023      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a36      	ldr	r2, [pc, #216]	@ (8002204 <TIM_Base_SetConfig+0x140>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a35      	ldr	r2, [pc, #212]	@ (8002208 <TIM_Base_SetConfig+0x144>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a34      	ldr	r2, [pc, #208]	@ (800220c <TIM_Base_SetConfig+0x148>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a33      	ldr	r2, [pc, #204]	@ (8002210 <TIM_Base_SetConfig+0x14c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <TIM_Base_SetConfig+0x150>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a31      	ldr	r2, [pc, #196]	@ (8002218 <TIM_Base_SetConfig+0x154>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a30      	ldr	r2, [pc, #192]	@ (800221c <TIM_Base_SetConfig+0x158>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2f      	ldr	r2, [pc, #188]	@ (8002220 <TIM_Base_SetConfig+0x15c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xaa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2e      	ldr	r2, [pc, #184]	@ (8002224 <TIM_Base_SetConfig+0x160>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00f      	beq.n	80021cc <TIM_Base_SetConfig+0x108>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <TIM_Base_SetConfig+0x14c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00b      	beq.n	80021cc <TIM_Base_SetConfig+0x108>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <TIM_Base_SetConfig+0x150>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_Base_SetConfig+0x108>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a16      	ldr	r2, [pc, #88]	@ (8002218 <TIM_Base_SetConfig+0x154>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_Base_SetConfig+0x108>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a15      	ldr	r2, [pc, #84]	@ (800221c <TIM_Base_SetConfig+0x158>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d103      	bne.n	80021d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f023 0201 	bic.w	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]
  }
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40010400 	.word	0x40010400
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800
 8002220:	4000e000 	.word	0x4000e000
 8002224:	4000e400 	.word	0x4000e400

08002228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	f023 0201 	bic.w	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f023 030a 	bic.w	r3, r3, #10
 8002264:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	621a      	str	r2, [r3, #32]
}
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002286:	b480      	push	{r7}
 8002288:	b087      	sub	sp, #28
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f023 0210 	bic.w	r2, r3, #16
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	031b      	lsls	r3, r3, #12
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]
}
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <TIM_ITRx_SetConfig+0x38>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	f043 0307 	orr.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	609a      	str	r2, [r3, #8]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	ffcfff8f 	.word	0xffcfff8f

08002324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800233e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	021a      	lsls	r2, r3, #8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	431a      	orrs	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002378:	2302      	movs	r3, #2
 800237a:	e077      	b.n	800246c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	@ (8002478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a34      	ldr	r2, [pc, #208]	@ (800247c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d108      	bne.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80023b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a25      	ldr	r2, [pc, #148]	@ (8002478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02c      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ee:	d027      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a22      	ldr	r2, [pc, #136]	@ (8002480 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d022      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d01d      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a1f      	ldr	r2, [pc, #124]	@ (8002488 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d018      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1a      	ldr	r2, [pc, #104]	@ (800247c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d013      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1b      	ldr	r2, [pc, #108]	@ (800248c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00e      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1a      	ldr	r2, [pc, #104]	@ (8002490 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10c      	bne.n	800245a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4313      	orrs	r3, r2
 8002450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40010000 	.word	0x40010000
 800247c:	40010400 	.word	0x40010400
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40001800 	.word	0x40001800
 8002490:	40014000 	.word	0x40014000
 8002494:	4000e000 	.word	0x4000e000
 8002498:	4000e400 	.word	0x4000e400

0800249c <memset>:
 800249c:	4402      	add	r2, r0
 800249e:	4603      	mov	r3, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4d0d      	ldr	r5, [pc, #52]	@ (80024e4 <__libc_init_array+0x38>)
 80024b0:	4c0d      	ldr	r4, [pc, #52]	@ (80024e8 <__libc_init_array+0x3c>)
 80024b2:	1b64      	subs	r4, r4, r5
 80024b4:	10a4      	asrs	r4, r4, #2
 80024b6:	2600      	movs	r6, #0
 80024b8:	42a6      	cmp	r6, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	4d0b      	ldr	r5, [pc, #44]	@ (80024ec <__libc_init_array+0x40>)
 80024be:	4c0c      	ldr	r4, [pc, #48]	@ (80024f0 <__libc_init_array+0x44>)
 80024c0:	f000 f818 	bl	80024f4 <_init>
 80024c4:	1b64      	subs	r4, r4, r5
 80024c6:	10a4      	asrs	r4, r4, #2
 80024c8:	2600      	movs	r6, #0
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d4:	4798      	blx	r3
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	f855 3b04 	ldr.w	r3, [r5], #4
 80024de:	4798      	blx	r3
 80024e0:	3601      	adds	r6, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	0800251c 	.word	0x0800251c
 80024e8:	0800251c 	.word	0x0800251c
 80024ec:	0800251c 	.word	0x0800251c
 80024f0:	08002520 	.word	0x08002520

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
