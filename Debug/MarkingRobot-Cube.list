
MarkingRobot-Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006834  08006834  00007834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800686c  0800686c  0000786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006874  08006874  00007874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006878  08006878  00007878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800687c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d8  24000010  0800688c  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000e8  0800688c  000080e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010c58  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000022ca  00000000  00000000  00018c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b80  00000000  00000000  0001af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008d6  00000000  00000000  0001bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031a57  00000000  00000000  0001c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012cd4  00000000  00000000  0004de0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013feda  00000000  00000000  00060ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a09bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002edc  00000000  00000000  001a0a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005e  00000000  00000000  001a38dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800681c 	.word	0x0800681c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800681c 	.word	0x0800681c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000600:	f000 f94e 	bl	80008a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fb06 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f824 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f904 	bl	8000818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8b2 	bl	8000778 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000614:	f000 f88e 	bl	8000734 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(X_EN_GPIO_Port, X_EN_Pin, GPIO_PIN_RESET); //Enable-Pin von Treiber X setzen
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <main+0x54>)
 800061e:	f001 fd35 	bl	800208c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X_DIR_GPIO_Port, X_DIR_Pin, GPIO_PIN_SET); //Direction-Pin von Treiber X setzen
 8000622:	2201      	movs	r2, #1
 8000624:	2108      	movs	r1, #8
 8000626:	480a      	ldr	r0, [pc, #40]	@ (8000650 <main+0x54>)
 8000628:	f001 fd30 	bl	800208c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4807      	ldr	r0, [pc, #28]	@ (8000650 <main+0x54>)
 8000632:	f001 fd2b 	bl	800208c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 fb7e 	bl	8000d38 <HAL_Delay>
	  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2110      	movs	r1, #16
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <main+0x54>)
 8000642:	f001 fd23 	bl	800208c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f000 fb76 	bl	8000d38 <HAL_Delay>
	  HAL_GPIO_WritePin(X_STEP_GPIO_Port, X_STEP_Pin, GPIO_PIN_SET);
 800064c:	bf00      	nop
 800064e:	e7ed      	b.n	800062c <main+0x30>
 8000650:	58020c00 	.word	0x58020c00

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09c      	sub	sp, #112	@ 0x70
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065e:	224c      	movs	r2, #76	@ 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 f8ae 	bl	80067c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2220      	movs	r2, #32
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f8a8 	bl	80067c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000674:	2002      	movs	r0, #2
 8000676:	f001 fd23 	bl	80020c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <SystemClock_Config+0xdc>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4a2b      	ldr	r2, [pc, #172]	@ (8000730 <SystemClock_Config+0xdc>)
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <SystemClock_Config+0xdc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000696:	bf00      	nop
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <SystemClock_Config+0xdc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a4:	d1f8      	bne.n	8000698 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b6:	2300      	movs	r3, #0
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80006be:	2322      	movs	r3, #34	@ 0x22
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c6:	2303      	movs	r3, #3
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ce:	230c      	movs	r3, #12
 80006d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80006d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80006da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fd27 	bl	8002134 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ec:	f000 f904 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	233f      	movs	r3, #63	@ 0x3f
 80006f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006fc:	2308      	movs	r3, #8
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000704:	2340      	movs	r3, #64	@ 0x40
 8000706:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000708:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800070c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2103      	movs	r1, #3
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f8e6 	bl	80028e8 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000722:	f000 f8e9 	bl	80008f8 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3770      	adds	r7, #112	@ 0x70
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58024800 	.word	0x58024800

08000734 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000738:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_CRC_Init+0x3c>)
 800073a:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <MX_CRC_Init+0x40>)
 800073c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_CRC_Init+0x3c>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_CRC_Init+0x3c>)
 8000758:	2201      	movs	r2, #1
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_CRC_Init+0x3c>)
 800075e:	f000 fc97 	bl	8001090 <HAL_CRC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000768:	f000 f8c6 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2400002c 	.word	0x2400002c
 8000774:	58024c00 	.word	0x58024c00

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <MX_USART2_UART_Init+0x9c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 80007ba:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007ca:	f004 f9db 	bl	8004b84 <HAL_HalfDuplex_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80007d4:	f000 f890 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007dc:	f005 ff28 	bl	8006630 <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 80007e6:	f000 f887 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007ee:	f005 ff5d 	bl	80066ac <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 80007f8:	f000 f87e 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_USART2_UART_Init+0x98>)
 80007fe:	f005 fede 	bl	80065be <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8000808:	f000 f876 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24000050 	.word	0x24000050
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_GPIO_Init+0x80>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_GPIO_Init+0x80>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_GPIO_Init+0x80>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_GPIO_Init+0x80>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <MX_GPIO_Init+0x80>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x80>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, X_DIR_Pin|X_STEP_Pin|X_EN_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2158      	movs	r1, #88	@ 0x58
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_GPIO_Init+0x84>)
 8000870:	f001 fc0c 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : X_DIR_Pin X_STEP_Pin X_EN_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|X_STEP_Pin|X_EN_Pin;
 8000874:	2358      	movs	r3, #88	@ 0x58
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_GPIO_Init+0x84>)
 800088c:	f001 fa56 	bl	8001d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58024400 	.word	0x58024400
 800089c:	58020c00 	.word	0x58020c00

080008a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b2:	f000 fb75 	bl	8000fa0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b6:	2301      	movs	r3, #1
 80008b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008c2:	231f      	movs	r3, #31
 80008c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008c6:	2387      	movs	r3, #135	@ 0x87
 80008c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ce:	2300      	movs	r3, #0
 80008d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fb93 	bl	8001010 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f000 fb70 	bl	8000fd0 <HAL_MPU_Enable>

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_MspInit+0x30>)
 800090c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000910:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x30>)
 8000912:	f043 0302 	orr.w	r3, r3, #2
 8000916:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x30>)
 800091c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000920:	f003 0302 	and.w	r3, r3, #2
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	58024400 	.word	0x58024400

08000938 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <HAL_CRC_MspInit+0x3c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10e      	bne.n	8000968 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <HAL_CRC_MspInit+0x40>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	4a09      	ldr	r2, [pc, #36]	@ (8000978 <HAL_CRC_MspInit+0x40>)
 8000952:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <HAL_CRC_MspInit+0x40>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	58024c00 	.word	0x58024c00
 8000978:	58024400 	.word	0x58024400

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b0b8      	sub	sp, #224	@ 0xe0
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	22b8      	movs	r2, #184	@ 0xb8
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f005 ff11 	bl	80067c4 <memset>
  if(huart->Instance==USART2)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a50 <HAL_UART_MspInit+0xd4>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d14d      	bne.n	8000a48 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009ac:	f04f 0202 	mov.w	r2, #2
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 fb1c 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80009ce:	f7ff ff93 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 80009d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 80009e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80009e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_UART_MspInit+0xd8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = X_UART_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a26:	2307      	movs	r3, #7
 8000a28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(X_UART_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a30:	4619      	mov	r1, r3
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <HAL_UART_MspInit+0xdc>)
 8000a34:	f001 f982 	bl	8001d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2026      	movs	r0, #38	@ 0x26
 8000a3e:	f000 fa7a 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a42:	2026      	movs	r0, #38	@ 0x26
 8000a44:	f000 fa91 	bl	8000f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a48:	bf00      	nop
 8000a4a:	37e0      	adds	r7, #224	@ 0xe0
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40004400 	.word	0x40004400
 8000a54:	58024400 	.word	0x58024400
 8000a58:	58020c00 	.word	0x58020c00

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f921 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <USART2_IRQHandler+0x10>)
 8000ac2:	f004 f8b7 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	24000050 	.word	0x24000050

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b32      	ldr	r3, [pc, #200]	@ (8000ba0 <SystemInit+0xd0>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <SystemInit+0xd0>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba4 <SystemInit+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d807      	bhi.n	8000b00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <SystemInit+0xd4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba4 <SystemInit+0xd4>)
 8000afa:	f043 0307 	orr.w	r3, r3, #7
 8000afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b00:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <SystemInit+0xd8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a28      	ldr	r2, [pc, #160]	@ (8000ba8 <SystemInit+0xd8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ba8 <SystemInit+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <SystemInit+0xd8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4924      	ldr	r1, [pc, #144]	@ (8000ba8 <SystemInit+0xd8>)
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <SystemInit+0xdc>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <SystemInit+0xd4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <SystemInit+0xd4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba4 <SystemInit+0xd4>)
 8000b34:	f043 0307 	orr.w	r3, r3, #7
 8000b38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <SystemInit+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <SystemInit+0xd8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <SystemInit+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <SystemInit+0xd8>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <SystemInit+0xe0>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <SystemInit+0xd8>)
 8000b54:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <SystemInit+0xe4>)
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <SystemInit+0xd8>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <SystemInit+0xe8>)
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <SystemInit+0xd8>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <SystemInit+0xe8>)
 8000b68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <SystemInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <SystemInit+0xd8>)
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <SystemInit+0xe8>)
 8000b74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <SystemInit+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <SystemInit+0xd8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <SystemInit+0xd8>)
 8000b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <SystemInit+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <SystemInit+0xec>)
 8000b90:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	52004000 	.word	0x52004000

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	f7ff ff84 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f005 fdf1 	bl	80067d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fd03 	bl	80005fc <main>
  bx  lr
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c00:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c04:	0800687c 	.word	0x0800687c
  ldr r2, =_sbss
 8000c08:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c0c:	240000e8 	.word	0x240000e8

08000c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC3_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f980 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c20:	f002 f818 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8000c24:	4602      	mov	r2, r0
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_Init+0x68>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	4913      	ldr	r1, [pc, #76]	@ (8000c80 <HAL_Init+0x6c>)
 8000c32:	5ccb      	ldrb	r3, [r1, r3]
 8000c34:	f003 031f 	and.w	r3, r3, #31
 8000c38:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <HAL_Init+0x68>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	4a0e      	ldr	r2, [pc, #56]	@ (8000c80 <HAL_Init+0x6c>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_Init+0x70>)
 8000c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c58:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <HAL_Init+0x74>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f814 	bl	8000c8c <HAL_InitTick>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e002      	b.n	8000c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6e:	f7ff fe49 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	08006834 	.word	0x08006834
 8000c84:	24000004 	.word	0x24000004
 8000c88:	24000000 	.word	0x24000000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_InitTick+0x60>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e021      	b.n	8000ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_InitTick+0x64>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f965 	bl	8000f86 <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f92f 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <HAL_InitTick+0x68>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2400000c 	.word	0x2400000c
 8000cf0:	24000000 	.word	0x24000000
 8000cf4:	24000008 	.word	0x24000008

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2400000c 	.word	0x2400000c
 8000d1c:	240000e4 	.word	0x240000e4

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	240000e4 	.word	0x240000e4

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400000c 	.word	0x2400000c

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00
 8000dc4:	05fa0000 	.word	0x05fa0000

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	@ (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff29 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff40 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff90 	bl	8000e74 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5f 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff33 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa4 	bl	8000edc <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fa4:	f3bf 8f5f 	dmb	sy
}
 8000fa8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <HAL_MPU_Disable+0x28>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	4a06      	ldr	r2, [pc, #24]	@ (8000fc8 <HAL_MPU_Disable+0x28>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fb4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000fb6:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_MPU_Disable+0x2c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	e000ed90 	.word	0xe000ed90

08000fd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_MPU_Enable+0x38>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_MPU_Enable+0x3c>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe6:	4a09      	ldr	r2, [pc, #36]	@ (800100c <HAL_MPU_Enable+0x3c>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fee:	f3bf 8f4f 	dsb	sy
}
 8000ff2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ff4:	f3bf 8f6f 	isb	sy
}
 8000ff8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed90 	.word	0xe000ed90
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	785a      	ldrb	r2, [r3, #1]
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_MPU_ConfigRegion+0x7c>)
 800101e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_MPU_ConfigRegion+0x7c>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a19      	ldr	r2, [pc, #100]	@ (800108c <HAL_MPU_ConfigRegion+0x7c>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <HAL_MPU_ConfigRegion+0x7c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7adb      	ldrb	r3, [r3, #11]
 800103e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7a9b      	ldrb	r3, [r3, #10]
 8001046:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001048:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7b5b      	ldrb	r3, [r3, #13]
 800104e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001050:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7b9b      	ldrb	r3, [r3, #14]
 8001056:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001058:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7bdb      	ldrb	r3, [r3, #15]
 800105e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001060:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a5b      	ldrb	r3, [r3, #9]
 8001066:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001068:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7a1b      	ldrb	r3, [r3, #8]
 800106e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001070:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800107a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800107c:	6113      	str	r3, [r2, #16]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed90 	.word	0xe000ed90

08001090 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e054      	b.n	800114c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7f5b      	ldrb	r3, [r3, #29]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d105      	bne.n	80010b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fc40 	bl	8000938 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791b      	ldrb	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a22      	ldr	r2, [pc, #136]	@ (8001154 <HAL_CRC_Init+0xc4>)
 80010cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0218 	bic.w	r2, r2, #24
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	e00c      	b.n	80010fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6899      	ldr	r1, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	461a      	mov	r2, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f834 	bl	8001158 <HAL_CRCEx_Polynomial_Set>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e028      	b.n	800114c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f04f 32ff 	mov.w	r2, #4294967295
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	e004      	b.n	8001118 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6912      	ldr	r2, [r2, #16]
 8001116:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	04c11db7 	.word	0x04c11db7

08001158 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001168:	231f      	movs	r3, #31
 800116a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
 800117a:	e063      	b.n	8001244 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800117c:	bf00      	nop
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	613a      	str	r2, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_CRCEx_Polynomial_Set+0x44>
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b18      	cmp	r3, #24
 80011a0:	d846      	bhi.n	8001230 <HAL_CRCEx_Polynomial_Set+0xd8>
 80011a2:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	08001237 	.word	0x08001237
 80011ac:	08001231 	.word	0x08001231
 80011b0:	08001231 	.word	0x08001231
 80011b4:	08001231 	.word	0x08001231
 80011b8:	08001231 	.word	0x08001231
 80011bc:	08001231 	.word	0x08001231
 80011c0:	08001231 	.word	0x08001231
 80011c4:	08001231 	.word	0x08001231
 80011c8:	08001225 	.word	0x08001225
 80011cc:	08001231 	.word	0x08001231
 80011d0:	08001231 	.word	0x08001231
 80011d4:	08001231 	.word	0x08001231
 80011d8:	08001231 	.word	0x08001231
 80011dc:	08001231 	.word	0x08001231
 80011e0:	08001231 	.word	0x08001231
 80011e4:	08001231 	.word	0x08001231
 80011e8:	08001219 	.word	0x08001219
 80011ec:	08001231 	.word	0x08001231
 80011f0:	08001231 	.word	0x08001231
 80011f4:	08001231 	.word	0x08001231
 80011f8:	08001231 	.word	0x08001231
 80011fc:	08001231 	.word	0x08001231
 8001200:	08001231 	.word	0x08001231
 8001204:	08001231 	.word	0x08001231
 8001208:	0800120d 	.word	0x0800120d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b06      	cmp	r3, #6
 8001210:	d913      	bls.n	800123a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001216:	e010      	b.n	800123a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d90f      	bls.n	800123e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001222:	e00c      	b.n	800123e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d90b      	bls.n	8001242 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800122e:	e008      	b.n	8001242 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	75fb      	strb	r3, [r7, #23]
        break;
 8001234:	e006      	b.n	8001244 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001236:	bf00      	nop
 8001238:	e004      	b.n	8001244 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800123a:	bf00      	nop
 800123c:	e002      	b.n	8001244 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800123e:	bf00      	nop
 8001240:	e000      	b.n	8001244 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001242:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 0118 	bic.w	r1, r3, #24
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	430a      	orrs	r2, r1
 8001264:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001266:	7dfb      	ldrb	r3, [r7, #23]
}
 8001268:	4618      	mov	r0, r3
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fd50 	bl	8000d20 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e2dc      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e2cd      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a76      	ldr	r2, [pc, #472]	@ (8001488 <HAL_DMA_Abort+0x214>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d04a      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a74      	ldr	r2, [pc, #464]	@ (800148c <HAL_DMA_Abort+0x218>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d045      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a73      	ldr	r2, [pc, #460]	@ (8001490 <HAL_DMA_Abort+0x21c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d040      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a71      	ldr	r2, [pc, #452]	@ (8001494 <HAL_DMA_Abort+0x220>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d03b      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a70      	ldr	r2, [pc, #448]	@ (8001498 <HAL_DMA_Abort+0x224>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d036      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	@ (800149c <HAL_DMA_Abort+0x228>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6d      	ldr	r2, [pc, #436]	@ (80014a0 <HAL_DMA_Abort+0x22c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d02c      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6b      	ldr	r2, [pc, #428]	@ (80014a4 <HAL_DMA_Abort+0x230>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d027      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6a      	ldr	r2, [pc, #424]	@ (80014a8 <HAL_DMA_Abort+0x234>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a68      	ldr	r2, [pc, #416]	@ (80014ac <HAL_DMA_Abort+0x238>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01d      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a67      	ldr	r2, [pc, #412]	@ (80014b0 <HAL_DMA_Abort+0x23c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d018      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	@ (80014b4 <HAL_DMA_Abort+0x240>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a64      	ldr	r2, [pc, #400]	@ (80014b8 <HAL_DMA_Abort+0x244>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00e      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a62      	ldr	r2, [pc, #392]	@ (80014bc <HAL_DMA_Abort+0x248>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d009      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a61      	ldr	r2, [pc, #388]	@ (80014c0 <HAL_DMA_Abort+0x24c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d004      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5f      	ldr	r2, [pc, #380]	@ (80014c4 <HAL_DMA_Abort+0x250>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_DMA_Abort+0xda>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_DMA_Abort+0xdc>
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 021e 	bic.w	r2, r2, #30
 8001362:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001372:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00a      	b.n	8001392 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 020e 	bic.w	r2, r2, #14
 800138a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <HAL_DMA_Abort+0x214>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d072      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3a      	ldr	r2, [pc, #232]	@ (800148c <HAL_DMA_Abort+0x218>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d06d      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a39      	ldr	r2, [pc, #228]	@ (8001490 <HAL_DMA_Abort+0x21c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d068      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a37      	ldr	r2, [pc, #220]	@ (8001494 <HAL_DMA_Abort+0x220>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d063      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a36      	ldr	r2, [pc, #216]	@ (8001498 <HAL_DMA_Abort+0x224>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d05e      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a34      	ldr	r2, [pc, #208]	@ (800149c <HAL_DMA_Abort+0x228>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d059      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a33      	ldr	r2, [pc, #204]	@ (80014a0 <HAL_DMA_Abort+0x22c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d054      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a31      	ldr	r2, [pc, #196]	@ (80014a4 <HAL_DMA_Abort+0x230>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d04f      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a30      	ldr	r2, [pc, #192]	@ (80014a8 <HAL_DMA_Abort+0x234>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04a      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2e      	ldr	r2, [pc, #184]	@ (80014ac <HAL_DMA_Abort+0x238>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d045      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2d      	ldr	r2, [pc, #180]	@ (80014b0 <HAL_DMA_Abort+0x23c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d040      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2b      	ldr	r2, [pc, #172]	@ (80014b4 <HAL_DMA_Abort+0x240>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d03b      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2a      	ldr	r2, [pc, #168]	@ (80014b8 <HAL_DMA_Abort+0x244>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d036      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <HAL_DMA_Abort+0x248>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <HAL_DMA_Abort+0x24c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d02c      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a25      	ldr	r2, [pc, #148]	@ (80014c4 <HAL_DMA_Abort+0x250>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d027      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a24      	ldr	r2, [pc, #144]	@ (80014c8 <HAL_DMA_Abort+0x254>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <HAL_DMA_Abort+0x258>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01d      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a21      	ldr	r2, [pc, #132]	@ (80014d0 <HAL_DMA_Abort+0x25c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d018      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1f      	ldr	r2, [pc, #124]	@ (80014d4 <HAL_DMA_Abort+0x260>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1e      	ldr	r2, [pc, #120]	@ (80014d8 <HAL_DMA_Abort+0x264>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <HAL_DMA_Abort+0x268>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d009      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <HAL_DMA_Abort+0x26c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d004      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_DMA_Abort+0x270>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d132      	bne.n	80014e8 <HAL_DMA_Abort+0x274>
 8001482:	2301      	movs	r3, #1
 8001484:	e031      	b.n	80014ea <HAL_DMA_Abort+0x276>
 8001486:	bf00      	nop
 8001488:	40020010 	.word	0x40020010
 800148c:	40020028 	.word	0x40020028
 8001490:	40020040 	.word	0x40020040
 8001494:	40020058 	.word	0x40020058
 8001498:	40020070 	.word	0x40020070
 800149c:	40020088 	.word	0x40020088
 80014a0:	400200a0 	.word	0x400200a0
 80014a4:	400200b8 	.word	0x400200b8
 80014a8:	40020410 	.word	0x40020410
 80014ac:	40020428 	.word	0x40020428
 80014b0:	40020440 	.word	0x40020440
 80014b4:	40020458 	.word	0x40020458
 80014b8:	40020470 	.word	0x40020470
 80014bc:	40020488 	.word	0x40020488
 80014c0:	400204a0 	.word	0x400204a0
 80014c4:	400204b8 	.word	0x400204b8
 80014c8:	58025408 	.word	0x58025408
 80014cc:	5802541c 	.word	0x5802541c
 80014d0:	58025430 	.word	0x58025430
 80014d4:	58025444 	.word	0x58025444
 80014d8:	58025458 	.word	0x58025458
 80014dc:	5802546c 	.word	0x5802546c
 80014e0:	58025480 	.word	0x58025480
 80014e4:	58025494 	.word	0x58025494
 80014e8:	2300      	movs	r3, #0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6d      	ldr	r2, [pc, #436]	@ (80016b8 <HAL_DMA_Abort+0x444>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04a      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	@ (80016bc <HAL_DMA_Abort+0x448>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d045      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6a      	ldr	r2, [pc, #424]	@ (80016c0 <HAL_DMA_Abort+0x44c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d040      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	@ (80016c4 <HAL_DMA_Abort+0x450>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d03b      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a67      	ldr	r2, [pc, #412]	@ (80016c8 <HAL_DMA_Abort+0x454>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d036      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a65      	ldr	r2, [pc, #404]	@ (80016cc <HAL_DMA_Abort+0x458>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d031      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a64      	ldr	r2, [pc, #400]	@ (80016d0 <HAL_DMA_Abort+0x45c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d02c      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a62      	ldr	r2, [pc, #392]	@ (80016d4 <HAL_DMA_Abort+0x460>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d027      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a61      	ldr	r2, [pc, #388]	@ (80016d8 <HAL_DMA_Abort+0x464>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d022      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <HAL_DMA_Abort+0x468>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01d      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <HAL_DMA_Abort+0x46c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d018      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a5c      	ldr	r2, [pc, #368]	@ (80016e4 <HAL_DMA_Abort+0x470>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5b      	ldr	r2, [pc, #364]	@ (80016e8 <HAL_DMA_Abort+0x474>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00e      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a59      	ldr	r2, [pc, #356]	@ (80016ec <HAL_DMA_Abort+0x478>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d009      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a58      	ldr	r2, [pc, #352]	@ (80016f0 <HAL_DMA_Abort+0x47c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d004      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a56      	ldr	r2, [pc, #344]	@ (80016f4 <HAL_DMA_Abort+0x480>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d108      	bne.n	80015b0 <HAL_DMA_Abort+0x33c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e007      	b.n	80015c0 <HAL_DMA_Abort+0x34c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015c0:	e013      	b.n	80015ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c2:	f7ff fbad 	bl	8000d20 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d90c      	bls.n	80015ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e12d      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e5      	bne.n	80015c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2f      	ldr	r2, [pc, #188]	@ (80016b8 <HAL_DMA_Abort+0x444>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d04a      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2d      	ldr	r2, [pc, #180]	@ (80016bc <HAL_DMA_Abort+0x448>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d045      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2c      	ldr	r2, [pc, #176]	@ (80016c0 <HAL_DMA_Abort+0x44c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d040      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2a      	ldr	r2, [pc, #168]	@ (80016c4 <HAL_DMA_Abort+0x450>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d03b      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_DMA_Abort+0x454>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d036      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a27      	ldr	r2, [pc, #156]	@ (80016cc <HAL_DMA_Abort+0x458>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d031      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <HAL_DMA_Abort+0x45c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d02c      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_DMA_Abort+0x460>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d027      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a23      	ldr	r2, [pc, #140]	@ (80016d8 <HAL_DMA_Abort+0x464>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	@ (80016dc <HAL_DMA_Abort+0x468>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01d      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <HAL_DMA_Abort+0x46c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d018      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1e      	ldr	r2, [pc, #120]	@ (80016e4 <HAL_DMA_Abort+0x470>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1d      	ldr	r2, [pc, #116]	@ (80016e8 <HAL_DMA_Abort+0x474>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00e      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <HAL_DMA_Abort+0x478>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1a      	ldr	r2, [pc, #104]	@ (80016f0 <HAL_DMA_Abort+0x47c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d004      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <HAL_DMA_Abort+0x480>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_DMA_Abort+0x426>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_DMA_Abort+0x428>
 800169a:	2300      	movs	r3, #0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d02b      	beq.n	80016f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	223f      	movs	r2, #63	@ 0x3f
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	e02a      	b.n	800170e <HAL_DMA_Abort+0x49a>
 80016b8:	40020010 	.word	0x40020010
 80016bc:	40020028 	.word	0x40020028
 80016c0:	40020040 	.word	0x40020040
 80016c4:	40020058 	.word	0x40020058
 80016c8:	40020070 	.word	0x40020070
 80016cc:	40020088 	.word	0x40020088
 80016d0:	400200a0 	.word	0x400200a0
 80016d4:	400200b8 	.word	0x400200b8
 80016d8:	40020410 	.word	0x40020410
 80016dc:	40020428 	.word	0x40020428
 80016e0:	40020440 	.word	0x40020440
 80016e4:	40020458 	.word	0x40020458
 80016e8:	40020470 	.word	0x40020470
 80016ec:	40020488 	.word	0x40020488
 80016f0:	400204a0 	.word	0x400204a0
 80016f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2201      	movs	r2, #1
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a4f      	ldr	r2, [pc, #316]	@ (8001850 <HAL_DMA_Abort+0x5dc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d072      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a4d      	ldr	r2, [pc, #308]	@ (8001854 <HAL_DMA_Abort+0x5e0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d06d      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4c      	ldr	r2, [pc, #304]	@ (8001858 <HAL_DMA_Abort+0x5e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d068      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4a      	ldr	r2, [pc, #296]	@ (800185c <HAL_DMA_Abort+0x5e8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d063      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_DMA_Abort+0x5ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d05e      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a47      	ldr	r2, [pc, #284]	@ (8001864 <HAL_DMA_Abort+0x5f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d059      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a46      	ldr	r2, [pc, #280]	@ (8001868 <HAL_DMA_Abort+0x5f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d054      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a44      	ldr	r2, [pc, #272]	@ (800186c <HAL_DMA_Abort+0x5f8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d04f      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a43      	ldr	r2, [pc, #268]	@ (8001870 <HAL_DMA_Abort+0x5fc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04a      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a41      	ldr	r2, [pc, #260]	@ (8001874 <HAL_DMA_Abort+0x600>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d045      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a40      	ldr	r2, [pc, #256]	@ (8001878 <HAL_DMA_Abort+0x604>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d040      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3e      	ldr	r2, [pc, #248]	@ (800187c <HAL_DMA_Abort+0x608>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d03b      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3d      	ldr	r2, [pc, #244]	@ (8001880 <HAL_DMA_Abort+0x60c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3b      	ldr	r2, [pc, #236]	@ (8001884 <HAL_DMA_Abort+0x610>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a3a      	ldr	r2, [pc, #232]	@ (8001888 <HAL_DMA_Abort+0x614>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d02c      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a38      	ldr	r2, [pc, #224]	@ (800188c <HAL_DMA_Abort+0x618>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d027      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a37      	ldr	r2, [pc, #220]	@ (8001890 <HAL_DMA_Abort+0x61c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a35      	ldr	r2, [pc, #212]	@ (8001894 <HAL_DMA_Abort+0x620>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <HAL_DMA_Abort+0x624>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a32      	ldr	r2, [pc, #200]	@ (800189c <HAL_DMA_Abort+0x628>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a31      	ldr	r2, [pc, #196]	@ (80018a0 <HAL_DMA_Abort+0x62c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00e      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2f      	ldr	r2, [pc, #188]	@ (80018a4 <HAL_DMA_Abort+0x630>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d009      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2e      	ldr	r2, [pc, #184]	@ (80018a8 <HAL_DMA_Abort+0x634>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	@ (80018ac <HAL_DMA_Abort+0x638>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Abort+0x58e>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_DMA_Abort+0x590>
 8001802:	2300      	movs	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001810:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00c      	beq.n	8001834 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001828:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001832:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
 8001890:	58025408 	.word	0x58025408
 8001894:	5802541c 	.word	0x5802541c
 8001898:	58025430 	.word	0x58025430
 800189c:	58025444 	.word	0x58025444
 80018a0:	58025458 	.word	0x58025458
 80018a4:	5802546c 	.word	0x5802546c
 80018a8:	58025480 	.word	0x58025480
 80018ac:	58025494 	.word	0x58025494

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e237      	b.n	8001d32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2280      	movs	r2, #128	@ 0x80
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e22c      	b.n	8001d32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001a50 <HAL_DMA_Abort_IT+0x1a0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04a      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a54 <HAL_DMA_Abort_IT+0x1a4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d045      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a59      	ldr	r2, [pc, #356]	@ (8001a58 <HAL_DMA_Abort_IT+0x1a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <HAL_DMA_Abort_IT+0x1ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d03b      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	@ (8001a60 <HAL_DMA_Abort_IT+0x1b0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a55      	ldr	r2, [pc, #340]	@ (8001a64 <HAL_DMA_Abort_IT+0x1b4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d031      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a53      	ldr	r2, [pc, #332]	@ (8001a68 <HAL_DMA_Abort_IT+0x1b8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02c      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_DMA_Abort_IT+0x1bc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d027      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a50      	ldr	r2, [pc, #320]	@ (8001a70 <HAL_DMA_Abort_IT+0x1c0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4f      	ldr	r2, [pc, #316]	@ (8001a74 <HAL_DMA_Abort_IT+0x1c4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a4d      	ldr	r2, [pc, #308]	@ (8001a78 <HAL_DMA_Abort_IT+0x1c8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a7c <HAL_DMA_Abort_IT+0x1cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a4a      	ldr	r2, [pc, #296]	@ (8001a80 <HAL_DMA_Abort_IT+0x1d0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a49      	ldr	r2, [pc, #292]	@ (8001a84 <HAL_DMA_Abort_IT+0x1d4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a47      	ldr	r2, [pc, #284]	@ (8001a88 <HAL_DMA_Abort_IT+0x1d8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a46      	ldr	r2, [pc, #280]	@ (8001a8c <HAL_DMA_Abort_IT+0x1dc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_DMA_Abort_IT+0xcc>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_DMA_Abort_IT+0xce>
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8086 	beq.w	8001a90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <HAL_DMA_Abort_IT+0x1a0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d04a      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a54 <HAL_DMA_Abort_IT+0x1a4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d045      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a58 <HAL_DMA_Abort_IT+0x1a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d040      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2b      	ldr	r2, [pc, #172]	@ (8001a5c <HAL_DMA_Abort_IT+0x1ac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d03b      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a29      	ldr	r2, [pc, #164]	@ (8001a60 <HAL_DMA_Abort_IT+0x1b0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d036      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <HAL_DMA_Abort_IT+0x1b4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d031      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_DMA_Abort_IT+0x1b8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d02c      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a25      	ldr	r2, [pc, #148]	@ (8001a6c <HAL_DMA_Abort_IT+0x1bc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d027      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a23      	ldr	r2, [pc, #140]	@ (8001a70 <HAL_DMA_Abort_IT+0x1c0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d022      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_DMA_Abort_IT+0x1c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d01d      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <HAL_DMA_Abort_IT+0x1c8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d018      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <HAL_DMA_Abort_IT+0x1cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <HAL_DMA_Abort_IT+0x1d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00e      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_DMA_Abort_IT+0x1d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d009      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a88 <HAL_DMA_Abort_IT+0x1d8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d004      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a19      	ldr	r2, [pc, #100]	@ (8001a8c <HAL_DMA_Abort_IT+0x1dc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d108      	bne.n	8001a3e <HAL_DMA_Abort_IT+0x18e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e178      	b.n	8001d30 <HAL_DMA_Abort_IT+0x480>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e16f      	b.n	8001d30 <HAL_DMA_Abort_IT+0x480>
 8001a50:	40020010 	.word	0x40020010
 8001a54:	40020028 	.word	0x40020028
 8001a58:	40020040 	.word	0x40020040
 8001a5c:	40020058 	.word	0x40020058
 8001a60:	40020070 	.word	0x40020070
 8001a64:	40020088 	.word	0x40020088
 8001a68:	400200a0 	.word	0x400200a0
 8001a6c:	400200b8 	.word	0x400200b8
 8001a70:	40020410 	.word	0x40020410
 8001a74:	40020428 	.word	0x40020428
 8001a78:	40020440 	.word	0x40020440
 8001a7c:	40020458 	.word	0x40020458
 8001a80:	40020470 	.word	0x40020470
 8001a84:	40020488 	.word	0x40020488
 8001a88:	400204a0 	.word	0x400204a0
 8001a8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020e 	bic.w	r2, r2, #14
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	@ (8001c58 <HAL_DMA_Abort_IT+0x3a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d04a      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6b      	ldr	r2, [pc, #428]	@ (8001c5c <HAL_DMA_Abort_IT+0x3ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d045      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a69      	ldr	r2, [pc, #420]	@ (8001c60 <HAL_DMA_Abort_IT+0x3b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d040      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a68      	ldr	r2, [pc, #416]	@ (8001c64 <HAL_DMA_Abort_IT+0x3b4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d03b      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a66      	ldr	r2, [pc, #408]	@ (8001c68 <HAL_DMA_Abort_IT+0x3b8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d036      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <HAL_DMA_Abort_IT+0x3bc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d031      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	@ (8001c70 <HAL_DMA_Abort_IT+0x3c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02c      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a62      	ldr	r2, [pc, #392]	@ (8001c74 <HAL_DMA_Abort_IT+0x3c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d027      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a60      	ldr	r2, [pc, #384]	@ (8001c78 <HAL_DMA_Abort_IT+0x3c8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d022      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5f      	ldr	r2, [pc, #380]	@ (8001c7c <HAL_DMA_Abort_IT+0x3cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01d      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5d      	ldr	r2, [pc, #372]	@ (8001c80 <HAL_DMA_Abort_IT+0x3d0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a5c      	ldr	r2, [pc, #368]	@ (8001c84 <HAL_DMA_Abort_IT+0x3d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8001c88 <HAL_DMA_Abort_IT+0x3d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a59      	ldr	r2, [pc, #356]	@ (8001c8c <HAL_DMA_Abort_IT+0x3dc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a57      	ldr	r2, [pc, #348]	@ (8001c90 <HAL_DMA_Abort_IT+0x3e0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a56      	ldr	r2, [pc, #344]	@ (8001c94 <HAL_DMA_Abort_IT+0x3e4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d108      	bne.n	8001b52 <HAL_DMA_Abort_IT+0x2a2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_DMA_Abort_IT+0x2b2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3c      	ldr	r2, [pc, #240]	@ (8001c58 <HAL_DMA_Abort_IT+0x3a8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d072      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3a      	ldr	r2, [pc, #232]	@ (8001c5c <HAL_DMA_Abort_IT+0x3ac>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d06d      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	@ (8001c60 <HAL_DMA_Abort_IT+0x3b0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d068      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a37      	ldr	r2, [pc, #220]	@ (8001c64 <HAL_DMA_Abort_IT+0x3b4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d063      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a36      	ldr	r2, [pc, #216]	@ (8001c68 <HAL_DMA_Abort_IT+0x3b8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d05e      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a34      	ldr	r2, [pc, #208]	@ (8001c6c <HAL_DMA_Abort_IT+0x3bc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d059      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a33      	ldr	r2, [pc, #204]	@ (8001c70 <HAL_DMA_Abort_IT+0x3c0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d054      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a31      	ldr	r2, [pc, #196]	@ (8001c74 <HAL_DMA_Abort_IT+0x3c4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04f      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a30      	ldr	r2, [pc, #192]	@ (8001c78 <HAL_DMA_Abort_IT+0x3c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d04a      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <HAL_DMA_Abort_IT+0x3cc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d045      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2d      	ldr	r2, [pc, #180]	@ (8001c80 <HAL_DMA_Abort_IT+0x3d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d040      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001c84 <HAL_DMA_Abort_IT+0x3d4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d03b      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2a      	ldr	r2, [pc, #168]	@ (8001c88 <HAL_DMA_Abort_IT+0x3d8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d036      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a28      	ldr	r2, [pc, #160]	@ (8001c8c <HAL_DMA_Abort_IT+0x3dc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a27      	ldr	r2, [pc, #156]	@ (8001c90 <HAL_DMA_Abort_IT+0x3e0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d02c      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <HAL_DMA_Abort_IT+0x3e4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d027      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a24      	ldr	r2, [pc, #144]	@ (8001c98 <HAL_DMA_Abort_IT+0x3e8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <HAL_DMA_Abort_IT+0x3ec>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01d      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <HAL_DMA_Abort_IT+0x3f0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d018      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ca4 <HAL_DMA_Abort_IT+0x3f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca8 <HAL_DMA_Abort_IT+0x3f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	@ (8001cac <HAL_DMA_Abort_IT+0x3fc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_DMA_Abort_IT+0x400>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_DMA_Abort_IT+0x404>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d132      	bne.n	8001cb8 <HAL_DMA_Abort_IT+0x408>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e031      	b.n	8001cba <HAL_DMA_Abort_IT+0x40a>
 8001c56:	bf00      	nop
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	40020028 	.word	0x40020028
 8001c60:	40020040 	.word	0x40020040
 8001c64:	40020058 	.word	0x40020058
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	40020088 	.word	0x40020088
 8001c70:	400200a0 	.word	0x400200a0
 8001c74:	400200b8 	.word	0x400200b8
 8001c78:	40020410 	.word	0x40020410
 8001c7c:	40020428 	.word	0x40020428
 8001c80:	40020440 	.word	0x40020440
 8001c84:	40020458 	.word	0x40020458
 8001c88:	40020470 	.word	0x40020470
 8001c8c:	40020488 	.word	0x40020488
 8001c90:	400204a0 	.word	0x400204a0
 8001c94:	400204b8 	.word	0x400204b8
 8001c98:	58025408 	.word	0x58025408
 8001c9c:	5802541c 	.word	0x5802541c
 8001ca0:	58025430 	.word	0x58025430
 8001ca4:	58025444 	.word	0x58025444
 8001ca8:	58025458 	.word	0x58025458
 8001cac:	5802546c 	.word	0x5802546c
 8001cb0:	58025480 	.word	0x58025480
 8001cb4:	58025494 	.word	0x58025494
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d028      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d4a:	4b86      	ldr	r3, [pc, #536]	@ (8001f64 <HAL_GPIO_Init+0x228>)
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d4e:	e18c      	b.n	800206a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 817e 	beq.w	8002064 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x44>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d017      	beq.n	8001e1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d123      	bne.n	8001e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0203 	and.w	r2, r3, #3
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80d8 	beq.w	8002064 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <HAL_GPIO_Init+0x22c>)
 8001eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <HAL_GPIO_Init+0x22c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ec4:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_GPIO_Init+0x22c>)
 8001ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_GPIO_Init+0x230>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f70 <HAL_GPIO_Init+0x234>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04a      	beq.n	8001f94 <HAL_GPIO_Init+0x258>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1c      	ldr	r2, [pc, #112]	@ (8001f74 <HAL_GPIO_Init+0x238>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x222>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <HAL_GPIO_Init+0x23c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x21e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1a      	ldr	r2, [pc, #104]	@ (8001f7c <HAL_GPIO_Init+0x240>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_GPIO_Init+0x244>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <HAL_GPIO_Init+0x248>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <HAL_GPIO_Init+0x24c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a16      	ldr	r2, [pc, #88]	@ (8001f8c <HAL_GPIO_Init+0x250>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x20a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <HAL_GPIO_Init+0x254>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x206>
 8001f3e:	2309      	movs	r3, #9
 8001f40:	e029      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f42:	230a      	movs	r3, #10
 8001f44:	e027      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e025      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	e023      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f4e:	2305      	movs	r3, #5
 8001f50:	e021      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e01f      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e01d      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e01b      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e019      	b.n	8001f96 <HAL_GPIO_Init+0x25a>
 8001f62:	bf00      	nop
 8001f64:	58000080 	.word	0x58000080
 8001f68:	58024400 	.word	0x58024400
 8001f6c:	58000400 	.word	0x58000400
 8001f70:	58020000 	.word	0x58020000
 8001f74:	58020400 	.word	0x58020400
 8001f78:	58020800 	.word	0x58020800
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	58021000 	.word	0x58021000
 8001f84:	58021400 	.word	0x58021400
 8001f88:	58021800 	.word	0x58021800
 8001f8c:	58021c00 	.word	0x58021c00
 8001f90:	58022400 	.word	0x58022400
 8001f94:	2300      	movs	r3, #0
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	f002 0203 	and.w	r2, r2, #3
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4093      	lsls	r3, r2
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa6:	4938      	ldr	r1, [pc, #224]	@ (8002088 <HAL_GPIO_Init+0x34c>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002008:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	3301      	adds	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	f47f ae6b 	bne.w	8001d50 <HAL_GPIO_Init+0x14>
  }
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3724      	adds	r7, #36	@ 0x24
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	58000400 	.word	0x58000400

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00a      	beq.n	80020ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e01f      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e01d      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	490f      	ldr	r1, [pc, #60]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020fa:	f7fe fe11 	bl	8000d20 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002100:	e009      	b.n	8002116 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002102:	f7fe fe0d 	bl	8000d20 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002110:	d901      	bls.n	8002116 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e007      	b.n	8002126 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_PWREx_ConfigSupply+0x70>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002122:	d1ee      	bne.n	8002102 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	58024800 	.word	0x58024800

08002134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	@ 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e3c8      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800215e:	4b86      	ldr	r3, [pc, #536]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002166:	2b10      	cmp	r3, #16
 8002168:	d007      	beq.n	800217a <HAL_RCC_OscConfig+0x46>
 800216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216c:	2b18      	cmp	r3, #24
 800216e:	d110      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x12c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e3a2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x76>
 800219c:	4b76      	ldr	r3, [pc, #472]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a75      	ldr	r2, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b6e      	ldr	r3, [pc, #440]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6d      	ldr	r2, [pc, #436]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xbc>
 80021d6:	4b68      	ldr	r3, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a67      	ldr	r2, [pc, #412]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a64      	ldr	r2, [pc, #400]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd4>
 80021f0:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a60      	ldr	r2, [pc, #384]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a5d      	ldr	r2, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fd86 	bl	8000d20 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7fe fd82 	bl	8000d20 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	@ 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e356      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800222a:	4b53      	ldr	r3, [pc, #332]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe4>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fd72 	bl	8000d20 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe fd6e 	bl	8000d20 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e342      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002252:	4b49      	ldr	r3, [pc, #292]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x10c>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 808c 	beq.w	8002388 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002278:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227a:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_RCC_OscConfig+0x162>
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	2b18      	cmp	r3, #24
 800228a:	d137      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c8>
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d132      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x17a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e314      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ae:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0219 	bic.w	r2, r3, #25
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	492f      	ldr	r1, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fd2e 	bl	8000d20 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe fd2a 	bl	8000d20 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e2fe      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	4920      	ldr	r1, [pc, #128]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fa:	e045      	b.n	8002388 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d026      	beq.n	8002352 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002304:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 0219 	bic.w	r2, r3, #25
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4919      	ldr	r1, [pc, #100]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fd03 	bl	8000d20 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe fcff 	bl	8000d20 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e2d3      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	490b      	ldr	r1, [pc, #44]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e01a      	b.n	8002388 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <HAL_RCC_OscConfig+0x244>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fcdf 	bl	8000d20 <HAL_GetTick>
 8002362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe fcdb 	bl	8000d20 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d903      	bls.n	800237c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e2af      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
 8002378:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800237c:	4b96      	ldr	r3, [pc, #600]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ee      	bne.n	8002366 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d06a      	beq.n	800246a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002394:	4b90      	ldr	r3, [pc, #576]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800239c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800239e:	4b8e      	ldr	r3, [pc, #568]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_OscConfig+0x286>
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b18      	cmp	r3, #24
 80023ae:	d11b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2b4>
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d116      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ba:	4b87      	ldr	r3, [pc, #540]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x29e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	2b80      	cmp	r3, #128	@ 0x80
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e282      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023d2:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	497d      	ldr	r1, [pc, #500]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e6:	e040      	b.n	800246a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023f0:	4b79      	ldr	r3, [pc, #484]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a78      	ldr	r2, [pc, #480]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80023f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe fc90 	bl	8000d20 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002404:	f7fe fc8c 	bl	8000d20 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e260      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002416:	4b70      	ldr	r3, [pc, #448]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	4969      	ldr	r1, [pc, #420]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
 8002436:	e018      	b.n	800246a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002438:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a66      	ldr	r2, [pc, #408]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800243e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7fe fc6c 	bl	8000d20 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800244c:	f7fe fc68 	bl	8000d20 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e23c      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800245e:	4b5e      	ldr	r3, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d036      	beq.n	80024e4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d019      	beq.n	80024b2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002482:	4a55      	ldr	r2, [pc, #340]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe fc49 	bl	8000d20 <HAL_GetTick>
 800248e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe fc45 	bl	8000d20 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e219      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024a4:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x35e>
 80024b0:	e018      	b.n	80024e4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fc2f 	bl	8000d20 <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fc2b 	bl	8000d20 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1ff      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024d8:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d036      	beq.n	800255e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d019      	beq.n	800252c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024f8:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a36      	ldr	r2, [pc, #216]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80024fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002502:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002504:	f7fe fc0c 	bl	8000d20 <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250c:	f7fe fc08 	bl	8000d20 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e1dc      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800251e:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x3d8>
 800252a:	e018      	b.n	800255e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800252c:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a29      	ldr	r2, [pc, #164]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002536:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002538:	f7fe fbf2 	bl	8000d20 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002540:	f7fe fbee 	bl	8000d20 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1c2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8086 	beq.w	8002678 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800256c:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002576:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002578:	f7fe fbd2 	bl	8000d20 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe fbce 	bl	8000d20 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	@ 0x64
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1a2      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_OscConfig+0x4a8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x480>
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b2:	e032      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4ac>
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a02      	ldr	r2, [pc, #8]	@ (80025d8 <HAL_RCC_OscConfig+0x4a4>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e021      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 80025d6:	bf00      	nop
 80025d8:	58024400 	.word	0x58024400
 80025dc:	58024800 	.word	0x58024800
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_OscConfig+0x4ce>
 80025e8:	4b83      	ldr	r3, [pc, #524]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ec:	4a82      	ldr	r2, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f4:	4b80      	ldr	r3, [pc, #512]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	4a7f      	ldr	r2, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0x4e6>
 8002602:	4b7d      	ldr	r3, [pc, #500]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002606:	4a7c      	ldr	r2, [pc, #496]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	@ 0x70
 800260e:	4b7a      	ldr	r3, [pc, #488]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	4a79      	ldr	r2, [pc, #484]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fb7d 	bl	8000d20 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fb79 	bl	8000d20 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e14b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002640:	4b6d      	ldr	r3, [pc, #436]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ee      	beq.n	800262a <HAL_RCC_OscConfig+0x4f6>
 800264c:	e014      	b.n	8002678 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fb67 	bl	8000d20 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fb63 	bl	8000d20 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e135      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266c:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ee      	bne.n	8002656 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 812a 	beq.w	80028d6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	2b18      	cmp	r3, #24
 800268c:	f000 80ba 	beq.w	8002804 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	2b02      	cmp	r3, #2
 8002696:	f040 8095 	bne.w	80027c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b57      	ldr	r3, [pc, #348]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a56      	ldr	r2, [pc, #344]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7fe fb3b 	bl	8000d20 <HAL_GetTick>
 80026aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fb37 	bl	8000d20 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c0:	4b4d      	ldr	r3, [pc, #308]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026cc:	4b4a      	ldr	r3, [pc, #296]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <HAL_RCC_OscConfig+0x6c8>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	430a      	orrs	r2, r1
 80026e0:	4945      	ldr	r1, [pc, #276]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	628b      	str	r3, [r1, #40]	@ 0x28
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	3b01      	subs	r3, #1
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002700:	3b01      	subs	r3, #1
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270e:	3b01      	subs	r3, #1
 8002710:	061b      	lsls	r3, r3, #24
 8002712:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002716:	4938      	ldr	r1, [pc, #224]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800271c:	4b36      	ldr	r3, [pc, #216]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	4a35      	ldr	r2, [pc, #212]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002728:	4b33      	ldr	r3, [pc, #204]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800272c:	4b34      	ldr	r3, [pc, #208]	@ (8002800 <HAL_RCC_OscConfig+0x6cc>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002734:	00d2      	lsls	r2, r2, #3
 8002736:	4930      	ldr	r1, [pc, #192]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800273c:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	f023 020c 	bic.w	r2, r3, #12
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	492b      	ldr	r1, [pc, #172]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f023 0202 	bic.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4927      	ldr	r1, [pc, #156]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	4a24      	ldr	r2, [pc, #144]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800276c:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	4a21      	ldr	r2, [pc, #132]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	4a1e      	ldr	r2, [pc, #120]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002784:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800279a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe fac0 	bl	8000d20 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe fabc 	bl	8000d20 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e090      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x670>
 80027c2:	e088      	b.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe faa6 	bl	8000d20 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe faa2 	bl	8000d20 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e076      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ea:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_OscConfig+0x6c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x6a4>
 80027f6:	e06e      	b.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
 80027f8:	58024400 	.word	0x58024400
 80027fc:	fffffc0c 	.word	0xfffffc0c
 8002800:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002804:	4b36      	ldr	r3, [pc, #216]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800280a:	4b35      	ldr	r3, [pc, #212]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	2b01      	cmp	r3, #1
 8002816:	d031      	beq.n	800287c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d12a      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d122      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d11a      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0a5b      	lsrs	r3, r3, #9
 800284a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002852:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d111      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d108      	bne.n	800287c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0e1b      	lsrs	r3, r3, #24
 800286e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e02b      	b.n	80028d8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800288a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d01f      	beq.n	80028d6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	4a11      	ldr	r2, [pc, #68]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a2:	f7fe fa3d 	bl	8000d20 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028a8:	bf00      	nop
 80028aa:	f7fe fa39 	bl	8000d20 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d0f9      	beq.n	80028aa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_RCC_OscConfig+0x7b0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028c2:	00d2      	lsls	r2, r2, #3
 80028c4:	4906      	ldr	r1, [pc, #24]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <HAL_RCC_OscConfig+0x7ac>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3730      	adds	r7, #48	@ 0x30
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	58024400 	.word	0x58024400
 80028e4:	ffff0007 	.word	0xffff0007

080028e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e19c      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b87      	ldr	r3, [pc, #540]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 020f 	bic.w	r2, r3, #15
 8002912:	4985      	ldr	r1, [pc, #532]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e184      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002948:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	4975      	ldr	r1, [pc, #468]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002956:	4313      	orrs	r3, r2
 8002958:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d010      	beq.n	8002988 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	4b70      	ldr	r3, [pc, #448]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002972:	429a      	cmp	r2, r3
 8002974:	d908      	bls.n	8002988 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002976:	4b6d      	ldr	r3, [pc, #436]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	496a      	ldr	r1, [pc, #424]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002984:	4313      	orrs	r3, r2
 8002986:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	4b64      	ldr	r3, [pc, #400]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029a4:	4b61      	ldr	r3, [pc, #388]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	495e      	ldr	r1, [pc, #376]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69da      	ldr	r2, [r3, #28]
 80029c6:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d908      	bls.n	80029e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029d2:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4953      	ldr	r1, [pc, #332]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d908      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f023 020f 	bic.w	r2, r3, #15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4947      	ldr	r1, [pc, #284]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d055      	beq.n	8002aca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a1e:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4940      	ldr	r1, [pc, #256]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a38:	4b3c      	ldr	r3, [pc, #240]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d121      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0f6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d107      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d115      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0ea      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a68:	4b30      	ldr	r3, [pc, #192]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0de      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a78:	4b2c      	ldr	r3, [pc, #176]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d6      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a88:	4b28      	ldr	r3, [pc, #160]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f023 0207 	bic.w	r2, r3, #7
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4925      	ldr	r1, [pc, #148]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9a:	f7fe f941 	bl	8000d20 <HAL_GetTick>
 8002a9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa2:	f7fe f93d 	bl	8000d20 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0be      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d1eb      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	4b14      	ldr	r3, [pc, #80]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d208      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_RCC_ClockConfig+0x244>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d214      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 020f 	bic.w	r2, r3, #15
 8002b0e:	4906      	ldr	r1, [pc, #24]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e086      	b.n	8002c36 <HAL_RCC_ClockConfig+0x34e>
 8002b28:	52002000 	.word	0x52002000
 8002b2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d208      	bcs.n	8002b5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4939      	ldr	r1, [pc, #228]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b34      	ldr	r3, [pc, #208]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d208      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b7a:	4b31      	ldr	r3, [pc, #196]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	492e      	ldr	r1, [pc, #184]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	4b28      	ldr	r3, [pc, #160]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d208      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ba8:	4b25      	ldr	r3, [pc, #148]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4922      	ldr	r1, [pc, #136]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	4b1d      	ldr	r3, [pc, #116]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d208      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4917      	ldr	r1, [pc, #92]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002be8:	f000 f834 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	4912      	ldr	r1, [pc, #72]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <HAL_RCC_ClockConfig+0x358>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_RCC_ClockConfig+0x35c>)
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_RCC_ClockConfig+0x360>)
 8002c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_RCC_ClockConfig+0x364>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_RCC_ClockConfig+0x368>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f82e 	bl	8000c8c <HAL_InitTick>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400
 8002c44:	08006834 	.word	0x08006834
 8002c48:	24000004 	.word	0x24000004
 8002c4c:	24000000 	.word	0x24000000
 8002c50:	24000008 	.word	0x24000008

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5a:	4bb3      	ldr	r3, [pc, #716]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c62:	2b18      	cmp	r3, #24
 8002c64:	f200 8155 	bhi.w	8002f12 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c68:	a201      	add	r2, pc, #4	@ (adr r2, 8002c70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002cd5 	.word	0x08002cd5
 8002c74:	08002f13 	.word	0x08002f13
 8002c78:	08002f13 	.word	0x08002f13
 8002c7c:	08002f13 	.word	0x08002f13
 8002c80:	08002f13 	.word	0x08002f13
 8002c84:	08002f13 	.word	0x08002f13
 8002c88:	08002f13 	.word	0x08002f13
 8002c8c:	08002f13 	.word	0x08002f13
 8002c90:	08002cfb 	.word	0x08002cfb
 8002c94:	08002f13 	.word	0x08002f13
 8002c98:	08002f13 	.word	0x08002f13
 8002c9c:	08002f13 	.word	0x08002f13
 8002ca0:	08002f13 	.word	0x08002f13
 8002ca4:	08002f13 	.word	0x08002f13
 8002ca8:	08002f13 	.word	0x08002f13
 8002cac:	08002f13 	.word	0x08002f13
 8002cb0:	08002d01 	.word	0x08002d01
 8002cb4:	08002f13 	.word	0x08002f13
 8002cb8:	08002f13 	.word	0x08002f13
 8002cbc:	08002f13 	.word	0x08002f13
 8002cc0:	08002f13 	.word	0x08002f13
 8002cc4:	08002f13 	.word	0x08002f13
 8002cc8:	08002f13 	.word	0x08002f13
 8002ccc:	08002f13 	.word	0x08002f13
 8002cd0:	08002d07 	.word	0x08002d07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd4:	4b94      	ldr	r3, [pc, #592]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ce0:	4b91      	ldr	r3, [pc, #580]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	4a90      	ldr	r2, [pc, #576]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cf2:	e111      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cf6:	61bb      	str	r3, [r7, #24]
      break;
 8002cf8:	e10e      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cfc:	61bb      	str	r3, [r7, #24]
      break;
 8002cfe:	e10b      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d00:	4b8c      	ldr	r3, [pc, #560]	@ (8002f34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e108      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d10:	4b85      	ldr	r3, [pc, #532]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d1c:	4b82      	ldr	r3, [pc, #520]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d26:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2a:	08db      	lsrs	r3, r3, #3
 8002d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80e1 	beq.w	8002f0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f000 8083 	beq.w	8002e58 <HAL_RCC_GetSysClockFreq+0x204>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f200 80a1 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x248>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x114>
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d056      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d66:	e099      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d68:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d02d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d74:	4b6c      	ldr	r3, [pc, #432]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d9e:	4b62      	ldr	r3, [pc, #392]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002db2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dce:	e087      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002de2:	4b51      	ldr	r3, [pc, #324]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002df6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e12:	e065      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e1e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e26:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e3a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e56:	e043      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e62:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e9a:	e021      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ec2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ede:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	0a5b      	lsrs	r3, r3, #9
 8002ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eea:	3301      	adds	r3, #1
 8002eec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f04:	ee17 3a90 	vmov	r3, s15
 8002f08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
      break;
 8002f10:	e002      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f14:	61bb      	str	r3, [r7, #24]
      break;
 8002f16:	bf00      	nop
  }

  return sysclockfreq;
 8002f18:	69bb      	ldr	r3, [r7, #24]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	03d09000 	.word	0x03d09000
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	017d7840 	.word	0x017d7840
 8002f38:	46000000 	.word	0x46000000
 8002f3c:	4c742400 	.word	0x4c742400
 8002f40:	4a742400 	.word	0x4a742400
 8002f44:	4bbebc20 	.word	0x4bbebc20

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f4e:	f7ff fe81 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490f      	ldr	r1, [pc, #60]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	4a09      	ldr	r2, [pc, #36]	@ (8002f9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f76:	5cd3      	ldrb	r3, [r2, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f86:	4a07      	ldr	r2, [pc, #28]	@ (8002fa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	08006834 	.word	0x08006834
 8002fa0:	24000004 	.word	0x24000004
 8002fa4:	24000000 	.word	0x24000000

08002fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fac:	f7ff ffcc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4904      	ldr	r1, [pc, #16]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	08006834 	.word	0x08006834

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fd8:	f7ff ffb6 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4904      	ldr	r1, [pc, #16]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	08006834 	.word	0x08006834

08003000 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b0c6      	sub	sp, #280	@ 0x118
 8003006:	af00      	add	r7, sp, #0
 8003008:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003024:	2500      	movs	r5, #0
 8003026:	ea54 0305 	orrs.w	r3, r4, r5
 800302a:	d049      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800302c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003036:	d02f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003038:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800303c:	d828      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800303e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003042:	d01a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003044:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003048:	d822      	bhi.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003052:	d007      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003054:	e01c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003056:	4bab      	ldr	r3, [pc, #684]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	4aaa      	ldr	r2, [pc, #680]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003062:	e01a      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003068:	3308      	adds	r3, #8
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f001 fc25 	bl	80048bc <RCCEx_PLL2_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003078:	e00f      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800307a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800307e:	3328      	adds	r3, #40	@ 0x28
 8003080:	2102      	movs	r1, #2
 8003082:	4618      	mov	r0, r3
 8003084:	f001 fccc 	bl	8004a20 <RCCEx_PLL3_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800308e:	e004      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030a2:	4b98      	ldr	r3, [pc, #608]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030b0:	4a94      	ldr	r2, [pc, #592]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030b2:	430b      	orrs	r3, r1
 80030b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80030b6:	e003      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80030bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80030cc:	f04f 0900 	mov.w	r9, #0
 80030d0:	ea58 0309 	orrs.w	r3, r8, r9
 80030d4:	d047      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d82a      	bhi.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310b 	.word	0x0800310b
 80030f0:	08003121 	.word	0x08003121
 80030f4:	0800313f 	.word	0x0800313f
 80030f8:	0800313f 	.word	0x0800313f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b81      	ldr	r3, [pc, #516]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	4a80      	ldr	r2, [pc, #512]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003108:	e01a      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800310e:	3308      	adds	r3, #8
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f001 fbd2 	bl	80048bc <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800311e:	e00f      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003124:	3328      	adds	r3, #40	@ 0x28
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fc79 	bl	8004a20 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003134:	e004      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800313c:	e000      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800313e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003148:	4b6e      	ldr	r3, [pc, #440]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800314a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314c:	f023 0107 	bic.w	r1, r3, #7
 8003150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	4a6b      	ldr	r2, [pc, #428]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003158:	430b      	orrs	r3, r1
 800315a:	6513      	str	r3, [r2, #80]	@ 0x50
 800315c:	e003      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003162:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003172:	f04f 0b00 	mov.w	fp, #0
 8003176:	ea5a 030b 	orrs.w	r3, sl, fp
 800317a:	d05b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003184:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003188:	d03b      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800318a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800318e:	d834      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003190:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003194:	d037      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800319a:	d82e      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800319c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80031a0:	d033      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80031a6:	d828      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031ac:	d01a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b2:	d822      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80031b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031bc:	d007      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80031be:	e01c      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c0:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031cc:	e01e      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	3308      	adds	r3, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fb70 	bl	80048bc <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031e2:	e013      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fc17 	bl	8004a20 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f8:	e008      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003200:	e004      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003202:	bf00      	nop
 8003204:	e002      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003206:	bf00      	nop
 8003208:	e000      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800320a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800320c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10b      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800321c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003224:	4a37      	ldr	r2, [pc, #220]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003226:	430b      	orrs	r3, r1
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	e003      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003240:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003244:	2300      	movs	r3, #0
 8003246:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800324a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800324e:	460b      	mov	r3, r1
 8003250:	4313      	orrs	r3, r2
 8003252:	d05d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003258:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800325c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003260:	d03b      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003262:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003266:	d834      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800326c:	d037      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800326e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003272:	d82e      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003274:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003278:	d033      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800327a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800327e:	d828      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003284:	d01a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003286:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800328a:	d822      	bhi.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003294:	d007      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003296:	e01c      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003298:	4b1a      	ldr	r3, [pc, #104]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800329e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032a4:	e01e      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032aa:	3308      	adds	r3, #8
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fb04 	bl	80048bc <RCCEx_PLL2_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032ba:	e013      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fbab 	bl	8004a20 <RCCEx_PLL3_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d0:	e008      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032d8:	e004      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80032f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032fc:	4a01      	ldr	r2, [pc, #4]	@ (8003304 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fe:	430b      	orrs	r3, r1
 8003300:	6593      	str	r3, [r2, #88]	@ 0x58
 8003302:	e005      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800330c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800331c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003326:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800332a:	460b      	mov	r3, r1
 800332c:	4313      	orrs	r3, r2
 800332e:	d03a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	2b30      	cmp	r3, #48	@ 0x30
 8003338:	d01f      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800333a:	2b30      	cmp	r3, #48	@ 0x30
 800333c:	d819      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800333e:	2b20      	cmp	r3, #32
 8003340:	d00c      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d815      	bhi.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d019      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800334a:	2b10      	cmp	r3, #16
 800334c:	d111      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334e:	4baa      	ldr	r3, [pc, #680]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	4aa9      	ldr	r2, [pc, #676]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003358:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800335a:	e011      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800335c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003360:	3308      	adds	r3, #8
 8003362:	2102      	movs	r1, #2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 faa9 	bl	80048bc <RCCEx_PLL2_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003378:	e002      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800337e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003380:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003388:	4b9b      	ldr	r3, [pc, #620]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	4a98      	ldr	r2, [pc, #608]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003398:	430b      	orrs	r3, r1
 800339a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80033b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80033bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d051      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80033c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033d0:	d035      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80033d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033d6:	d82e      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033dc:	d031      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80033de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033e2:	d828      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e8:	d01a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033ee:	d822      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80033f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f8:	d007      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80033fa:	e01c      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fc:	4b7e      	ldr	r3, [pc, #504]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	4a7d      	ldr	r2, [pc, #500]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003408:	e01c      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340e:	3308      	adds	r3, #8
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f001 fa52 	bl	80048bc <RCCEx_PLL2_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800341e:	e011      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003424:	3328      	adds	r3, #40	@ 0x28
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f001 faf9 	bl	8004a20 <RCCEx_PLL3_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800344c:	4b6a      	ldr	r3, [pc, #424]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003450:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	4a67      	ldr	r2, [pc, #412]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003466:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800346a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003476:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003480:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d053      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800348a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003494:	d033      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800349a:	d82c      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800349c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a0:	d02f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80034a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034a6:	d826      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034ac:	d02b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80034ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80034b2:	d820      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034b8:	d012      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80034ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034be:	d81a      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d115      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ce:	3308      	adds	r3, #8
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f9f2 	bl	80048bc <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034de:	e015      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e4:	3328      	adds	r3, #40	@ 0x28
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fa99 	bl	8004a20 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034fc:	e006      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003514:	4b38      	ldr	r3, [pc, #224]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003518:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003522:	4a35      	ldr	r2, [pc, #212]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6513      	str	r3, [r2, #80]	@ 0x50
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800353e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003548:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d058      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d033      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003564:	d82c      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356a:	d02f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003570:	d826      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003576:	d02b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800357c:	d820      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003582:	d012      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003588:	d81a      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d022      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003592:	d115      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	3308      	adds	r3, #8
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f001 f98d 	bl	80048bc <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035a8:	e015      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ae:	3328      	adds	r3, #40	@ 0x28
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fa34 	bl	8004a20 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035be:	e00a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035c6:	e006      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035c8:	bf00      	nop
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035ee:	4a02      	ldr	r2, [pc, #8]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003610:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003614:	2300      	movs	r3, #0
 8003616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800361a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800361e:	460b      	mov	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	d037      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003628:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800362a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800362e:	d00e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003634:	d816      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800363a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800363e:	d111      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4bc4      	ldr	r3, [pc, #784]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4ac3      	ldr	r2, [pc, #780]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800364c:	e00f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003652:	3308      	adds	r3, #8
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f930 	bl	80048bc <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003676:	4bb7      	ldr	r3, [pc, #732]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003684:	4ab3      	ldr	r2, [pc, #716]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003686:	430b      	orrs	r3, r1
 8003688:	6513      	str	r3, [r2, #80]	@ 0x50
 800368a:	e003      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80036a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	d039      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d81c      	bhi.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80036be:	a201      	add	r2, pc, #4	@ (adr r2, 80036c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	08003701 	.word	0x08003701
 80036c8:	080036d5 	.word	0x080036d5
 80036cc:	080036e3 	.word	0x080036e3
 80036d0:	08003701 	.word	0x08003701
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d4:	4b9f      	ldr	r3, [pc, #636]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d8:	4a9e      	ldr	r2, [pc, #632]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036e0:	e00f      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e6:	3308      	adds	r3, #8
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f8e6 	bl	80048bc <RCCEx_PLL2_Config>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036f6:	e004      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800370a:	4b92      	ldr	r3, [pc, #584]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800370c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370e:	f023 0103 	bic.w	r1, r3, #3
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003718:	4a8e      	ldr	r2, [pc, #568]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800371a:	430b      	orrs	r3, r1
 800371c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800373e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	f000 8099 	beq.w	800387c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800374a:	4b83      	ldr	r3, [pc, #524]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a82      	ldr	r2, [pc, #520]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003756:	f7fd fae3 	bl	8000d20 <HAL_GetTick>
 800375a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800375e:	e00b      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fd fade 	bl	8000d20 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	@ 0x64
 800376e:	d903      	bls.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003776:	e005      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003778:	4b77      	ldr	r3, [pc, #476]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ed      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003788:	2b00      	cmp	r3, #0
 800378a:	d173      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800378c:	4b71      	ldr	r3, [pc, #452]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800378e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003798:	4053      	eors	r3, r2
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037aa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ae:	4b69      	ldr	r3, [pc, #420]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b2:	4a68      	ldr	r2, [pc, #416]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	4b66      	ldr	r3, [pc, #408]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	4a65      	ldr	r2, [pc, #404]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037c6:	4a63      	ldr	r2, [pc, #396]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037da:	d118      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd faa0 	bl	8000d20 <HAL_GetTick>
 80037e0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e4:	e00d      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd fa9b 	bl	8000d20 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d903      	bls.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003800:	e005      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003802:	4b54      	ldr	r3, [pc, #336]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0eb      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800380e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003812:	2b00      	cmp	r3, #0
 8003814:	d129      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800381a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800381e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003826:	d10e      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003828:	4b4a      	ldr	r3, [pc, #296]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003838:	091a      	lsrs	r2, r3, #4
 800383a:	4b48      	ldr	r3, [pc, #288]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800383c:	4013      	ands	r3, r2
 800383e:	4a45      	ldr	r2, [pc, #276]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6113      	str	r3, [r2, #16]
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	4a42      	ldr	r2, [pc, #264]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800384c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003850:	6113      	str	r3, [r2, #16]
 8003852:	4b40      	ldr	r3, [pc, #256]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003854:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	4a3c      	ldr	r2, [pc, #240]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003864:	430b      	orrs	r3, r1
 8003866:	6713      	str	r3, [r2, #112]	@ 0x70
 8003868:	e008      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003872:	e003      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800387c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f002 0301 	and.w	r3, r2, #1
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003892:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003896:	460b      	mov	r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	f000 808f 	beq.w	80039bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800389e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a4:	2b28      	cmp	r3, #40	@ 0x28
 80038a6:	d871      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80038a8:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	08003995 	.word	0x08003995
 80038b4:	0800398d 	.word	0x0800398d
 80038b8:	0800398d 	.word	0x0800398d
 80038bc:	0800398d 	.word	0x0800398d
 80038c0:	0800398d 	.word	0x0800398d
 80038c4:	0800398d 	.word	0x0800398d
 80038c8:	0800398d 	.word	0x0800398d
 80038cc:	0800398d 	.word	0x0800398d
 80038d0:	08003961 	.word	0x08003961
 80038d4:	0800398d 	.word	0x0800398d
 80038d8:	0800398d 	.word	0x0800398d
 80038dc:	0800398d 	.word	0x0800398d
 80038e0:	0800398d 	.word	0x0800398d
 80038e4:	0800398d 	.word	0x0800398d
 80038e8:	0800398d 	.word	0x0800398d
 80038ec:	0800398d 	.word	0x0800398d
 80038f0:	08003977 	.word	0x08003977
 80038f4:	0800398d 	.word	0x0800398d
 80038f8:	0800398d 	.word	0x0800398d
 80038fc:	0800398d 	.word	0x0800398d
 8003900:	0800398d 	.word	0x0800398d
 8003904:	0800398d 	.word	0x0800398d
 8003908:	0800398d 	.word	0x0800398d
 800390c:	0800398d 	.word	0x0800398d
 8003910:	08003995 	.word	0x08003995
 8003914:	0800398d 	.word	0x0800398d
 8003918:	0800398d 	.word	0x0800398d
 800391c:	0800398d 	.word	0x0800398d
 8003920:	0800398d 	.word	0x0800398d
 8003924:	0800398d 	.word	0x0800398d
 8003928:	0800398d 	.word	0x0800398d
 800392c:	0800398d 	.word	0x0800398d
 8003930:	08003995 	.word	0x08003995
 8003934:	0800398d 	.word	0x0800398d
 8003938:	0800398d 	.word	0x0800398d
 800393c:	0800398d 	.word	0x0800398d
 8003940:	0800398d 	.word	0x0800398d
 8003944:	0800398d 	.word	0x0800398d
 8003948:	0800398d 	.word	0x0800398d
 800394c:	0800398d 	.word	0x0800398d
 8003950:	08003995 	.word	0x08003995
 8003954:	58024400 	.word	0x58024400
 8003958:	58024800 	.word	0x58024800
 800395c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003964:	3308      	adds	r3, #8
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 ffa7 	bl	80048bc <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003974:	e00f      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	3328      	adds	r3, #40	@ 0x28
 800397c:	2101      	movs	r1, #1
 800397e:	4618      	mov	r0, r3
 8003980:	f001 f84e 	bl	8004a20 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800398a:	e004      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10a      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800399e:	4bbf      	ldr	r3, [pc, #764]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80039a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ac:	4abb      	ldr	r2, [pc, #748]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80039b2:	e003      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f002 0302 	and.w	r3, r2, #2
 80039c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	d041      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d824      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80039e6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a39 	.word	0x08003a39
 80039f0:	08003a05 	.word	0x08003a05
 80039f4:	08003a1b 	.word	0x08003a1b
 80039f8:	08003a39 	.word	0x08003a39
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a39 	.word	0x08003a39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a08:	3308      	adds	r3, #8
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ff55 	bl	80048bc <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a1e:	3328      	adds	r3, #40	@ 0x28
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fffc 	bl	8004a20 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a42:	4b96      	ldr	r3, [pc, #600]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a46:	f023 0107 	bic.w	r1, r3, #7
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a50:	4a92      	ldr	r2, [pc, #584]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f002 0304 	and.w	r3, r2, #4
 8003a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d044      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d825      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003aad 	.word	0x08003aad
 8003a9c:	08003ac3 	.word	0x08003ac3
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ff01 	bl	80048bc <RCCEx_PLL2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac6:	3328      	adds	r3, #40	@ 0x28
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ffa8 	bl	8004a20 <RCCEx_PLL3_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aea:	4b6c      	ldr	r3, [pc, #432]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f023 0107 	bic.w	r1, r3, #7
 8003af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afa:	4a68      	ldr	r2, [pc, #416]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b00:	e003      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b12:	f002 0320 	and.w	r3, r2, #32
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003b20:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d055      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b36:	d033      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b3c:	d82c      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b42:	d02f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d826      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b4e:	d02b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b54:	d820      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b5a:	d012      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b60:	d81a      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d022      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b6a:	d115      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b70:	3308      	adds	r3, #8
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fea1 	bl	80048bc <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b80:	e015      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b86:	3328      	adds	r3, #40	@ 0x28
 8003b88:	2102      	movs	r1, #2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 ff48 	bl	8004a20 <RCCEx_PLL3_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b96:	e00a      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b9e:	e006      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e004      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e002      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb6:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc6:	4a35      	ldr	r2, [pc, #212]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bcc:	e003      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003be2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003be6:	2300      	movs	r3, #0
 8003be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	d058      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c02:	d033      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003c08:	d82c      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0e:	d02f      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c14:	d826      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c1a:	d02b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c20:	d820      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c26:	d012      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c2c:	d81a      	bhi.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d022      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	d115      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fe3b 	bl	80048bc <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e015      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c52:	3328      	adds	r3, #40	@ 0x28
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fee2 	bl	8004a20 <RCCEx_PLL3_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c62:	e00a      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c6a:	e006      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c6c:	bf00      	nop
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c70:	bf00      	nop
 8003c72:	e002      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10e      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c82:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c92:	4a02      	ldr	r2, [pc, #8]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003cb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cbe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	d055      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003cd4:	d033      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003cd6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003cda:	d82c      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce0:	d02f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce6:	d826      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ce8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003cec:	d02b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003cee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003cf2:	d820      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf8:	d012      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003cfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cfe:	d81a      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d08:	d115      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	3308      	adds	r3, #8
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fdd2 	bl	80048bc <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e015      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d24:	3328      	adds	r3, #40	@ 0x28
 8003d26:	2102      	movs	r1, #2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fe79 	bl	8004a20 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d34:	e00a      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d54:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d64:	4a9c      	ldr	r2, [pc, #624]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 0308 	and.w	r3, r2, #8
 8003d80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003d8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d01e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da6:	3328      	adds	r3, #40	@ 0x28
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fe38 	bl	8004a20 <RCCEx_PLL3_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003dbc:	4b86      	ldr	r3, [pc, #536]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dcc:	4a82      	ldr	r2, [pc, #520]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f002 0310 	and.w	r3, r2, #16
 8003dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d01e      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e04:	3328      	adds	r3, #40	@ 0x28
 8003e06:	2102      	movs	r1, #2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fe09 	bl	8004a20 <RCCEx_PLL3_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2a:	4a6b      	ldr	r2, [pc, #428]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e3e:	2300      	movs	r3, #0
 8003e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e42:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	d03e      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e58:	d022      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e5e:	d81b      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003e6a:	e015      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e70:	3308      	adds	r3, #8
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fd21 	bl	80048bc <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	3328      	adds	r3, #40	@ 0x28
 8003e88:	2102      	movs	r1, #2
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fdc8 	bl	8004a20 <RCCEx_PLL3_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003eba:	4a47      	ldr	r2, [pc, #284]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ebc:	430b      	orrs	r3, r1
 8003ebe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec0:	e003      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ec6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ed8:	2300      	movs	r3, #0
 8003eda:	677b      	str	r3, [r7, #116]	@ 0x74
 8003edc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ef2:	d01f      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ef8:	d818      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003efe:	d003      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f04:	d007      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f06:	e011      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0c:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f14:	e00f      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	3328      	adds	r3, #40	@ 0x28
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fd7e 	bl	8004a20 <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f3e:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4e:	4a22      	ldr	r2, [pc, #136]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f70:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f74:	460b      	mov	r3, r1
 8003f76:	4313      	orrs	r3, r2
 8003f78:	d034      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f88:	d007      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f8a:	e011      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f8c:	4b12      	ldr	r3, [pc, #72]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f98:	e00e      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fc8a 	bl	80048bc <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003fae:	e003      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fce:	4a02      	ldr	r2, [pc, #8]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd4:	e006      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003fd6:	bf00      	nop
 8003fd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ff6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d00c      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	3328      	adds	r3, #40	@ 0x28
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd09 	bl	8004a20 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800401a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004026:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004028:	2300      	movs	r3, #0
 800402a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800402c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d036      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800403a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800403c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004040:	d018      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004046:	d811      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d014      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800404e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004052:	d80b      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d011      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800405c:	d106      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800405e:	4bb7      	ldr	r3, [pc, #732]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	4ab6      	ldr	r2, [pc, #728]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800406a:	e008      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004086:	4bad      	ldr	r3, [pc, #692]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800408e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004094:	4aa9      	ldr	r2, [pc, #676]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004096:	430b      	orrs	r3, r1
 8004098:	6553      	str	r3, [r2, #84]	@ 0x54
 800409a:	e003      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80040b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80040b2:	2300      	movs	r3, #0
 80040b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c0:	4b9e      	ldr	r3, [pc, #632]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ce:	4a9b      	ldr	r2, [pc, #620]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80040e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e2:	2300      	movs	r3, #0
 80040e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80040ea:	460b      	mov	r3, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f0:	4b92      	ldr	r3, [pc, #584]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80040f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fe:	4a8f      	ldr	r2, [pc, #572]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004100:	430b      	orrs	r3, r1
 8004102:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004110:	643b      	str	r3, [r7, #64]	@ 0x40
 8004112:	2300      	movs	r3, #0
 8004114:	647b      	str	r3, [r7, #68]	@ 0x44
 8004116:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800411a:	460b      	mov	r3, r1
 800411c:	4313      	orrs	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004120:	4b86      	ldr	r3, [pc, #536]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	4a85      	ldr	r2, [pc, #532]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800412a:	6113      	str	r3, [r2, #16]
 800412c:	4b83      	ldr	r3, [pc, #524]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800412e:	6919      	ldr	r1, [r3, #16]
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004134:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004138:	4a80      	ldr	r2, [pc, #512]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800414c:	2300      	movs	r3, #0
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004150:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800415a:	4b78      	ldr	r3, [pc, #480]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800415c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800416a:	430b      	orrs	r3, r1
 800416c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800416e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800417a:	633b      	str	r3, [r7, #48]	@ 0x30
 800417c:	2300      	movs	r3, #0
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004180:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800418a:	4b6c      	ldr	r3, [pc, #432]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	4a68      	ldr	r2, [pc, #416]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800419c:	430b      	orrs	r3, r1
 800419e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	2100      	movs	r1, #0
 80041aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d011      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	3308      	adds	r3, #8
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fb79 	bl	80048bc <RCCEx_PLL2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80041d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	2100      	movs	r1, #0
 80041ea:	6239      	str	r1, [r7, #32]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d011      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	3308      	adds	r3, #8
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fb59 	bl	80048bc <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004210:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	2100      	movs	r1, #0
 800422a:	61b9      	str	r1, [r7, #24]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d011      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800423c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004240:	3308      	adds	r3, #8
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb39 	bl	80048bc <RCCEx_PLL2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004250:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	2100      	movs	r1, #0
 800426a:	6139      	str	r1, [r7, #16]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d011      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004280:	3328      	adds	r3, #40	@ 0x28
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fbcb 	bl	8004a20 <RCCEx_PLL3_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	2100      	movs	r1, #0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	3328      	adds	r3, #40	@ 0x28
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fbab 	bl	8004a20 <RCCEx_PLL3_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	2100      	movs	r1, #0
 80042ea:	6039      	str	r1, [r7, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d011      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004300:	3328      	adds	r3, #40	@ 0x28
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fb8b 	bl	8004a20 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004310:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800431c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004320:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004334:	46bd      	mov	sp, r7
 8004336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433a:	bf00      	nop
 800433c:	58024400 	.word	0x58024400

08004340 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004344:	f7fe fe00 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4904      	ldr	r1, [pc, #16]	@ (8004368 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004360:	4618      	mov	r0, r3
 8004362:	bd80      	pop	{r7, pc}
 8004364:	58024400 	.word	0x58024400
 8004368:	08006834 	.word	0x08006834

0800436c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004374:	4ba1      	ldr	r3, [pc, #644]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800437e:	4b9f      	ldr	r3, [pc, #636]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	0b1b      	lsrs	r3, r3, #12
 8004384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004388:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800438a:	4b9c      	ldr	r3, [pc, #624]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004396:	4b99      	ldr	r3, [pc, #612]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	08db      	lsrs	r3, r3, #3
 800439c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8111 	beq.w	80045dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f000 8083 	beq.w	80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	f200 80a1 	bhi.w	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d056      	beq.n	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043d6:	e099      	b.n	800450c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043d8:	4b88      	ldr	r3, [pc, #544]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02d      	beq.n	8004440 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043e4:	4b85      	ldr	r3, [pc, #532]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	4a84      	ldr	r2, [pc, #528]	@ (8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80043f0:	fa22 f303 	lsr.w	r3, r2, r3
 80043f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800440e:	4b7b      	ldr	r3, [pc, #492]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800441e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004422:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800442a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800442e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800443e:	e087      	b.n	8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004608 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800444e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004452:	4b6a      	ldr	r3, [pc, #424]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004462:	ed97 6a03 	vldr	s12, [r7, #12]
 8004466:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800446a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800447a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004482:	e065      	b.n	8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800460c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004496:	4b59      	ldr	r3, [pc, #356]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044c6:	e043      	b.n	8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b48      	ldr	r3, [pc, #288]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450a:	e021      	b.n	8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800460c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451e:	4b37      	ldr	r3, [pc, #220]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004532:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004550:	4b2a      	ldr	r3, [pc, #168]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	0a5b      	lsrs	r3, r3, #9
 8004556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004562:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800456a:	edd7 6a07 	vldr	s13, [r7, #28]
 800456e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004576:	ee17 2a90 	vmov	r2, s15
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800457e:	4b1f      	ldr	r3, [pc, #124]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004598:	edd7 6a07 	vldr	s13, [r7, #28]
 800459c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045a4:	ee17 2a90 	vmov	r2, s15
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80045ac:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	0e1b      	lsrs	r3, r3, #24
 80045b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d2:	ee17 2a90 	vmov	r2, s15
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045da:	e008      	b.n	80045ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
}
 80045ee:	bf00      	nop
 80045f0:	3724      	adds	r7, #36	@ 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	58024400 	.word	0x58024400
 8004600:	03d09000 	.word	0x03d09000
 8004604:	46000000 	.word	0x46000000
 8004608:	4c742400 	.word	0x4c742400
 800460c:	4a742400 	.word	0x4a742400
 8004610:	4bbebc20 	.word	0x4bbebc20

08004614 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	@ 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800461c:	4ba1      	ldr	r3, [pc, #644]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004626:	4b9f      	ldr	r3, [pc, #636]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	0d1b      	lsrs	r3, r3, #20
 800462c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004630:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004632:	4b9c      	ldr	r3, [pc, #624]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800463e:	4b99      	ldr	r3, [pc, #612]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004642:	08db      	lsrs	r3, r3, #3
 8004644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8111 	beq.w	8004884 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b02      	cmp	r3, #2
 8004666:	f000 8083 	beq.w	8004770 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b02      	cmp	r3, #2
 800466e:	f200 80a1 	bhi.w	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d056      	beq.n	800472c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800467e:	e099      	b.n	80047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004680:	4b88      	ldr	r3, [pc, #544]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02d      	beq.n	80046e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800468c:	4b85      	ldr	r3, [pc, #532]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	08db      	lsrs	r3, r3, #3
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	4a84      	ldr	r2, [pc, #528]	@ (80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
 800469c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b6:	4b7b      	ldr	r3, [pc, #492]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046e6:	e087      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80046f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046fa:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800470a:	ed97 6a03 	vldr	s12, [r7, #12]
 800470e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800471a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800472a:	e065      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800473a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473e:	4b59      	ldr	r3, [pc, #356]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004752:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800475a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476e:	e043      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800477e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004782:	4b48      	ldr	r3, [pc, #288]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004792:	ed97 6a03 	vldr	s12, [r7, #12]
 8004796:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800479a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b2:	e021      	b.n	80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b37      	ldr	r3, [pc, #220]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80047f8:	4b2a      	ldr	r3, [pc, #168]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	0a5b      	lsrs	r3, r3, #9
 80047fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800480e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004812:	edd7 6a07 	vldr	s13, [r7, #28]
 8004816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481e:	ee17 2a90 	vmov	r2, s15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004826:	4b1f      	ldr	r3, [pc, #124]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004838:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800483c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004840:	edd7 6a07 	vldr	s13, [r7, #28]
 8004844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800484c:	ee17 2a90 	vmov	r2, s15
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800486a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487a:	ee17 2a90 	vmov	r2, s15
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004882:	e008      	b.n	8004896 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
}
 8004896:	bf00      	nop
 8004898:	3724      	adds	r7, #36	@ 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	58024400 	.word	0x58024400
 80048a8:	03d09000 	.word	0x03d09000
 80048ac:	46000000 	.word	0x46000000
 80048b0:	4c742400 	.word	0x4c742400
 80048b4:	4a742400 	.word	0x4a742400
 80048b8:	4bbebc20 	.word	0x4bbebc20

080048bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ca:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d101      	bne.n	80048da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e099      	b.n	8004a0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048da:	4b4f      	ldr	r3, [pc, #316]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4e      	ldr	r2, [pc, #312]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80048e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e6:	f7fc fa1b 	bl	8000d20 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80048ee:	f7fc fa17 	bl	8000d20 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e086      	b.n	8004a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004900:	4b45      	ldr	r3, [pc, #276]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800490c:	4b42      	ldr	r3, [pc, #264]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004910:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	493f      	ldr	r1, [pc, #252]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	3b01      	subs	r3, #1
 8004926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	b29b      	uxth	r3, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	3b01      	subs	r3, #1
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004950:	4931      	ldr	r1, [pc, #196]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004956:	4b30      	ldr	r3, [pc, #192]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004968:	4b2b      	ldr	r3, [pc, #172]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	f023 0220 	bic.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	4928      	ldr	r1, [pc, #160]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800497a:	4b27      	ldr	r3, [pc, #156]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497e:	4a26      	ldr	r2, [pc, #152]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004980:	f023 0310 	bic.w	r3, r3, #16
 8004984:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004986:	4b24      	ldr	r3, [pc, #144]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498a:	4b24      	ldr	r3, [pc, #144]	@ (8004a1c <RCCEx_PLL2_Config+0x160>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	69d2      	ldr	r2, [r2, #28]
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	4920      	ldr	r1, [pc, #128]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800499a:	4b1f      	ldr	r3, [pc, #124]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049a0:	f043 0310 	orr.w	r3, r3, #16
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049b8:	e00f      	b.n	80049da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d106      	bne.n	80049ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049c0:	4b15      	ldr	r3, [pc, #84]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	4a14      	ldr	r2, [pc, #80]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049cc:	e005      	b.n	80049da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	4a11      	ldr	r2, [pc, #68]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049da:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a0e      	ldr	r2, [pc, #56]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 80049e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e6:	f7fc f99b 	bl	8000d20 <HAL_GetTick>
 80049ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049ee:	f7fc f997 	bl	8000d20 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <RCCEx_PLL2_Config+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	ffff0007 	.word	0xffff0007

08004a20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2e:	4b53      	ldr	r3, [pc, #332]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d101      	bne.n	8004a3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e099      	b.n	8004b72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4e      	ldr	r2, [pc, #312]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fc f969 	bl	8000d20 <HAL_GetTick>
 8004a4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a52:	f7fc f965 	bl	8000d20 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e086      	b.n	8004b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a64:	4b45      	ldr	r3, [pc, #276]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a70:	4b42      	ldr	r3, [pc, #264]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	051b      	lsls	r3, r3, #20
 8004a7e:	493f      	ldr	r1, [pc, #252]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	025b      	lsls	r3, r3, #9
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ab4:	4931      	ldr	r1, [pc, #196]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004aba:	4b30      	ldr	r3, [pc, #192]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	492d      	ldr	r1, [pc, #180]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004acc:	4b2b      	ldr	r3, [pc, #172]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	4928      	ldr	r1, [pc, #160]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	4a26      	ldr	r2, [pc, #152]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004aea:	4b24      	ldr	r3, [pc, #144]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aee:	4b24      	ldr	r3, [pc, #144]	@ (8004b80 <RCCEx_PLL3_Config+0x160>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	69d2      	ldr	r2, [r2, #28]
 8004af6:	00d2      	lsls	r2, r2, #3
 8004af8:	4920      	ldr	r1, [pc, #128]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004afe:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	4a1e      	ldr	r2, [pc, #120]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b10:	4b1a      	ldr	r3, [pc, #104]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	4a19      	ldr	r2, [pc, #100]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b1c:	e00f      	b.n	8004b3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d106      	bne.n	8004b32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b24:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	4a14      	ldr	r2, [pc, #80]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b30:	e005      	b.n	8004b3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b32:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b36:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a0e      	ldr	r2, [pc, #56]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fc f8e9 	bl	8000d20 <HAL_GetTick>
 8004b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b50:	e008      	b.n	8004b64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b52:	f7fc f8e5 	bl	8000d20 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e006      	b.n	8004b72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <RCCEx_PLL3_Config+0x15c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	ffff0007 	.word	0xffff0007

08004b84 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e04a      	b.n	8004c2c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fb fee7 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2224      	movs	r2, #36	@ 0x24
 8004bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fa76 	bl	80060c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fc07 	bl	80053e8 <UART_SetConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e023      	b.n	8004c2c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004c02:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0208 	orr.w	r2, r2, #8
 8004c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f001 faed 	bl	8006204 <UART_CheckIdleState>
 8004c2a:	4603      	mov	r3, r0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b0ba      	sub	sp, #232	@ 0xe8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004c5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004c62:	4013      	ands	r3, r2
 8004c64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8377 	beq.w	800538c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
      }
      return;
 8004ca6:	e371      	b.n	800538c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8123 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8004eec <HAL_UART_IRQHandler+0x2b8>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef0 <HAL_UART_IRQHandler+0x2bc>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8116 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <HAL_UART_IRQHandler+0xc8>
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00b      	beq.n	8004cfc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	f043 0201 	orr.w	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d011      	beq.n	8004d2c <HAL_UART_IRQHandler+0xf8>
 8004d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d011      	beq.n	8004d5c <HAL_UART_IRQHandler+0x128>
 8004d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00b      	beq.n	8004d5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d52:	f043 0202 	orr.w	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d78:	4b5c      	ldr	r3, [pc, #368]	@ (8004eec <HAL_UART_IRQHandler+0x2b8>)
 8004d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2208      	movs	r2, #8
 8004d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f043 0208 	orr.w	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d012      	beq.n	8004dca <HAL_UART_IRQHandler+0x196>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004db8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc0:	f043 0220 	orr.w	r2, r3, #32
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 82dd 	beq.w	8005390 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d013      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d005      	beq.n	8004e2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d054      	beq.n	8004ed8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fb00 	bl	8006434 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b40      	cmp	r3, #64	@ 0x40
 8004e40:	d146      	bne.n	8004ed0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3308      	adds	r3, #8
 8004e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1d9      	bne.n	8004e42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ef4 <HAL_UART_IRQHandler+0x2c0>)
 8004ea0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fc fd01 	bl	80018b0 <HAL_DMA_Abort_IT>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d019      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec6:	e00f      	b.n	8004ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa77 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	e00b      	b.n	8004ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa73 	bl	80053bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed6:	e007      	b.n	8004ee8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa6f 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004ee6:	e253      	b.n	8005390 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	bf00      	nop
    return;
 8004eea:	e251      	b.n	8005390 <HAL_UART_IRQHandler+0x75c>
 8004eec:	10000001 	.word	0x10000001
 8004ef0:	04000120 	.word	0x04000120
 8004ef4:	08006501 	.word	0x08006501

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	f040 81e7 	bne.w	80052d0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 81e0 	beq.w	80052d0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 81d9 	beq.w	80052d0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	f040 8151 	bne.w	80051d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a96      	ldr	r2, [pc, #600]	@ (8005198 <HAL_UART_IRQHandler+0x564>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d068      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a93      	ldr	r2, [pc, #588]	@ (800519c <HAL_UART_IRQHandler+0x568>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d061      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a91      	ldr	r2, [pc, #580]	@ (80051a0 <HAL_UART_IRQHandler+0x56c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d05a      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a8e      	ldr	r2, [pc, #568]	@ (80051a4 <HAL_UART_IRQHandler+0x570>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d053      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a8c      	ldr	r2, [pc, #560]	@ (80051a8 <HAL_UART_IRQHandler+0x574>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04c      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a89      	ldr	r2, [pc, #548]	@ (80051ac <HAL_UART_IRQHandler+0x578>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a87      	ldr	r2, [pc, #540]	@ (80051b0 <HAL_UART_IRQHandler+0x57c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d03e      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a84      	ldr	r2, [pc, #528]	@ (80051b4 <HAL_UART_IRQHandler+0x580>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d037      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a82      	ldr	r2, [pc, #520]	@ (80051b8 <HAL_UART_IRQHandler+0x584>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d030      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7f      	ldr	r2, [pc, #508]	@ (80051bc <HAL_UART_IRQHandler+0x588>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d029      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7d      	ldr	r2, [pc, #500]	@ (80051c0 <HAL_UART_IRQHandler+0x58c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80051c4 <HAL_UART_IRQHandler+0x590>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01b      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a78      	ldr	r2, [pc, #480]	@ (80051c8 <HAL_UART_IRQHandler+0x594>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d014      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a75      	ldr	r2, [pc, #468]	@ (80051cc <HAL_UART_IRQHandler+0x598>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00d      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	@ (80051d0 <HAL_UART_IRQHandler+0x59c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d006      	beq.n	8005016 <HAL_UART_IRQHandler+0x3e2>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a70      	ldr	r2, [pc, #448]	@ (80051d4 <HAL_UART_IRQHandler+0x5a0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d106      	bne.n	8005024 <HAL_UART_IRQHandler+0x3f0>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	b29b      	uxth	r3, r3
 8005022:	e005      	b.n	8005030 <HAL_UART_IRQHandler+0x3fc>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 81ab 	beq.w	8005394 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005044:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005048:	429a      	cmp	r2, r3
 800504a:	f080 81a3 	bcs.w	8005394 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005054:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005064:	f000 8087 	beq.w	8005176 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800507c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005092:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005096:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800509e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1da      	bne.n	8005068 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3308      	adds	r3, #8
 80050b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e1      	bne.n	80050b2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005112:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005114:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005118:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e3      	bne.n	80050ee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005144:	f023 0310 	bic.w	r3, r3, #16
 8005148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005156:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005158:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800515c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e4      	bne.n	8005134 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc f87f 	bl	8001274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005188:	b29b      	uxth	r3, r3
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	b29b      	uxth	r3, r3
 800518e:	4619      	mov	r1, r3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f91d 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005196:	e0fd      	b.n	8005394 <HAL_UART_IRQHandler+0x760>
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80cf 	beq.w	8005398 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80051fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80ca 	beq.w	8005398 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005218:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005226:	647b      	str	r3, [r7, #68]	@ 0x44
 8005228:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800522c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e4      	bne.n	8005204 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	623b      	str	r3, [r7, #32]
   return(result);
 800524a:	6a3a      	ldr	r2, [r7, #32]
 800524c:	4b55      	ldr	r3, [pc, #340]	@ (80053a4 <HAL_UART_IRQHandler+0x770>)
 800524e:	4013      	ands	r3, r2
 8005250:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800525e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e3      	bne.n	800523a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60fb      	str	r3, [r7, #12]
   return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	617b      	str	r3, [r7, #20]
   return(result);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e4      	bne.n	8005286 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f881 	bl	80053d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052ce:	e063      	b.n	8005398 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00e      	beq.n	80052fa <HAL_UART_IRQHandler+0x6c6>
 80052dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f001 f945 	bl	8006582 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f8:	e051      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005302:	2b00      	cmp	r3, #0
 8005304:	d014      	beq.n	8005330 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005322:	2b00      	cmp	r3, #0
 8005324:	d03a      	beq.n	800539c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
    }
    return;
 800532e:	e035      	b.n	800539c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_UART_IRQHandler+0x71c>
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 f8ef 	bl	800652c <UART_EndTransmit_IT>
    return;
 800534e:	e026      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <HAL_UART_IRQHandler+0x73c>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005360:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 f91e 	bl	80065aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800536e:	e016      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d010      	beq.n	800539e <HAL_UART_IRQHandler+0x76a>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	2b00      	cmp	r3, #0
 8005382:	da0c      	bge.n	800539e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 f906 	bl	8006596 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800538a:	e008      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
      return;
 800538c:	bf00      	nop
 800538e:	e006      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
    return;
 8005390:	bf00      	nop
 8005392:	e004      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
      return;
 8005394:	bf00      	nop
 8005396:	e002      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
      return;
 8005398:	bf00      	nop
 800539a:	e000      	b.n	800539e <HAL_UART_IRQHandler+0x76a>
    return;
 800539c:	bf00      	nop
  }
}
 800539e:	37e8      	adds	r7, #232	@ 0xe8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	effffffe 	.word	0xeffffffe

080053a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ec:	b092      	sub	sp, #72	@ 0x48
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	431a      	orrs	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4313      	orrs	r3, r2
 800540e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4bbe      	ldr	r3, [pc, #760]	@ (8005710 <UART_SetConfig+0x328>)
 8005418:	4013      	ands	r3, r2
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005420:	430b      	orrs	r3, r1
 8005422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4ab3      	ldr	r2, [pc, #716]	@ (8005714 <UART_SetConfig+0x32c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005450:	4313      	orrs	r3, r2
 8005452:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	4baf      	ldr	r3, [pc, #700]	@ (8005718 <UART_SetConfig+0x330>)
 800545c:	4013      	ands	r3, r2
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005464:	430b      	orrs	r3, r1
 8005466:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546e:	f023 010f 	bic.w	r1, r3, #15
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4aa6      	ldr	r2, [pc, #664]	@ (800571c <UART_SetConfig+0x334>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d177      	bne.n	8005578 <UART_SetConfig+0x190>
 8005488:	4ba5      	ldr	r3, [pc, #660]	@ (8005720 <UART_SetConfig+0x338>)
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005490:	2b28      	cmp	r3, #40	@ 0x28
 8005492:	d86d      	bhi.n	8005570 <UART_SetConfig+0x188>
 8005494:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <UART_SetConfig+0xb4>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	08005541 	.word	0x08005541
 80054a0:	08005571 	.word	0x08005571
 80054a4:	08005571 	.word	0x08005571
 80054a8:	08005571 	.word	0x08005571
 80054ac:	08005571 	.word	0x08005571
 80054b0:	08005571 	.word	0x08005571
 80054b4:	08005571 	.word	0x08005571
 80054b8:	08005571 	.word	0x08005571
 80054bc:	08005549 	.word	0x08005549
 80054c0:	08005571 	.word	0x08005571
 80054c4:	08005571 	.word	0x08005571
 80054c8:	08005571 	.word	0x08005571
 80054cc:	08005571 	.word	0x08005571
 80054d0:	08005571 	.word	0x08005571
 80054d4:	08005571 	.word	0x08005571
 80054d8:	08005571 	.word	0x08005571
 80054dc:	08005551 	.word	0x08005551
 80054e0:	08005571 	.word	0x08005571
 80054e4:	08005571 	.word	0x08005571
 80054e8:	08005571 	.word	0x08005571
 80054ec:	08005571 	.word	0x08005571
 80054f0:	08005571 	.word	0x08005571
 80054f4:	08005571 	.word	0x08005571
 80054f8:	08005571 	.word	0x08005571
 80054fc:	08005559 	.word	0x08005559
 8005500:	08005571 	.word	0x08005571
 8005504:	08005571 	.word	0x08005571
 8005508:	08005571 	.word	0x08005571
 800550c:	08005571 	.word	0x08005571
 8005510:	08005571 	.word	0x08005571
 8005514:	08005571 	.word	0x08005571
 8005518:	08005571 	.word	0x08005571
 800551c:	08005561 	.word	0x08005561
 8005520:	08005571 	.word	0x08005571
 8005524:	08005571 	.word	0x08005571
 8005528:	08005571 	.word	0x08005571
 800552c:	08005571 	.word	0x08005571
 8005530:	08005571 	.word	0x08005571
 8005534:	08005571 	.word	0x08005571
 8005538:	08005571 	.word	0x08005571
 800553c:	08005569 	.word	0x08005569
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005546:	e326      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005548:	2304      	movs	r3, #4
 800554a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554e:	e322      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005550:	2308      	movs	r3, #8
 8005552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005556:	e31e      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005558:	2310      	movs	r3, #16
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e31a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005560:	2320      	movs	r3, #32
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e316      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005568:	2340      	movs	r3, #64	@ 0x40
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e312      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005570:	2380      	movs	r3, #128	@ 0x80
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e30e      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a69      	ldr	r2, [pc, #420]	@ (8005724 <UART_SetConfig+0x33c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d130      	bne.n	80055e4 <UART_SetConfig+0x1fc>
 8005582:	4b67      	ldr	r3, [pc, #412]	@ (8005720 <UART_SetConfig+0x338>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	2b05      	cmp	r3, #5
 800558c:	d826      	bhi.n	80055dc <UART_SetConfig+0x1f4>
 800558e:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <UART_SetConfig+0x1ac>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055ad 	.word	0x080055ad
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055bd 	.word	0x080055bd
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	080055cd 	.word	0x080055cd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e2f0      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e2ec      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e2e8      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	e2e4      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055cc:	2320      	movs	r3, #32
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d2:	e2e0      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055d4:	2340      	movs	r3, #64	@ 0x40
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e2dc      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e2d8      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4f      	ldr	r2, [pc, #316]	@ (8005728 <UART_SetConfig+0x340>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d130      	bne.n	8005650 <UART_SetConfig+0x268>
 80055ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005720 <UART_SetConfig+0x338>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d826      	bhi.n	8005648 <UART_SetConfig+0x260>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0x218>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	2300      	movs	r3, #0
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e2ba      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e2b6      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e2b2      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e2ae      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e2aa      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005640:	2340      	movs	r3, #64	@ 0x40
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e2a6      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e2a2      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a35      	ldr	r2, [pc, #212]	@ (800572c <UART_SetConfig+0x344>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d130      	bne.n	80056bc <UART_SetConfig+0x2d4>
 800565a:	4b31      	ldr	r3, [pc, #196]	@ (8005720 <UART_SetConfig+0x338>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	2b05      	cmp	r3, #5
 8005664:	d826      	bhi.n	80056b4 <UART_SetConfig+0x2cc>
 8005666:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <UART_SetConfig+0x284>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	08005685 	.word	0x08005685
 8005670:	0800568d 	.word	0x0800568d
 8005674:	08005695 	.word	0x08005695
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056a5 	.word	0x080056a5
 8005680:	080056ad 	.word	0x080056ad
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e284      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800568c:	2304      	movs	r3, #4
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e280      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005694:	2308      	movs	r3, #8
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e27c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800569c:	2310      	movs	r3, #16
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e278      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80056a4:	2320      	movs	r3, #32
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e274      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80056ac:	2340      	movs	r3, #64	@ 0x40
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e270      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e26c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <UART_SetConfig+0x348>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d142      	bne.n	800574c <UART_SetConfig+0x364>
 80056c6:	4b16      	ldr	r3, [pc, #88]	@ (8005720 <UART_SetConfig+0x338>)
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d838      	bhi.n	8005744 <UART_SetConfig+0x35c>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <UART_SetConfig+0x2f0>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056f1 	.word	0x080056f1
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	08005701 	.word	0x08005701
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005735 	.word	0x08005735
 80056ec:	0800573d 	.word	0x0800573d
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e24e      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80056f8:	2304      	movs	r3, #4
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e24a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005700:	2308      	movs	r3, #8
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e246      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005708:	2310      	movs	r3, #16
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e242      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005710:	cfff69f3 	.word	0xcfff69f3
 8005714:	58000c00 	.word	0x58000c00
 8005718:	11fff4ff 	.word	0x11fff4ff
 800571c:	40011000 	.word	0x40011000
 8005720:	58024400 	.word	0x58024400
 8005724:	40004400 	.word	0x40004400
 8005728:	40004800 	.word	0x40004800
 800572c:	40004c00 	.word	0x40004c00
 8005730:	40005000 	.word	0x40005000
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e22c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800573c:	2340      	movs	r3, #64	@ 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e228      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e224      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4ab1      	ldr	r2, [pc, #708]	@ (8005a18 <UART_SetConfig+0x630>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d176      	bne.n	8005844 <UART_SetConfig+0x45c>
 8005756:	4bb1      	ldr	r3, [pc, #708]	@ (8005a1c <UART_SetConfig+0x634>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800575e:	2b28      	cmp	r3, #40	@ 0x28
 8005760:	d86c      	bhi.n	800583c <UART_SetConfig+0x454>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x380>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800580d 	.word	0x0800580d
 800576c:	0800583d 	.word	0x0800583d
 8005770:	0800583d 	.word	0x0800583d
 8005774:	0800583d 	.word	0x0800583d
 8005778:	0800583d 	.word	0x0800583d
 800577c:	0800583d 	.word	0x0800583d
 8005780:	0800583d 	.word	0x0800583d
 8005784:	0800583d 	.word	0x0800583d
 8005788:	08005815 	.word	0x08005815
 800578c:	0800583d 	.word	0x0800583d
 8005790:	0800583d 	.word	0x0800583d
 8005794:	0800583d 	.word	0x0800583d
 8005798:	0800583d 	.word	0x0800583d
 800579c:	0800583d 	.word	0x0800583d
 80057a0:	0800583d 	.word	0x0800583d
 80057a4:	0800583d 	.word	0x0800583d
 80057a8:	0800581d 	.word	0x0800581d
 80057ac:	0800583d 	.word	0x0800583d
 80057b0:	0800583d 	.word	0x0800583d
 80057b4:	0800583d 	.word	0x0800583d
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	0800583d 	.word	0x0800583d
 80057c0:	0800583d 	.word	0x0800583d
 80057c4:	0800583d 	.word	0x0800583d
 80057c8:	08005825 	.word	0x08005825
 80057cc:	0800583d 	.word	0x0800583d
 80057d0:	0800583d 	.word	0x0800583d
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	0800583d 	.word	0x0800583d
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	0800582d 	.word	0x0800582d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800583d 	.word	0x0800583d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005835 	.word	0x08005835
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e1c0      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e1bc      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e1b8      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e1b4      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800582c:	2320      	movs	r3, #32
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e1b0      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005834:	2340      	movs	r3, #64	@ 0x40
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e1ac      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005842:	e1a8      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a75      	ldr	r2, [pc, #468]	@ (8005a20 <UART_SetConfig+0x638>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d130      	bne.n	80058b0 <UART_SetConfig+0x4c8>
 800584e:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <UART_SetConfig+0x634>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	2b05      	cmp	r3, #5
 8005858:	d826      	bhi.n	80058a8 <UART_SetConfig+0x4c0>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <UART_SetConfig+0x478>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005879 	.word	0x08005879
 8005864:	08005881 	.word	0x08005881
 8005868:	08005889 	.word	0x08005889
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e18a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e186      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e182      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005896:	e17e      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005898:	2320      	movs	r3, #32
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589e:	e17a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a6:	e176      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e172      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5b      	ldr	r2, [pc, #364]	@ (8005a24 <UART_SetConfig+0x63c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d130      	bne.n	800591c <UART_SetConfig+0x534>
 80058ba:	4b58      	ldr	r3, [pc, #352]	@ (8005a1c <UART_SetConfig+0x634>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d826      	bhi.n	8005914 <UART_SetConfig+0x52c>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0x4e4>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e154      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e150      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e14c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e148      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005904:	2320      	movs	r3, #32
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e144      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800590c:	2340      	movs	r3, #64	@ 0x40
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e140      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e13c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a41      	ldr	r2, [pc, #260]	@ (8005a28 <UART_SetConfig+0x640>)
 8005922:	4293      	cmp	r3, r2
 8005924:	f040 8082 	bne.w	8005a2c <UART_SetConfig+0x644>
 8005928:	4b3c      	ldr	r3, [pc, #240]	@ (8005a1c <UART_SetConfig+0x634>)
 800592a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005930:	2b28      	cmp	r3, #40	@ 0x28
 8005932:	d86d      	bhi.n	8005a10 <UART_SetConfig+0x628>
 8005934:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x554>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	080059e1 	.word	0x080059e1
 8005940:	08005a11 	.word	0x08005a11
 8005944:	08005a11 	.word	0x08005a11
 8005948:	08005a11 	.word	0x08005a11
 800594c:	08005a11 	.word	0x08005a11
 8005950:	08005a11 	.word	0x08005a11
 8005954:	08005a11 	.word	0x08005a11
 8005958:	08005a11 	.word	0x08005a11
 800595c:	080059e9 	.word	0x080059e9
 8005960:	08005a11 	.word	0x08005a11
 8005964:	08005a11 	.word	0x08005a11
 8005968:	08005a11 	.word	0x08005a11
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a11 	.word	0x08005a11
 8005974:	08005a11 	.word	0x08005a11
 8005978:	08005a11 	.word	0x08005a11
 800597c:	080059f1 	.word	0x080059f1
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a11 	.word	0x08005a11
 8005988:	08005a11 	.word	0x08005a11
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a11 	.word	0x08005a11
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a11 	.word	0x08005a11
 800599c:	080059f9 	.word	0x080059f9
 80059a0:	08005a11 	.word	0x08005a11
 80059a4:	08005a11 	.word	0x08005a11
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	08005a11 	.word	0x08005a11
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	08005a11 	.word	0x08005a11
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a11 	.word	0x08005a11
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e0d6      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e0d2      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e0ce      	b.n	8005b96 <UART_SetConfig+0x7ae>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e0ca      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005a00:	2320      	movs	r3, #32
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e0c6      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005a08:	2340      	movs	r3, #64	@ 0x40
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e0c2      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e0be      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005a18:	40011400 	.word	0x40011400
 8005a1c:	58024400 	.word	0x58024400
 8005a20:	40007800 	.word	0x40007800
 8005a24:	40007c00 	.word	0x40007c00
 8005a28:	40011800 	.word	0x40011800
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4aad      	ldr	r2, [pc, #692]	@ (8005ce8 <UART_SetConfig+0x900>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d176      	bne.n	8005b24 <UART_SetConfig+0x73c>
 8005a36:	4bad      	ldr	r3, [pc, #692]	@ (8005cec <UART_SetConfig+0x904>)
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a3e:	2b28      	cmp	r3, #40	@ 0x28
 8005a40:	d86c      	bhi.n	8005b1c <UART_SetConfig+0x734>
 8005a42:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <UART_SetConfig+0x660>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005aed 	.word	0x08005aed
 8005a4c:	08005b1d 	.word	0x08005b1d
 8005a50:	08005b1d 	.word	0x08005b1d
 8005a54:	08005b1d 	.word	0x08005b1d
 8005a58:	08005b1d 	.word	0x08005b1d
 8005a5c:	08005b1d 	.word	0x08005b1d
 8005a60:	08005b1d 	.word	0x08005b1d
 8005a64:	08005b1d 	.word	0x08005b1d
 8005a68:	08005af5 	.word	0x08005af5
 8005a6c:	08005b1d 	.word	0x08005b1d
 8005a70:	08005b1d 	.word	0x08005b1d
 8005a74:	08005b1d 	.word	0x08005b1d
 8005a78:	08005b1d 	.word	0x08005b1d
 8005a7c:	08005b1d 	.word	0x08005b1d
 8005a80:	08005b1d 	.word	0x08005b1d
 8005a84:	08005b1d 	.word	0x08005b1d
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005b1d 	.word	0x08005b1d
 8005a90:	08005b1d 	.word	0x08005b1d
 8005a94:	08005b1d 	.word	0x08005b1d
 8005a98:	08005b1d 	.word	0x08005b1d
 8005a9c:	08005b1d 	.word	0x08005b1d
 8005aa0:	08005b1d 	.word	0x08005b1d
 8005aa4:	08005b1d 	.word	0x08005b1d
 8005aa8:	08005b05 	.word	0x08005b05
 8005aac:	08005b1d 	.word	0x08005b1d
 8005ab0:	08005b1d 	.word	0x08005b1d
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005b1d 	.word	0x08005b1d
 8005abc:	08005b1d 	.word	0x08005b1d
 8005ac0:	08005b1d 	.word	0x08005b1d
 8005ac4:	08005b1d 	.word	0x08005b1d
 8005ac8:	08005b0d 	.word	0x08005b0d
 8005acc:	08005b1d 	.word	0x08005b1d
 8005ad0:	08005b1d 	.word	0x08005b1d
 8005ad4:	08005b1d 	.word	0x08005b1d
 8005ad8:	08005b1d 	.word	0x08005b1d
 8005adc:	08005b1d 	.word	0x08005b1d
 8005ae0:	08005b1d 	.word	0x08005b1d
 8005ae4:	08005b1d 	.word	0x08005b1d
 8005ae8:	08005b15 	.word	0x08005b15
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005af2:	e050      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005af4:	2304      	movs	r3, #4
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afa:	e04c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005afc:	2308      	movs	r3, #8
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b02:	e048      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0a:	e044      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e040      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b14:	2340      	movs	r3, #64	@ 0x40
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e03c      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e038      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a71      	ldr	r2, [pc, #452]	@ (8005cf0 <UART_SetConfig+0x908>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d130      	bne.n	8005b90 <UART_SetConfig+0x7a8>
 8005b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005cec <UART_SetConfig+0x904>)
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	d826      	bhi.n	8005b88 <UART_SetConfig+0x7a0>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x758>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b59 	.word	0x08005b59
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	08005b69 	.word	0x08005b69
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b79 	.word	0x08005b79
 8005b54:	08005b81 	.word	0x08005b81
 8005b58:	2302      	movs	r3, #2
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e01a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b60:	2304      	movs	r3, #4
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e016      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e012      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b70:	2310      	movs	r3, #16
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e00e      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b78:	2320      	movs	r3, #32
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e00a      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b80:	2340      	movs	r3, #64	@ 0x40
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e006      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e002      	b.n	8005b96 <UART_SetConfig+0x7ae>
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a55      	ldr	r2, [pc, #340]	@ (8005cf0 <UART_SetConfig+0x908>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	f040 80f8 	bne.w	8005d92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	dc46      	bgt.n	8005c38 <UART_SetConfig+0x850>
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	db75      	blt.n	8005c9a <UART_SetConfig+0x8b2>
 8005bae:	3b02      	subs	r3, #2
 8005bb0:	2b1e      	cmp	r3, #30
 8005bb2:	d872      	bhi.n	8005c9a <UART_SetConfig+0x8b2>
 8005bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <UART_SetConfig+0x7d4>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005c3f 	.word	0x08005c3f
 8005bc0:	08005c9b 	.word	0x08005c9b
 8005bc4:	08005c47 	.word	0x08005c47
 8005bc8:	08005c9b 	.word	0x08005c9b
 8005bcc:	08005c9b 	.word	0x08005c9b
 8005bd0:	08005c9b 	.word	0x08005c9b
 8005bd4:	08005c57 	.word	0x08005c57
 8005bd8:	08005c9b 	.word	0x08005c9b
 8005bdc:	08005c9b 	.word	0x08005c9b
 8005be0:	08005c9b 	.word	0x08005c9b
 8005be4:	08005c9b 	.word	0x08005c9b
 8005be8:	08005c9b 	.word	0x08005c9b
 8005bec:	08005c9b 	.word	0x08005c9b
 8005bf0:	08005c9b 	.word	0x08005c9b
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	08005c9b 	.word	0x08005c9b
 8005bfc:	08005c9b 	.word	0x08005c9b
 8005c00:	08005c9b 	.word	0x08005c9b
 8005c04:	08005c9b 	.word	0x08005c9b
 8005c08:	08005c9b 	.word	0x08005c9b
 8005c0c:	08005c9b 	.word	0x08005c9b
 8005c10:	08005c9b 	.word	0x08005c9b
 8005c14:	08005c9b 	.word	0x08005c9b
 8005c18:	08005c9b 	.word	0x08005c9b
 8005c1c:	08005c9b 	.word	0x08005c9b
 8005c20:	08005c9b 	.word	0x08005c9b
 8005c24:	08005c9b 	.word	0x08005c9b
 8005c28:	08005c9b 	.word	0x08005c9b
 8005c2c:	08005c9b 	.word	0x08005c9b
 8005c30:	08005c9b 	.word	0x08005c9b
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	2b40      	cmp	r3, #64	@ 0x40
 8005c3a:	d02a      	beq.n	8005c92 <UART_SetConfig+0x8aa>
 8005c3c:	e02d      	b.n	8005c9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c3e:	f7fe fb7f 	bl	8004340 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c44:	e02f      	b.n	8005ca6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fb8e 	bl	800436c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c54:	e027      	b.n	8005ca6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 0318 	add.w	r3, r7, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fcda 	bl	8004614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c64:	e01f      	b.n	8005ca6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c66:	4b21      	ldr	r3, [pc, #132]	@ (8005cec <UART_SetConfig+0x904>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c72:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <UART_SetConfig+0x904>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <UART_SetConfig+0x90c>)
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c84:	e00f      	b.n	8005ca6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005c86:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <UART_SetConfig+0x90c>)
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c8a:	e00c      	b.n	8005ca6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf8 <UART_SetConfig+0x910>)
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	e009      	b.n	8005ca6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c98:	e005      	b.n	8005ca6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 81ee 	beq.w	800608a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	4a12      	ldr	r2, [pc, #72]	@ (8005cfc <UART_SetConfig+0x914>)
 8005cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cc0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4413      	add	r3, r2
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d305      	bcc.n	8005cde <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d910      	bls.n	8005d00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ce4:	e1d1      	b.n	800608a <UART_SetConfig+0xca2>
 8005ce6:	bf00      	nop
 8005ce8:	40011c00 	.word	0x40011c00
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	58000c00 	.word	0x58000c00
 8005cf4:	03d09000 	.word	0x03d09000
 8005cf8:	003d0900 	.word	0x003d0900
 8005cfc:	08006844 	.word	0x08006844
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d02:	2200      	movs	r2, #0
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	4ac0      	ldr	r2, [pc, #768]	@ (8006010 <UART_SetConfig+0xc28>)
 8005d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d22:	f7fa faf3 	bl	800030c <__aeabi_uldivmod>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	020b      	lsls	r3, r1, #8
 8005d38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d3c:	0202      	lsls	r2, r0, #8
 8005d3e:	6979      	ldr	r1, [r7, #20]
 8005d40:	6849      	ldr	r1, [r1, #4]
 8005d42:	0849      	lsrs	r1, r1, #1
 8005d44:	2000      	movs	r0, #0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4605      	mov	r5, r0
 8005d4a:	eb12 0804 	adds.w	r8, r2, r4
 8005d4e:	eb43 0905 	adc.w	r9, r3, r5
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	469a      	mov	sl, r3
 8005d5a:	4693      	mov	fp, r2
 8005d5c:	4652      	mov	r2, sl
 8005d5e:	465b      	mov	r3, fp
 8005d60:	4640      	mov	r0, r8
 8005d62:	4649      	mov	r1, r9
 8005d64:	f7fa fad2 	bl	800030c <__aeabi_uldivmod>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d76:	d308      	bcc.n	8005d8a <UART_SetConfig+0x9a2>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7e:	d204      	bcs.n	8005d8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	e17f      	b.n	800608a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d90:	e17b      	b.n	800608a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d9a:	f040 80bd 	bne.w	8005f18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005d9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	dc48      	bgt.n	8005e38 <UART_SetConfig+0xa50>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	db7b      	blt.n	8005ea2 <UART_SetConfig+0xaba>
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d879      	bhi.n	8005ea2 <UART_SetConfig+0xaba>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x9cc>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005e3f 	.word	0x08005e3f
 8005db8:	08005e47 	.word	0x08005e47
 8005dbc:	08005ea3 	.word	0x08005ea3
 8005dc0:	08005ea3 	.word	0x08005ea3
 8005dc4:	08005e4f 	.word	0x08005e4f
 8005dc8:	08005ea3 	.word	0x08005ea3
 8005dcc:	08005ea3 	.word	0x08005ea3
 8005dd0:	08005ea3 	.word	0x08005ea3
 8005dd4:	08005e5f 	.word	0x08005e5f
 8005dd8:	08005ea3 	.word	0x08005ea3
 8005ddc:	08005ea3 	.word	0x08005ea3
 8005de0:	08005ea3 	.word	0x08005ea3
 8005de4:	08005ea3 	.word	0x08005ea3
 8005de8:	08005ea3 	.word	0x08005ea3
 8005dec:	08005ea3 	.word	0x08005ea3
 8005df0:	08005ea3 	.word	0x08005ea3
 8005df4:	08005e6f 	.word	0x08005e6f
 8005df8:	08005ea3 	.word	0x08005ea3
 8005dfc:	08005ea3 	.word	0x08005ea3
 8005e00:	08005ea3 	.word	0x08005ea3
 8005e04:	08005ea3 	.word	0x08005ea3
 8005e08:	08005ea3 	.word	0x08005ea3
 8005e0c:	08005ea3 	.word	0x08005ea3
 8005e10:	08005ea3 	.word	0x08005ea3
 8005e14:	08005ea3 	.word	0x08005ea3
 8005e18:	08005ea3 	.word	0x08005ea3
 8005e1c:	08005ea3 	.word	0x08005ea3
 8005e20:	08005ea3 	.word	0x08005ea3
 8005e24:	08005ea3 	.word	0x08005ea3
 8005e28:	08005ea3 	.word	0x08005ea3
 8005e2c:	08005ea3 	.word	0x08005ea3
 8005e30:	08005ea3 	.word	0x08005ea3
 8005e34:	08005e95 	.word	0x08005e95
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d02e      	beq.n	8005e9a <UART_SetConfig+0xab2>
 8005e3c:	e031      	b.n	8005ea2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e3e:	f7fd f8b3 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 8005e42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e44:	e033      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e46:	f7fd f8c5 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8005e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e4c:	e02f      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fa8a 	bl	800436c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5c:	e027      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e5e:	f107 0318 	add.w	r3, r7, #24
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe fbd6 	bl	8004614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e01f      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e6e:	4b69      	ldr	r3, [pc, #420]	@ (8006014 <UART_SetConfig+0xc2c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e7a:	4b66      	ldr	r3, [pc, #408]	@ (8006014 <UART_SetConfig+0xc2c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	08db      	lsrs	r3, r3, #3
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	4a64      	ldr	r2, [pc, #400]	@ (8006018 <UART_SetConfig+0xc30>)
 8005e86:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e8c:	e00f      	b.n	8005eae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005e8e:	4b62      	ldr	r3, [pc, #392]	@ (8006018 <UART_SetConfig+0xc30>)
 8005e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e92:	e00c      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e94:	4b61      	ldr	r3, [pc, #388]	@ (800601c <UART_SetConfig+0xc34>)
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea0:	e005      	b.n	8005eae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80ea 	beq.w	800608a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	4a55      	ldr	r2, [pc, #340]	@ (8006010 <UART_SetConfig+0xc28>)
 8005ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec8:	005a      	lsls	r2, r3, #1
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	085b      	lsrs	r3, r3, #1
 8005ed0:	441a      	add	r2, r3
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	d916      	bls.n	8005f10 <UART_SetConfig+0xb28>
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee8:	d212      	bcs.n	8005f10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f023 030f 	bic.w	r3, r3, #15
 8005ef2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005f02:	4313      	orrs	r3, r2
 8005f04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	e0bc      	b.n	800608a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f16:	e0b8      	b.n	800608a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	dc4b      	bgt.n	8005fb8 <UART_SetConfig+0xbd0>
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f2c0 8087 	blt.w	8006034 <UART_SetConfig+0xc4c>
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	f200 8084 	bhi.w	8006034 <UART_SetConfig+0xc4c>
 8005f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f34 <UART_SetConfig+0xb4c>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005fbf 	.word	0x08005fbf
 8005f38:	08005fc7 	.word	0x08005fc7
 8005f3c:	08006035 	.word	0x08006035
 8005f40:	08006035 	.word	0x08006035
 8005f44:	08005fcf 	.word	0x08005fcf
 8005f48:	08006035 	.word	0x08006035
 8005f4c:	08006035 	.word	0x08006035
 8005f50:	08006035 	.word	0x08006035
 8005f54:	08005fdf 	.word	0x08005fdf
 8005f58:	08006035 	.word	0x08006035
 8005f5c:	08006035 	.word	0x08006035
 8005f60:	08006035 	.word	0x08006035
 8005f64:	08006035 	.word	0x08006035
 8005f68:	08006035 	.word	0x08006035
 8005f6c:	08006035 	.word	0x08006035
 8005f70:	08006035 	.word	0x08006035
 8005f74:	08005fef 	.word	0x08005fef
 8005f78:	08006035 	.word	0x08006035
 8005f7c:	08006035 	.word	0x08006035
 8005f80:	08006035 	.word	0x08006035
 8005f84:	08006035 	.word	0x08006035
 8005f88:	08006035 	.word	0x08006035
 8005f8c:	08006035 	.word	0x08006035
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006035 	.word	0x08006035
 8005f98:	08006035 	.word	0x08006035
 8005f9c:	08006035 	.word	0x08006035
 8005fa0:	08006035 	.word	0x08006035
 8005fa4:	08006035 	.word	0x08006035
 8005fa8:	08006035 	.word	0x08006035
 8005fac:	08006035 	.word	0x08006035
 8005fb0:	08006035 	.word	0x08006035
 8005fb4:	08006027 	.word	0x08006027
 8005fb8:	2b40      	cmp	r3, #64	@ 0x40
 8005fba:	d037      	beq.n	800602c <UART_SetConfig+0xc44>
 8005fbc:	e03a      	b.n	8006034 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbe:	f7fc fff3 	bl	8002fa8 <HAL_RCC_GetPCLK1Freq>
 8005fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fc4:	e03c      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc6:	f7fd f805 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8005fca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fcc:	e038      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe f9ca 	bl	800436c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fdc:	e030      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fde:	f107 0318 	add.w	r3, r7, #24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe fb16 	bl	8004614 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fec:	e028      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fee:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <UART_SetConfig+0xc2c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ffa:	4b06      	ldr	r3, [pc, #24]	@ (8006014 <UART_SetConfig+0xc2c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	08db      	lsrs	r3, r3, #3
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	4a04      	ldr	r2, [pc, #16]	@ (8006018 <UART_SetConfig+0xc30>)
 8006006:	fa22 f303 	lsr.w	r3, r2, r3
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800600c:	e018      	b.n	8006040 <UART_SetConfig+0xc58>
 800600e:	bf00      	nop
 8006010:	08006844 	.word	0x08006844
 8006014:	58024400 	.word	0x58024400
 8006018:	03d09000 	.word	0x03d09000
 800601c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006020:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <UART_SetConfig+0xccc>)
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006024:	e00c      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006026:	4b24      	ldr	r3, [pc, #144]	@ (80060b8 <UART_SetConfig+0xcd0>)
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602a:	e009      	b.n	8006040 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006032:	e005      	b.n	8006040 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800603e:	bf00      	nop
    }

    if (pclk != 0U)
 8006040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d021      	beq.n	800608a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	4a1c      	ldr	r2, [pc, #112]	@ (80060bc <UART_SetConfig+0xcd4>)
 800604c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006050:	461a      	mov	r2, r3
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006054:	fbb3 f2f2 	udiv	r2, r3, r2
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	441a      	add	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	2b0f      	cmp	r3, #15
 800606e:	d909      	bls.n	8006084 <UART_SetConfig+0xc9c>
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006076:	d205      	bcs.n	8006084 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607a:	b29a      	uxth	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	e002      	b.n	800608a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2201      	movs	r2, #1
 800608e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2201      	movs	r2, #1
 8006096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2200      	movs	r2, #0
 80060a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80060a6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3748      	adds	r7, #72	@ 0x48
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060b4:	03d09000 	.word	0x03d09000
 80060b8:	003d0900 	.word	0x003d0900
 80060bc:	08006844 	.word	0x08006844

080060c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00a      	beq.n	8006172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061be:	d10a      	bne.n	80061d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b098      	sub	sp, #96	@ 0x60
 8006208:	af02      	add	r7, sp, #8
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006214:	f7fa fd84 	bl	8000d20 <HAL_GetTick>
 8006218:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b08      	cmp	r3, #8
 8006226:	d12f      	bne.n	8006288 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800622c:	9300      	str	r3, [sp, #0]
 800622e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006230:	2200      	movs	r2, #0
 8006232:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f88e 	bl	8006358 <UART_WaitOnFlagUntilTimeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d022      	beq.n	8006288 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624a:	e853 3f00 	ldrex	r3, [r3]
 800624e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006256:	653b      	str	r3, [r7, #80]	@ 0x50
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	461a      	mov	r2, r3
 800625e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006260:	647b      	str	r3, [r7, #68]	@ 0x44
 8006262:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006268:	e841 2300 	strex	r3, r2, [r1]
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800626e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e063      	b.n	8006350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b04      	cmp	r3, #4
 8006294:	d149      	bne.n	800632a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006296:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800629e:	2200      	movs	r2, #0
 80062a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f857 	bl	8006358 <UART_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d03c      	beq.n	800632a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	623b      	str	r3, [r7, #32]
   return(result);
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80062d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e6      	bne.n	80062b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3308      	adds	r3, #8
 80062e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f023 0301 	bic.w	r3, r3, #1
 80062f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3308      	adds	r3, #8
 8006300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006302:	61fa      	str	r2, [r7, #28]
 8006304:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	69b9      	ldr	r1, [r7, #24]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	617b      	str	r3, [r7, #20]
   return(result);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e5      	bne.n	80062e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e012      	b.n	8006350 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2220      	movs	r2, #32
 8006336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3758      	adds	r7, #88	@ 0x58
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006368:	e04f      	b.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d04b      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fa fcd5 	bl	8000d20 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <UART_WaitOnFlagUntilTimeout+0x30>
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e04e      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d037      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b80      	cmp	r3, #128	@ 0x80
 800639e:	d034      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b40      	cmp	r3, #64	@ 0x40
 80063a4:	d031      	beq.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d110      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2208      	movs	r2, #8
 80063ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f839 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2208      	movs	r2, #8
 80063c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e029      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e4:	d111      	bne.n	800640a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 f81f 	bl	8006434 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e00f      	b.n	800642a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4013      	ands	r3, r2
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	429a      	cmp	r2, r3
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	429a      	cmp	r2, r3
 8006426:	d0a0      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006434:	b480      	push	{r7}
 8006436:	b095      	sub	sp, #84	@ 0x54
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645a:	643b      	str	r3, [r7, #64]	@ 0x40
 800645c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e6      	bne.n	800643c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3308      	adds	r3, #8
 8006474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	61fb      	str	r3, [r7, #28]
   return(result);
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <UART_EndRxTransfer+0xc8>)
 8006482:	4013      	ands	r3, r2
 8006484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800648e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d118      	bne.n	80064dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6979      	ldr	r1, [r7, #20]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	613b      	str	r3, [r7, #16]
   return(result);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e6      	bne.n	80064aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064f0:	bf00      	nop
 80064f2:	3754      	adds	r7, #84	@ 0x54
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	effffffe 	.word	0xeffffffe

08006500 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7fe ff4c 	bl	80053bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006524:	bf00      	nop
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	e853 3f00 	ldrex	r3, [r3]
 8006540:	60bb      	str	r3, [r7, #8]
   return(result);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6979      	ldr	r1, [r7, #20]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	613b      	str	r3, [r7, #16]
   return(result);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e6      	bne.n	8006534 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fe ff17 	bl	80053a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657a:	bf00      	nop
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e027      	b.n	8006624 <HAL_UARTEx_DisableFifoMode+0x66>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	@ 0x24
 80065e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006602:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006644:	2302      	movs	r3, #2
 8006646:	e02d      	b.n	80066a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2224      	movs	r2, #36	@ 0x24
 8006654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f84f 	bl	8006728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e02d      	b.n	8006720 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	@ 0x24
 80066d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f811 	bl	8006728 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006748:	e031      	b.n	80067ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800674a:	2310      	movs	r3, #16
 800674c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800674e:	2310      	movs	r3, #16
 8006750:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	0e5b      	lsrs	r3, r3, #25
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	0f5b      	lsrs	r3, r3, #29
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	7b3a      	ldrb	r2, [r7, #12]
 8006776:	4911      	ldr	r1, [pc, #68]	@ (80067bc <UARTEx_SetNbDataToProcess+0x94>)
 8006778:	5c8a      	ldrb	r2, [r1, r2]
 800677a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800677e:	7b3a      	ldrb	r2, [r7, #12]
 8006780:	490f      	ldr	r1, [pc, #60]	@ (80067c0 <UARTEx_SetNbDataToProcess+0x98>)
 8006782:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006784:	fb93 f3f2 	sdiv	r3, r3, r2
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	7b7a      	ldrb	r2, [r7, #13]
 8006794:	4909      	ldr	r1, [pc, #36]	@ (80067bc <UARTEx_SetNbDataToProcess+0x94>)
 8006796:	5c8a      	ldrb	r2, [r1, r2]
 8006798:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800679c:	7b7a      	ldrb	r2, [r7, #13]
 800679e:	4908      	ldr	r1, [pc, #32]	@ (80067c0 <UARTEx_SetNbDataToProcess+0x98>)
 80067a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	0800685c 	.word	0x0800685c
 80067c0:	08006864 	.word	0x08006864

080067c4 <memset>:
 80067c4:	4402      	add	r2, r0
 80067c6:	4603      	mov	r3, r0
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d100      	bne.n	80067ce <memset+0xa>
 80067cc:	4770      	bx	lr
 80067ce:	f803 1b01 	strb.w	r1, [r3], #1
 80067d2:	e7f9      	b.n	80067c8 <memset+0x4>

080067d4 <__libc_init_array>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	4d0d      	ldr	r5, [pc, #52]	@ (800680c <__libc_init_array+0x38>)
 80067d8:	4c0d      	ldr	r4, [pc, #52]	@ (8006810 <__libc_init_array+0x3c>)
 80067da:	1b64      	subs	r4, r4, r5
 80067dc:	10a4      	asrs	r4, r4, #2
 80067de:	2600      	movs	r6, #0
 80067e0:	42a6      	cmp	r6, r4
 80067e2:	d109      	bne.n	80067f8 <__libc_init_array+0x24>
 80067e4:	4d0b      	ldr	r5, [pc, #44]	@ (8006814 <__libc_init_array+0x40>)
 80067e6:	4c0c      	ldr	r4, [pc, #48]	@ (8006818 <__libc_init_array+0x44>)
 80067e8:	f000 f818 	bl	800681c <_init>
 80067ec:	1b64      	subs	r4, r4, r5
 80067ee:	10a4      	asrs	r4, r4, #2
 80067f0:	2600      	movs	r6, #0
 80067f2:	42a6      	cmp	r6, r4
 80067f4:	d105      	bne.n	8006802 <__libc_init_array+0x2e>
 80067f6:	bd70      	pop	{r4, r5, r6, pc}
 80067f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067fc:	4798      	blx	r3
 80067fe:	3601      	adds	r6, #1
 8006800:	e7ee      	b.n	80067e0 <__libc_init_array+0xc>
 8006802:	f855 3b04 	ldr.w	r3, [r5], #4
 8006806:	4798      	blx	r3
 8006808:	3601      	adds	r6, #1
 800680a:	e7f2      	b.n	80067f2 <__libc_init_array+0x1e>
 800680c:	08006874 	.word	0x08006874
 8006810:	08006874 	.word	0x08006874
 8006814:	08006874 	.word	0x08006874
 8006818:	08006878 	.word	0x08006878

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
